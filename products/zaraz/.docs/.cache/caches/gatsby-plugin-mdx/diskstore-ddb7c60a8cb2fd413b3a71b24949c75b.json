{"expireTime":9007200893713860000,"key":"gatsby-plugin-mdx-entire-payload-06b5cff02a4ec4926ad779735a627982-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Events API","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":13,"offset":13},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":13,"offset":13},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Cloudflare Zaraz allows you to track the actions your users are taking on your website and other events that might happen in real-time. ","position":{"start":{"line":4,"column":1,"offset":15},"end":{"line":4,"column":137,"offset":151},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":15},"end":{"line":4,"column":137,"offset":151},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Common user actions you will probably be interested in tracking are Successful Signups, CTA clicks, and Purchases, among others. Common examples for other types of events are tracking the impressions of specific elements on a page, or loading a specific widget.","position":{"start":{"line":6,"column":1,"offset":153},"end":{"line":6,"column":262,"offset":414},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":153},"end":{"line":6,"column":262,"offset":414},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To start tracking events, add the Events API JavaScript code to your website. The following is an example for tracking purchases:","position":{"start":{"line":8,"column":1,"offset":416},"end":{"line":8,"column":130,"offset":545},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":416},"end":{"line":8,"column":130,"offset":545},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"zaraz.track(“purchase”, { value: “200”, currency: “USD”})","position":{"start":{"line":10,"column":1,"offset":547},"end":{"line":12,"column":4,"offset":614},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Only the first parameter is required. This parameter should be a string specifying the name of the event you want to track. The second parameter is an optional free-form object that can be used to send an additional set of key-value properties. For example, if the ","position":{"start":{"line":14,"column":1,"offset":616},"end":{"line":14,"column":266,"offset":881},"indent":[]}},{"type":"inlineCode","value":"event","position":{"start":{"line":14,"column":266,"offset":881},"end":{"line":14,"column":273,"offset":888},"indent":[]}},{"type":"text","value":" you are tracking is \"purchase\", this object can include ","position":{"start":{"line":14,"column":273,"offset":888},"end":{"line":14,"column":330,"offset":945},"indent":[]}},{"type":"inlineCode","value":"price","position":{"start":{"line":14,"column":330,"offset":945},"end":{"line":14,"column":337,"offset":952},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":14,"column":337,"offset":952},"end":{"line":14,"column":339,"offset":954},"indent":[]}},{"type":"inlineCode","value":"currency","position":{"start":{"line":14,"column":339,"offset":954},"end":{"line":14,"column":349,"offset":964},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":14,"column":349,"offset":964},"end":{"line":14,"column":351,"offset":966},"indent":[]}},{"type":"inlineCode","value":"transaction_id","position":{"start":{"line":14,"column":351,"offset":966},"end":{"line":14,"column":367,"offset":982},"indent":[]}},{"type":"text","value":", or ","position":{"start":{"line":14,"column":367,"offset":982},"end":{"line":14,"column":372,"offset":987},"indent":[]}},{"type":"inlineCode","value":"tax","position":{"start":{"line":14,"column":372,"offset":987},"end":{"line":14,"column":377,"offset":992},"indent":[]}},{"type":"text","value":". You choose what you want to track.","position":{"start":{"line":14,"column":377,"offset":992},"end":{"line":14,"column":413,"offset":1028},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":616},"end":{"line":14,"column":413,"offset":1028},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"After using the Events API in your website to track an action:","position":{"start":{"line":16,"column":1,"offset":1030},"end":{"line":16,"column":63,"offset":1092},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1030},"end":{"line":16,"column":63,"offset":1092},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a ","position":{"start":{"line":18,"column":4,"offset":1097},"end":{"line":18,"column":13,"offset":1106},"indent":[]}},{"type":"link","title":null,"url":"/get-started/create-trigger","children":[{"type":"text","value":"trigger that matches your ","position":{"start":{"line":18,"column":14,"offset":1107},"end":{"line":18,"column":40,"offset":1133},"indent":[]}},{"type":"inlineCode","value":"zaraz.track","position":{"start":{"line":18,"column":40,"offset":1133},"end":{"line":18,"column":53,"offset":1146},"indent":[]}},{"type":"text","value":" call","position":{"start":{"line":18,"column":53,"offset":1146},"end":{"line":18,"column":58,"offset":1151},"indent":[]}}],"position":{"start":{"line":18,"column":13,"offset":1106},"end":{"line":18,"column":88,"offset":1181},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":1097},"end":{"line":18,"column":88,"offset":1181},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1094},"end":{"line":18,"column":88,"offset":1181},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Add an ","position":{"start":{"line":19,"column":4,"offset":1185},"end":{"line":19,"column":11,"offset":1192},"indent":[]}},{"type":"link","title":null,"url":"/get-started/send-events","children":[{"type":"text","value":"event that uses the trigger","position":{"start":{"line":19,"column":12,"offset":1193},"end":{"line":19,"column":39,"offset":1220},"indent":[]}}],"position":{"start":{"line":19,"column":11,"offset":1192},"end":{"line":19,"column":66,"offset":1247},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":1185},"end":{"line":19,"column":66,"offset":1247},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1182},"end":{"line":19,"column":66,"offset":1247},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1094},"end":{"line":19,"column":66,"offset":1247},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {\"order\":2,\"pcx-content-type\":\"reference\"}","position":{"start":{"line":21,"column":1,"offset":1249},"end":{"line":21,"column":71,"offset":1319},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":21,"column":71,"offset":1319}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 2,\n  \"pcx-content-type\": \"reference\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"events-api\"\n  }, \"Events API\"), mdx(\"p\", null, \"Cloudflare Zaraz allows you to track the actions your users are taking on your website and other events that might happen in real-time. \"), mdx(\"p\", null, \"Common user actions you will probably be interested in tracking are Successful Signups, CTA clicks, and Purchases, among others. Common examples for other types of events are tracking the impressions of specific elements on a page, or loading a specific widget.\"), mdx(\"p\", null, \"To start tracking events, add the Events API JavaScript code to your website. The following is an example for tracking purchases:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"zaraz.track(\\u201Cpurchase\\u201D, { value: \\u201C200\\u201D, currency: \\u201CUSD\\u201D})\\n\")), mdx(\"p\", null, \"Only the first parameter is required. This parameter should be a string specifying the name of the event you want to track. The second parameter is an optional free-form object that can be used to send an additional set of key-value properties. For example, if the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"event\"), \" you are tracking is \\\"purchase\\\", this object can include \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"price\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"currency\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transaction_id\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tax\"), \". You choose what you want to track.\"), mdx(\"p\", null, \"After using the Events API in your website to track an action:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/get-started/create-trigger\"\n  }, \"trigger that matches your \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"zaraz.track\"), \" call\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add an \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/get-started/send-events\"\n  }, \"event that uses the trigger\"))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"order\": 2,\n  \"pcx-content-type\": \"reference\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"events-api\"\n    }}>{`Events API`}</h1>\n    <p>{`Cloudflare Zaraz allows you to track the actions your users are taking on your website and other events that might happen in real-time. `}</p>\n    <p>{`Common user actions you will probably be interested in tracking are Successful Signups, CTA clicks, and Purchases, among others. Common examples for other types of events are tracking the impressions of specific elements on a page, or loading a specific widget.`}</p>\n    <p>{`To start tracking events, add the Events API JavaScript code to your website. The following is an example for tracking purchases:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`zaraz.track(“purchase”, { value: “200”, currency: “USD”})\n`}</code></pre>\n    <p>{`Only the first parameter is required. This parameter should be a string specifying the name of the event you want to track. The second parameter is an optional free-form object that can be used to send an additional set of key-value properties. For example, if the `}<inlineCode parentName=\"p\">{`event`}</inlineCode>{` you are tracking is \"purchase\", this object can include `}<inlineCode parentName=\"p\">{`price`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`currency`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`transaction_id`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`tax`}</inlineCode>{`. You choose what you want to track.`}</p>\n    <p>{`After using the Events API in your website to track an action:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create a `}<a parentName=\"li\" {...{\n          \"href\": \"/get-started/create-trigger\"\n        }}>{`trigger that matches your `}<inlineCode parentName=\"a\">{`zaraz.track`}</inlineCode>{` call`}</a></li>\n      <li parentName=\"ol\">{`Add an `}<a parentName=\"li\" {...{\n          \"href\": \"/get-started/send-events\"\n        }}>{`event that uses the trigger`}</a></li>\n    </ol>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}