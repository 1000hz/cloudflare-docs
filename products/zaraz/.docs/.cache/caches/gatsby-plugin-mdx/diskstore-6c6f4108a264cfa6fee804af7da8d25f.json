{"expireTime":9007200893713860000,"key":"gatsby-plugin-mdx-entire-payload-da85124f0ddb4dec1a90678fbb363f5b-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"dataLayer compatibility mode","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":31,"offset":31},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":31,"offset":31},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Cloudflare Zaraz offers backwards compatibility with the ","position":{"start":{"line":4,"column":1,"offset":33},"end":{"line":4,"column":58,"offset":90},"indent":[]}},{"type":"inlineCode","value":"dataLayer","position":{"start":{"line":4,"column":58,"offset":90},"end":{"line":4,"column":69,"offset":101},"indent":[]}},{"type":"text","value":" function found in tag management software, used to track events and other parameters. This way you can keep your current implementation and Cloudflare Zaraz will automatically collect your events.","position":{"start":{"line":4,"column":69,"offset":101},"end":{"line":4,"column":266,"offset":298},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":33},"end":{"line":4,"column":266,"offset":298},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this case, you will keep using the ","position":{"start":{"line":6,"column":1,"offset":300},"end":{"line":6,"column":39,"offset":338},"indent":[]}},{"type":"inlineCode","value":"dataLayer.push","position":{"start":{"line":6,"column":39,"offset":338},"end":{"line":6,"column":55,"offset":354},"indent":[]}},{"type":"text","value":" function to send data from the client-side to Zaraz:","position":{"start":{"line":6,"column":55,"offset":354},"end":{"line":6,"column":108,"offset":407},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":300},"end":{"line":6,"column":108,"offset":407},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"dataLayer.push({ 'event': 'eventName', 'property1': 'value' })","position":{"start":{"line":8,"column":1,"offset":409},"end":{"line":10,"column":4,"offset":481},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"When building a trigger, the only required field is ","position":{"start":{"line":12,"column":1,"offset":483},"end":{"line":12,"column":53,"offset":535},"indent":[]}},{"type":"inlineCode","value":"event","position":{"start":{"line":12,"column":53,"offset":535},"end":{"line":12,"column":60,"offset":542},"indent":[]}},{"type":"text","value":", which will be used as the name of the event you are tracking. The following example shows how to track a purchase event â€” note that the parameters inside the object depend on what you want to track:","position":{"start":{"line":12,"column":60,"offset":542},"end":{"line":12,"column":260,"offset":742},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":483},"end":{"line":12,"column":260,"offset":742},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"dataLayer.push({\n  'event': 'purchase',\n  'price': '24',\n  'currency': 'USD',\n  'transactionID': '12345678'\n})","position":{"start":{"line":14,"column":1,"offset":744},"end":{"line":21,"column":4,"offset":864},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Cloudflare Zaraz then translates the ","position":{"start":{"line":23,"column":1,"offset":866},"end":{"line":23,"column":38,"offset":903},"indent":[]}},{"type":"inlineCode","value":"dataLayer.push()","position":{"start":{"line":23,"column":38,"offset":903},"end":{"line":23,"column":56,"offset":921},"indent":[]}},{"type":"text","value":" call to a ","position":{"start":{"line":23,"column":56,"offset":921},"end":{"line":23,"column":67,"offset":932},"indent":[]}},{"type":"inlineCode","value":"zaraz.track()","position":{"start":{"line":23,"column":67,"offset":932},"end":{"line":23,"column":82,"offset":947},"indent":[]}},{"type":"text","value":" call. So, ","position":{"start":{"line":23,"column":82,"offset":947},"end":{"line":23,"column":93,"offset":958},"indent":[]}},{"type":"inlineCode","value":"dataLayer.push({event: \"purchase\", price: \"24\", \"currency\": \"USD\"})","position":{"start":{"line":23,"column":93,"offset":958},"end":{"line":23,"column":162,"offset":1027},"indent":[]}},{"type":"text","value":" is equivalent to ","position":{"start":{"line":23,"column":162,"offset":1027},"end":{"line":23,"column":180,"offset":1045},"indent":[]}},{"type":"inlineCode","value":"zaraz.track(\"purchase\", {\"price\": \"24\", \"currency\": \"USD\"})","position":{"start":{"line":23,"column":180,"offset":1045},"end":{"line":23,"column":241,"offset":1106},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":23,"column":241,"offset":1106},"end":{"line":23,"column":242,"offset":1107},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":866},"end":{"line":23,"column":242,"offset":1107},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To track a ","position":{"start":{"line":25,"column":1,"offset":1109},"end":{"line":25,"column":12,"offset":1120},"indent":[]}},{"type":"inlineCode","value":"dataLayer.push","position":{"start":{"line":25,"column":12,"offset":1120},"end":{"line":25,"column":28,"offset":1136},"indent":[]}},{"type":"text","value":" function, create a trigger with ","position":{"start":{"line":25,"column":28,"offset":1136},"end":{"line":25,"column":61,"offset":1169},"indent":[]}},{"type":"inlineCode","value":"zaraz.track()","position":{"start":{"line":25,"column":61,"offset":1169},"end":{"line":25,"column":76,"offset":1184},"indent":[]}},{"type":"text","value":". The following example triggers a ","position":{"start":{"line":25,"column":76,"offset":1184},"end":{"line":25,"column":111,"offset":1219},"indent":[]}},{"type":"inlineCode","value":"dataLayer.push()","position":{"start":{"line":25,"column":111,"offset":1219},"end":{"line":25,"column":129,"offset":1237},"indent":[]}},{"type":"text","value":" function with a ","position":{"start":{"line":25,"column":129,"offset":1237},"end":{"line":25,"column":146,"offset":1254},"indent":[]}},{"type":"inlineCode","value":"purchase","position":{"start":{"line":25,"column":146,"offset":1254},"end":{"line":25,"column":156,"offset":1264},"indent":[]}},{"type":"text","value":" event:","position":{"start":{"line":25,"column":156,"offset":1264},"end":{"line":25,"column":163,"offset":1271},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1109},"end":{"line":25,"column":163,"offset":1271},"indent":[]}},{"type":"code","lang":"txt","meta":null,"value":"{{ client.__zarazTrack }}` Contains `purchase`","position":{"start":{"line":27,"column":1,"offset":1273},"end":{"line":29,"column":4,"offset":1330},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We do not recommend using ","position":{"start":{"line":31,"column":1,"offset":1332},"end":{"line":31,"column":27,"offset":1358},"indent":[]}},{"type":"inlineCode","value":"dataLayer","position":{"start":{"line":31,"column":27,"offset":1358},"end":{"line":31,"column":38,"offset":1369},"indent":[]}},{"type":"text","value":". However, as many websites employ it, Cloudflare has this automatic translation layer that converts it to ","position":{"start":{"line":31,"column":38,"offset":1369},"end":{"line":31,"column":145,"offset":1476},"indent":[]}},{"type":"inlineCode","value":"zaraz.track()","position":{"start":{"line":31,"column":145,"offset":1476},"end":{"line":31,"column":160,"offset":1491},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":31,"column":160,"offset":1491},"end":{"line":31,"column":161,"offset":1492},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1332},"end":{"line":31,"column":161,"offset":1492},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"order\":3,\"pcx-content-type\":\"reference\"}","position":{"start":{"line":33,"column":1,"offset":1494},"end":{"line":33,"column":71,"offset":1564},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":33,"column":71,"offset":1564}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 3,\n  \"pcx-content-type\": \"reference\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"datalayer-compatibility-mode\"\n  }, \"dataLayer compatibility mode\"), mdx(\"p\", null, \"Cloudflare Zaraz offers backwards compatibility with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataLayer\"), \" function found in tag management software, used to track events and other parameters. This way you can keep your current implementation and Cloudflare Zaraz will automatically collect your events.\"), mdx(\"p\", null, \"In this case, you will keep using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataLayer.push\"), \" function to send data from the client-side to Zaraz:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"dataLayer.push({ 'event': 'eventName', 'property1': 'value' })\\n\")), mdx(\"p\", null, \"When building a trigger, the only required field is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"event\"), \", which will be used as the name of the event you are tracking. The following example shows how to track a purchase event \\u2014 note that the parameters inside the object depend on what you want to track:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"dataLayer.push({\\n  'event': 'purchase',\\n  'price': '24',\\n  'currency': 'USD',\\n  'transactionID': '12345678'\\n})\\n\")), mdx(\"p\", null, \"Cloudflare Zaraz then translates the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataLayer.push()\"), \" call to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zaraz.track()\"), \" call. So, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataLayer.push({event: \\\"purchase\\\", price: \\\"24\\\", \\\"currency\\\": \\\"USD\\\"})\"), \" is equivalent to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zaraz.track(\\\"purchase\\\", {\\\"price\\\": \\\"24\\\", \\\"currency\\\": \\\"USD\\\"})\"), \".\"), mdx(\"p\", null, \"To track a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataLayer.push\"), \" function, create a trigger with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zaraz.track()\"), \". The following example triggers a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataLayer.push()\"), \" function with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"purchase\"), \" event:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"{{ client.__zarazTrack }}` Contains `purchase`\\n\")), mdx(\"p\", null, \"We do not recommend using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataLayer\"), \". However, as many websites employ it, Cloudflare has this automatic translation layer that converts it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zaraz.track()\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"order\": 3,\n  \"pcx-content-type\": \"reference\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"datalayer-compatibility-mode\"\n    }}>{`dataLayer compatibility mode`}</h1>\n    <p>{`Cloudflare Zaraz offers backwards compatibility with the `}<inlineCode parentName=\"p\">{`dataLayer`}</inlineCode>{` function found in tag management software, used to track events and other parameters. This way you can keep your current implementation and Cloudflare Zaraz will automatically collect your events.`}</p>\n    <p>{`In this case, you will keep using the `}<inlineCode parentName=\"p\">{`dataLayer.push`}</inlineCode>{` function to send data from the client-side to Zaraz:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`dataLayer.push({ 'event': 'eventName', 'property1': 'value' })\n`}</code></pre>\n    <p>{`When building a trigger, the only required field is `}<inlineCode parentName=\"p\">{`event`}</inlineCode>{`, which will be used as the name of the event you are tracking. The following example shows how to track a purchase event â€” note that the parameters inside the object depend on what you want to track:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`dataLayer.push({\n  'event': 'purchase',\n  'price': '24',\n  'currency': 'USD',\n  'transactionID': '12345678'\n})\n`}</code></pre>\n    <p>{`Cloudflare Zaraz then translates the `}<inlineCode parentName=\"p\">{`dataLayer.push()`}</inlineCode>{` call to a `}<inlineCode parentName=\"p\">{`zaraz.track()`}</inlineCode>{` call. So, `}<inlineCode parentName=\"p\">{`dataLayer.push({event: \"purchase\", price: \"24\", \"currency\": \"USD\"})`}</inlineCode>{` is equivalent to `}<inlineCode parentName=\"p\">{`zaraz.track(\"purchase\", {\"price\": \"24\", \"currency\": \"USD\"})`}</inlineCode>{`.`}</p>\n    <p>{`To track a `}<inlineCode parentName=\"p\">{`dataLayer.push`}</inlineCode>{` function, create a trigger with `}<inlineCode parentName=\"p\">{`zaraz.track()`}</inlineCode>{`. The following example triggers a `}<inlineCode parentName=\"p\">{`dataLayer.push()`}</inlineCode>{` function with a `}<inlineCode parentName=\"p\">{`purchase`}</inlineCode>{` event:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-txt\"\n      }}>{`{{ client.__zarazTrack }}\\` Contains \\`purchase\\`\n`}</code></pre>\n    <p>{`We do not recommend using `}<inlineCode parentName=\"p\">{`dataLayer`}</inlineCode>{`. However, as many websites employ it, Cloudflare has this automatic translation layer that converts it to `}<inlineCode parentName=\"p\">{`zaraz.track()`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}