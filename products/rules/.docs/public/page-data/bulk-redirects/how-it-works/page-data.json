{"componentChunkName":"component---src-components-mdx-custom-renderer-js","path":"/bulk-redirects/how-it-works","result":{"data":{"mdx":{"id":"33285daa-4193-5d01-8ab0-24bc10de4ec1","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How it works\",\n  \"order\": 3,\n  \"pcx-content-type\": \"concept\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Definitions = makeShortcode(\"Definitions\");\nvar PropMeta = makeShortcode(\"PropMeta\");\nvar Aside = makeShortcode(\"Aside\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"how-bulk-redirects-work\"\n  }, \"How Bulk Redirects work\"), mdx(\"p\", null, \"For each incoming request, Cloudflare evaluates all URL Redirects of each Bulk Redirect List that is enabled by a Bulk Redirect Rule.\"), mdx(\"p\", null, \"If there is a match for a URL Redirect according to the URL matching algorithm, the redirect action is performed immediately, according to the URL Redirect configuration parameters. Cloudflare performs no further processing once a redirect action has been executed.\"), mdx(\"h2\", {\n    \"id\": \"matching-the-source-url-of-redirects\"\n  }, \"Matching the source URL of redirects\"), mdx(\"p\", null, \"The following URL Redirect parameters control the matching behavior between the request URL and source URLs of the configured (and enabled) URL Redirects:\"), mdx(Definitions, {\n    mdxType: \"Definitions\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Subpath matching\"), \" \", mdx(PropMeta, {\n    mdxType: \"PropMeta\"\n  }, \"(default: false)\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If true, the URL Redirect will apply to all paths under the given source path. For example, consider the following source and target URLs of a URL Redirect:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Source URL: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"https://example.com/foo/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Target URL: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"https://example.com/qux/\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"With this configuration and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Subpath matching\"), \" enabled, an incoming request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"example.com/foo/bar\"), \" will be redirected to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://example.com/qux/bar\"), \".\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Include subdomains\"), \" \", mdx(PropMeta, {\n    mdxType: \"PropMeta\"\n  }, \"(default: false)\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If true, the source URL hostname of the URL Redirect will also apply to all its subdomains. For example, consider the following source and target URLs of a URL Redirect:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Source URL: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"https://example.com/about\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Target URL: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"https://example.com/newpage\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"With this configuration and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Includes subdomains\"), \" enabled, incoming requests to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://a.example.com/about\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://a.b.example.com/about\"), \" would also match, in addition to the specified domain with no subdomain (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://example.com/about\"), \").\")))))), mdx(\"p\", null, \"For detailed information on these parameters, refer to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/bulk-redirects/reference/parameters\"\n  }, \"URL Redirect parameters\"), \".\"), mdx(\"h2\", {\n    \"id\": \"configuring-the-path-and-query-string-behavior\"\n  }, \"Configuring the path and query string behavior\"), mdx(\"p\", null, \"The following parameters configure how Cloudflare determines the path and query string of the final target URL:\"), mdx(Definitions, {\n    mdxType: \"Definitions\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Preserve query string\"), \" \", mdx(PropMeta, {\n    mdxType: \"PropMeta\"\n  }, \"(default: false)\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If true, the final target URL will keep the query string of the original request. For example, consider the following source and target URLs of a URL Redirect:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Source URL: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"https://example.com/about\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Target URL: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"https://example.com/newpage\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"With this configuration and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Preserve query string\"), \" enabled, an incoming request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://example.com/about?q=term\"), \" would be redirected to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://example.com/newpage?q=term\"), \". If \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Preserve query string\"), \" is disabled, the same incoming request would be redirected to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://example.com/newpage\"), \".\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Preserve path suffix\"), \" \", mdx(PropMeta, {\n    mdxType: \"PropMeta\"\n  }, \"(default: true)\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Defines if the final target URL will include the parts of the request path that did not match the URL Redirect's source URL.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Subpath matching\"), \" is enabled, the path that was not matched is copied over to the final target URL. For example, consider the following source and target URLs of a URL Redirect:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Source URL: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"https://example.com/a/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Target URL: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"https://example.com/b/\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"An incoming request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://example.com/a/foo\"), \" will be redirected to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://example.com/b/foo\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you set \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Preserve path suffix\"), \" to false, the same request will still match the redirect, but it will be redirected to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://example.com/b/\"), \".\")))))), mdx(\"p\", null, \"For detailed information on these parameters, refer to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/bulk-redirects/reference/parameters\"\n  }, \"URL Redirect parameters\"), \".\"), mdx(\"h2\", {\n    \"id\": \"url-matching-algorithm\"\n  }, \"URL matching algorithm\"), mdx(\"p\", null, \"The URL of an incoming request matches a URL Redirect in a list if:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The scheme (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https\"), \") is the same as the source URL of the URL Redirect definition. Source URLs with no scheme will match both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https\"), \".\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The hostname is the same as the hostname in the source URL of the URL Redirect definition. If \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Include subdomains\"), \" is enabled, the subdomains of the hostname in the redirect definition will also match.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The path is the same as the source URL. If \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Subpath matching\"), \" is enabled, Cloudflare also considers the subpaths of the path in the URL Redirect's source URL when determining if there is a match. For example, a URL Redirect with its source URL defined as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"example.com/blog\"), \" will also match requests to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"example.com/blog/foo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"example.com/blog/bar\"), \".\"), mdx(Aside, {\n    type: \"note\",\n    header: \"Note\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"URL Redirects with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Subpath matching\"), \" enabled are only considered for request paths with 16 or fewer slashes. For example, if there is a configured URL Redirect with source URL set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"example.com/foo\"), \" and with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Subpath matching\"), \" enabled:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This URL Redirect would be considered for an incoming request with path \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16\"), \" (16 slashes in path).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This URL Redirect would \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"not\"), \" be considered for an incoming request with path \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17\"), \" (17 slashes in path).\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This does not affect URL Redirects with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Subpath matching\"), \" disabled. Exact path matches are always considered, even for redirects with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Subpath matching\"), \" enabled.\")))), mdx(\"h3\", {\n    \"id\": \"determining-the-url-redirect-to-apply\"\n  }, \"Determining the URL Redirect to apply\"), mdx(\"p\", null, \"If multiple URL Redirects can apply, then the redirect that wins is determined by the following rules:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"URL Redirects with the exact hostname win over URL Redirects with the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Include subdomains\"), \" option enabled.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"URL Redirects with \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Include subdomains\"), \" enabled win over other URL Redirects with \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Include subdomains\"), \" enabled if their domain is more specific.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"URL Redirects with a concrete scheme win over URL Redirects that match both \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"https\"), \" schemes.\")), mdx(\"p\", null, \"Regarding ordering rule 2 (more specific domains win over less specific domains), if there are two URL Redirects with source URL hostnames \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bar.com\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo.bar.com\"), \", an incoming request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"qux.foo.bar.com\"), \" will match the second redirect (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo.bar.com\"), \") because it is more specific.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"demo":null,"difficulty":null,"summary":null,"tags":null,"title":"How it works","type":null,"updated":null}}},"pageContext":{"id":"33285daa-4193-5d01-8ab0-24bc10de4ec1","fields":{"slug":"/bulk-redirects/how-it-works"},"frontmatter":{"pcx_content_type":"concept","title":"How it works","type":null,"order":3,"hidden":null,"hideChildren":null,"breadcrumbs":null},"headings":[{"value":"How Bulk Redirects work","depth":1}],"tableOfContents":{"items":[{"url":"#how-bulk-redirects-work","title":"How Bulk Redirects work","items":[{"url":"#matching-the-source-url-of-redirects","title":"Matching the source URL of redirects"},{"url":"#configuring-the-path-and-query-string-behavior","title":"Configuring the path and query string behavior"},{"url":"#url-matching-algorithm","title":"URL matching algorithm","items":[{"url":"#determining-the-url-redirect-to-apply","title":"Determining the URL Redirect to apply"}]}]}]},"parent":{"modifiedTime":"2022-01-26","relativePath":"bulk-redirects/how-it-works.md"}}},"staticQueryHashes":["2814688963","32046230","338033027","598566803","811020565"]}