{"expireTime":9007200897961981000,"key":"gatsby-plugin-mdx-entire-payload-12ab7c4b0bfa9138708e5721a78196c8-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"URL rewrite API parameter reference","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":38,"offset":38},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":38,"offset":38},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create a ","position":{"start":{"line":4,"column":1,"offset":40},"end":{"line":4,"column":10,"offset":49},"indent":[]}},{"type":"link","title":null,"url":"/transform/url-rewrite","children":[{"type":"text","value":"static or dynamic URL rewrite","position":{"start":{"line":4,"column":11,"offset":50},"end":{"line":4,"column":40,"offset":79},"indent":[]}}],"position":{"start":{"line":4,"column":10,"offset":49},"end":{"line":4,"column":65,"offset":104},"indent":[]}},{"type":"text","value":" based on the parameter name provided in the ","position":{"start":{"line":4,"column":65,"offset":104},"end":{"line":4,"column":110,"offset":149},"indent":[]}},{"type":"inlineCode","value":"action_parameters","position":{"start":{"line":4,"column":110,"offset":149},"end":{"line":4,"column":129,"offset":168},"indent":[]}},{"type":"text","value":" field:","position":{"start":{"line":4,"column":129,"offset":168},"end":{"line":4,"column":136,"offset":175},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":40},"end":{"line":4,"column":136,"offset":175},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Define the ","position":{"start":{"line":6,"column":3,"offset":179},"end":{"line":6,"column":14,"offset":190},"indent":[]}},{"type":"inlineCode","value":"value","position":{"start":{"line":6,"column":14,"offset":190},"end":{"line":6,"column":21,"offset":197},"indent":[]}},{"type":"text","value":" parameter to specify a static URL rewrite.","position":{"start":{"line":6,"column":21,"offset":197},"end":{"line":6,"column":64,"offset":240},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":179},"end":{"line":6,"column":64,"offset":240},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":177},"end":{"line":6,"column":64,"offset":240},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Define the ","position":{"start":{"line":7,"column":3,"offset":243},"end":{"line":7,"column":14,"offset":254},"indent":[]}},{"type":"inlineCode","value":"expression","position":{"start":{"line":7,"column":14,"offset":254},"end":{"line":7,"column":26,"offset":266},"indent":[]}},{"type":"text","value":" parameter to specify the expression that defines the dynamic URL rewrite to perform.","position":{"start":{"line":7,"column":26,"offset":266},"end":{"line":7,"column":111,"offset":351},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":243},"end":{"line":7,"column":111,"offset":351},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":241},"end":{"line":7,"column":111,"offset":351},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":177},"end":{"line":7,"column":111,"offset":351},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Static URL rewrite parameters","position":{"start":{"line":9,"column":4,"offset":356},"end":{"line":9,"column":33,"offset":385},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":353},"end":{"line":9,"column":33,"offset":385},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The full syntax of the ","position":{"start":{"line":11,"column":1,"offset":387},"end":{"line":11,"column":24,"offset":410},"indent":[]}},{"type":"inlineCode","value":"action_parameters","position":{"start":{"line":11,"column":24,"offset":410},"end":{"line":11,"column":43,"offset":429},"indent":[]}},{"type":"text","value":" field for a static URL Rewrite Rule that rewrites both the URI path and the query string is the following:","position":{"start":{"line":11,"column":43,"offset":429},"end":{"line":11,"column":150,"offset":536},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":387},"end":{"line":11,"column":150,"offset":536},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"\"action_parameters\": {\n  \"uri\": {\n    \"path\": { \n      \"value\": \"<URI_PATH_VALUE>\"\n    }, \n    \"query\": {\n      \"value\": \"<QUERY_STRING_VALUE>\"\n    }\n  }\n}","position":{"start":{"line":13,"column":1,"offset":538},"end":{"line":24,"column":4,"offset":705},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you are only rewriting the URI path or the query string, omit the ","position":{"start":{"line":26,"column":1,"offset":707},"end":{"line":26,"column":70,"offset":776},"indent":[]}},{"type":"inlineCode","value":"query","position":{"start":{"line":26,"column":70,"offset":776},"end":{"line":26,"column":77,"offset":783},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":26,"column":77,"offset":783},"end":{"line":26,"column":81,"offset":787},"indent":[]}},{"type":"inlineCode","value":"path","position":{"start":{"line":26,"column":81,"offset":787},"end":{"line":26,"column":87,"offset":793},"indent":[]}},{"type":"text","value":" parameter, respectively.","position":{"start":{"line":26,"column":87,"offset":793},"end":{"line":26,"column":112,"offset":818},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":707},"end":{"line":26,"column":112,"offset":818},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Dynamic URL rewrite parameters","position":{"start":{"line":28,"column":4,"offset":823},"end":{"line":28,"column":34,"offset":853},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":820},"end":{"line":28,"column":34,"offset":853},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The full syntax of the ","position":{"start":{"line":30,"column":1,"offset":855},"end":{"line":30,"column":24,"offset":878},"indent":[]}},{"type":"inlineCode","value":"action_parameters","position":{"start":{"line":30,"column":24,"offset":878},"end":{"line":30,"column":43,"offset":897},"indent":[]}},{"type":"text","value":" field for a dynamic URL Rewrite Rule that rewrites both the URI path and the query string is the following:","position":{"start":{"line":30,"column":43,"offset":897},"end":{"line":30,"column":151,"offset":1005},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":855},"end":{"line":30,"column":151,"offset":1005},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"\"action_parameters\": {\n  \"uri\": {\n    \"path\": { \n      \"expression\": \"<URI_PATH_EXPRESSION>\"\n    }, \n    \"query\": {\n      \"expression\": \"<QUERY_STRING_EXPRESSION>\"\n    }\n  }\n}","position":{"start":{"line":32,"column":1,"offset":1007},"end":{"line":43,"column":4,"offset":1194},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you are only rewriting the URI path or the query string, omit the ","position":{"start":{"line":45,"column":1,"offset":1196},"end":{"line":45,"column":70,"offset":1265},"indent":[]}},{"type":"inlineCode","value":"query","position":{"start":{"line":45,"column":70,"offset":1265},"end":{"line":45,"column":77,"offset":1272},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":45,"column":77,"offset":1272},"end":{"line":45,"column":81,"offset":1276},"indent":[]}},{"type":"inlineCode","value":"path","position":{"start":{"line":45,"column":81,"offset":1276},"end":{"line":45,"column":87,"offset":1282},"indent":[]}},{"type":"text","value":" parameter, respectively.","position":{"start":{"line":45,"column":87,"offset":1282},"end":{"line":45,"column":112,"offset":1307},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1196},"end":{"line":45,"column":112,"offset":1307},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Different URL rewrite types in the same rule","position":{"start":{"line":47,"column":4,"offset":1312},"end":{"line":47,"column":48,"offset":1356},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1309},"end":{"line":47,"column":48,"offset":1356},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The same rule can have different types of URL rewrites for the URI path and the query string. For example, a single rule can perform a ","position":{"start":{"line":49,"column":1,"offset":1358},"end":{"line":49,"column":136,"offset":1493},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"dynamic","position":{"start":{"line":49,"column":138,"offset":1495},"end":{"line":49,"column":145,"offset":1502},"indent":[]}}],"position":{"start":{"line":49,"column":136,"offset":1493},"end":{"line":49,"column":147,"offset":1504},"indent":[]}},{"type":"text","value":" URL rewrite of the URI path and a ","position":{"start":{"line":49,"column":147,"offset":1504},"end":{"line":49,"column":182,"offset":1539},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"static","position":{"start":{"line":49,"column":184,"offset":1541},"end":{"line":49,"column":190,"offset":1547},"indent":[]}}],"position":{"start":{"line":49,"column":182,"offset":1539},"end":{"line":49,"column":192,"offset":1549},"indent":[]}},{"type":"text","value":" URL rewrite of the query string. The syntax of such a rule would be the following:","position":{"start":{"line":49,"column":192,"offset":1549},"end":{"line":49,"column":275,"offset":1632},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1358},"end":{"line":49,"column":275,"offset":1632},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"\"action_parameters\": {\n  \"uri\": {\n    \"path\": { \n      \"expression\": \"<URI_PATH_EXPRESSION>\"\n    }, \n    \"query\": {\n      \"value\": \"<QUERY_STRING_VALUE>\"\n    }\n  }\n}","position":{"start":{"line":51,"column":1,"offset":1634},"end":{"line":62,"column":4,"offset":1811},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"API parameter reference\",\"pcx-content-type\":\"reference\",\"order\":1}","position":{"start":{"line":65,"column":1,"offset":1814},"end":{"line":65,"column":105,"offset":1918},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":65,"column":105,"offset":1918}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"API parameter reference\",\n  \"pcx-content-type\": \"reference\",\n  \"order\": 1\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"url-rewrite-api-parameter-reference\"\n  }, \"URL rewrite API parameter reference\"), mdx(\"p\", null, \"Create a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/transform/url-rewrite\"\n  }, \"static or dynamic URL rewrite\"), \" based on the parameter name provided in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"action_parameters\"), \" field:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Define the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \" parameter to specify a static URL rewrite.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Define the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"expression\"), \" parameter to specify the expression that defines the dynamic URL rewrite to perform.\")), mdx(\"h2\", {\n    \"id\": \"static-url-rewrite-parameters\"\n  }, \"Static URL rewrite parameters\"), mdx(\"p\", null, \"The full syntax of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"action_parameters\"), \" field for a static URL Rewrite Rule that rewrites both the URI path and the query string is the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"action_parameters\\\": {\\n  \\\"uri\\\": {\\n    \\\"path\\\": { \\n      \\\"value\\\": \\\"<URI_PATH_VALUE>\\\"\\n    }, \\n    \\\"query\\\": {\\n      \\\"value\\\": \\\"<QUERY_STRING_VALUE>\\\"\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"If you are only rewriting the URI path or the query string, omit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path\"), \" parameter, respectively.\"), mdx(\"h2\", {\n    \"id\": \"dynamic-url-rewrite-parameters\"\n  }, \"Dynamic URL rewrite parameters\"), mdx(\"p\", null, \"The full syntax of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"action_parameters\"), \" field for a dynamic URL Rewrite Rule that rewrites both the URI path and the query string is the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"action_parameters\\\": {\\n  \\\"uri\\\": {\\n    \\\"path\\\": { \\n      \\\"expression\\\": \\\"<URI_PATH_EXPRESSION>\\\"\\n    }, \\n    \\\"query\\\": {\\n      \\\"expression\\\": \\\"<QUERY_STRING_EXPRESSION>\\\"\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"If you are only rewriting the URI path or the query string, omit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path\"), \" parameter, respectively.\"), mdx(\"h2\", {\n    \"id\": \"different-url-rewrite-types-in-the-same-rule\"\n  }, \"Different URL rewrite types in the same rule\"), mdx(\"p\", null, \"The same rule can have different types of URL rewrites for the URI path and the query string. For example, a single rule can perform a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dynamic\"), \" URL rewrite of the URI path and a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"static\"), \" URL rewrite of the query string. The syntax of such a rule would be the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"action_parameters\\\": {\\n  \\\"uri\\\": {\\n    \\\"path\\\": { \\n      \\\"expression\\\": \\\"<URI_PATH_EXPRESSION>\\\"\\n    }, \\n    \\\"query\\\": {\\n      \\\"value\\\": \\\"<QUERY_STRING_VALUE>\\\"\\n    }\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"API parameter reference\",\n  \"pcx-content-type\": \"reference\",\n  \"order\": 1\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"url-rewrite-api-parameter-reference\"\n    }}>{`URL rewrite API parameter reference`}</h1>\n    <p>{`Create a `}<a parentName=\"p\" {...{\n        \"href\": \"/transform/url-rewrite\"\n      }}>{`static or dynamic URL rewrite`}</a>{` based on the parameter name provided in the `}<inlineCode parentName=\"p\">{`action_parameters`}</inlineCode>{` field:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Define the `}<inlineCode parentName=\"li\">{`value`}</inlineCode>{` parameter to specify a static URL rewrite.`}</li>\n      <li parentName=\"ul\">{`Define the `}<inlineCode parentName=\"li\">{`expression`}</inlineCode>{` parameter to specify the expression that defines the dynamic URL rewrite to perform.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"static-url-rewrite-parameters\"\n    }}>{`Static URL rewrite parameters`}</h2>\n    <p>{`The full syntax of the `}<inlineCode parentName=\"p\">{`action_parameters`}</inlineCode>{` field for a static URL Rewrite Rule that rewrites both the URI path and the query string is the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"action_parameters\": {\n  \"uri\": {\n    \"path\": { \n      \"value\": \"<URI_PATH_VALUE>\"\n    }, \n    \"query\": {\n      \"value\": \"<QUERY_STRING_VALUE>\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`If you are only rewriting the URI path or the query string, omit the `}<inlineCode parentName=\"p\">{`query`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`path`}</inlineCode>{` parameter, respectively.`}</p>\n    <h2 {...{\n      \"id\": \"dynamic-url-rewrite-parameters\"\n    }}>{`Dynamic URL rewrite parameters`}</h2>\n    <p>{`The full syntax of the `}<inlineCode parentName=\"p\">{`action_parameters`}</inlineCode>{` field for a dynamic URL Rewrite Rule that rewrites both the URI path and the query string is the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"action_parameters\": {\n  \"uri\": {\n    \"path\": { \n      \"expression\": \"<URI_PATH_EXPRESSION>\"\n    }, \n    \"query\": {\n      \"expression\": \"<QUERY_STRING_EXPRESSION>\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`If you are only rewriting the URI path or the query string, omit the `}<inlineCode parentName=\"p\">{`query`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`path`}</inlineCode>{` parameter, respectively.`}</p>\n    <h2 {...{\n      \"id\": \"different-url-rewrite-types-in-the-same-rule\"\n    }}>{`Different URL rewrite types in the same rule`}</h2>\n    <p>{`The same rule can have different types of URL rewrites for the URI path and the query string. For example, a single rule can perform a `}<strong parentName=\"p\">{`dynamic`}</strong>{` URL rewrite of the URI path and a `}<strong parentName=\"p\">{`static`}</strong>{` URL rewrite of the query string. The syntax of such a rule would be the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"action_parameters\": {\n  \"uri\": {\n    \"path\": { \n      \"expression\": \"<URI_PATH_EXPRESSION>\"\n    }, \n    \"query\": {\n      \"value\": \"<QUERY_STRING_VALUE>\"\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}