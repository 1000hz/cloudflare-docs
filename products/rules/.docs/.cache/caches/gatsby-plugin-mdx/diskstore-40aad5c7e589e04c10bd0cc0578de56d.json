{"expireTime":9007200897961981000,"key":"gatsby-plugin-mdx-entire-payload-6e4bea6db5b3400d298714b25212085a-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import HeaderValidNames from \"../../../_partials/transform/_header-valid-names.md\"\nimport HeaderValidValues from \"../../../_partials/transform/_header-valid-values.md\"","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":3,"column":85,"offset":168},"indent":[1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Format of HTTP request header names and values","position":{"start":{"line":5,"column":3,"offset":172},"end":{"line":5,"column":49,"offset":218},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":170},"end":{"line":5,"column":49,"offset":218},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":7,"column":1,"offset":220},"end":{"line":7,"column":5,"offset":224},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"name","position":{"start":{"line":7,"column":7,"offset":226},"end":{"line":7,"column":11,"offset":230},"indent":[]}}],"position":{"start":{"line":7,"column":5,"offset":224},"end":{"line":7,"column":13,"offset":232},"indent":[]}},{"type":"text","value":" of the HTTP request header you want to set or remove can only contain:","position":{"start":{"line":7,"column":13,"offset":232},"end":{"line":7,"column":84,"offset":303},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":220},"end":{"line":7,"column":84,"offset":303},"indent":[]}},{"type":"jsx","value":"<HeaderValidNames/>","position":{"start":{"line":9,"column":1,"offset":305},"end":{"line":9,"column":20,"offset":324},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":11,"column":1,"offset":326},"end":{"line":11,"column":5,"offset":330},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"value","position":{"start":{"line":11,"column":7,"offset":332},"end":{"line":11,"column":12,"offset":337},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":330},"end":{"line":11,"column":14,"offset":339},"indent":[]}},{"type":"text","value":" of the HTTP request header you want to set can only contain:","position":{"start":{"line":11,"column":14,"offset":339},"end":{"line":11,"column":75,"offset":400},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":326},"end":{"line":11,"column":75,"offset":400},"indent":[]}},{"type":"jsx","value":"<HeaderValidValues/>","position":{"start":{"line":13,"column":1,"offset":402},"end":{"line":13,"column":21,"offset":422},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Format of header names and values\",\"pcx-content-type\":\"reference\",\"order\":1}","position":{"start":{"line":16,"column":1,"offset":425},"end":{"line":16,"column":115,"offset":539},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":16,"column":115,"offset":539}}},"scopeImports":["import HeaderValidNames from \"../../../_partials/transform/_header-valid-names.md\"","import HeaderValidValues from \"../../../_partials/transform/_header-valid-values.md\"","import * as React from 'react'"],"scopeIdentifiers":["HeaderValidNames","HeaderValidValues","React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Format of header names and values\",\n  \"pcx-content-type\": \"reference\",\n  \"order\": 1\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"format-of-http-request-header-names-and-values\"\n  }, \"Format of HTTP request header names and values\"), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \" of the HTTP request header you want to set or remove can only contain:\"), mdx(HeaderValidNames, {\n    mdxType: \"HeaderValidNames\"\n  }), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"value\"), \" of the HTTP request header you want to set can only contain:\"), mdx(HeaderValidValues, {\n    mdxType: \"HeaderValidValues\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport HeaderValidNames from \"../../../_partials/transform/_header-valid-names.md\"\nimport HeaderValidValues from \"../../../_partials/transform/_header-valid-values.md\"\nexport const _frontmatter = {\n  \"title\": \"Format of header names and values\",\n  \"pcx-content-type\": \"reference\",\n  \"order\": 1\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"format-of-http-request-header-names-and-values\"\n    }}>{`Format of HTTP request header names and values`}</h1>\n    <p>{`The `}<strong parentName=\"p\">{`name`}</strong>{` of the HTTP request header you want to set or remove can only contain:`}</p>\n    <HeaderValidNames mdxType=\"HeaderValidNames\" />\n    <p>{`The `}<strong parentName=\"p\">{`value`}</strong>{` of the HTTP request header you want to set can only contain:`}</p>\n    <HeaderValidValues mdxType=\"HeaderValidValues\" />\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}