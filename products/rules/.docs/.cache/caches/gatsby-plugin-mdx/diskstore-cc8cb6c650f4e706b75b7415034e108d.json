{"expireTime":9007200897961981000,"key":"gatsby-plugin-mdx-entire-payload-9e35502b10ea6ccae05587b274047c18-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"URL normalization","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":20,"offset":20},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":20,"offset":20},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Cloudflare provides a URL normalization feature to modify the URLs of incoming requests so that they conform to a consistent formatting standard.","position":{"start":{"line":4,"column":1,"offset":22},"end":{"line":4,"column":146,"offset":167},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":22},"end":{"line":4,"column":146,"offset":167},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When you enable URL normalization, all incoming URLs are normalized before they pass to subsequent Cloudflare edge features that accept a URL input, such as Page Rules, Firewall Rules, Workers, and Access. Rule expressions that filter traffic based on URLs will therefore trigger correctly, regardless of the format of the incoming URL. When URL normalization is disabled, Cloudflare forwards the URL to origin in its original form.","position":{"start":{"line":6,"column":1,"offset":169},"end":{"line":6,"column":433,"offset":601},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":169},"end":{"line":6,"column":433,"offset":601},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":8,"column":1,"offset":603},"end":{"line":8,"column":4,"offset":606},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Availability","position":{"start":{"line":10,"column":4,"offset":611},"end":{"line":10,"column":16,"offset":623},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":608},"end":{"line":10,"column":16,"offset":623},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"URL normalization is available in all Cloudflare plans.","position":{"start":{"line":12,"column":1,"offset":625},"end":{"line":12,"column":56,"offset":680},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":625},"end":{"line":12,"column":56,"offset":680},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Get started","position":{"start":{"line":14,"column":4,"offset":685},"end":{"line":14,"column":15,"offset":696},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":682},"end":{"line":14,"column":15,"offset":696},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Learn more about ","position":{"start":{"line":16,"column":1,"offset":698},"end":{"line":16,"column":18,"offset":715},"indent":[]}},{"type":"link","title":null,"url":"/normalization/how-it-works","children":[{"type":"text","value":"URL normalization","position":{"start":{"line":16,"column":19,"offset":716},"end":{"line":16,"column":36,"offset":733},"indent":[]}}],"position":{"start":{"line":16,"column":18,"offset":715},"end":{"line":16,"column":66,"offset":763},"indent":[]}},{"type":"text","value":" and how to ","position":{"start":{"line":16,"column":66,"offset":763},"end":{"line":16,"column":78,"offset":775},"indent":[]}},{"type":"link","title":null,"url":"/normalization/manage","children":[{"type":"text","value":"configure URL normalization","position":{"start":{"line":16,"column":79,"offset":776},"end":{"line":16,"column":106,"offset":803},"indent":[]}}],"position":{"start":{"line":16,"column":78,"offset":775},"end":{"line":16,"column":130,"offset":827},"indent":[]}},{"type":"text","value":" in the Cloudflare dashboard.","position":{"start":{"line":16,"column":130,"offset":827},"end":{"line":16,"column":159,"offset":856},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":698},"end":{"line":16,"column":159,"offset":856},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"pcx-content-type\":\"concept\",\"order\":3}","position":{"start":{"line":19,"column":1,"offset":859},"end":{"line":19,"column":69,"offset":927},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":19,"column":69,"offset":927}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"pcx-content-type\": \"concept\",\n  \"order\": 3\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"url-normalization\"\n  }, \"URL normalization\"), mdx(\"p\", null, \"Cloudflare provides a URL normalization feature to modify the URLs of incoming requests so that they conform to a consistent formatting standard.\"), mdx(\"p\", null, \"When you enable URL normalization, all incoming URLs are normalized before they pass to subsequent Cloudflare edge features that accept a URL input, such as Page Rules, Firewall Rules, Workers, and Access. Rule expressions that filter traffic based on URLs will therefore trigger correctly, regardless of the format of the incoming URL. When URL normalization is disabled, Cloudflare forwards the URL to origin in its original form.\"), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"availability\"\n  }, \"Availability\"), mdx(\"p\", null, \"URL normalization is available in all Cloudflare plans.\"), mdx(\"h2\", {\n    \"id\": \"get-started\"\n  }, \"Get started\"), mdx(\"p\", null, \"Learn more about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/normalization/how-it-works\"\n  }, \"URL normalization\"), \" and how to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/normalization/manage\"\n  }, \"configure URL normalization\"), \" in the Cloudflare dashboard.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"pcx-content-type\": \"concept\",\n  \"order\": 3\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"url-normalization\"\n    }}>{`URL normalization`}</h1>\n    <p>{`Cloudflare provides a URL normalization feature to modify the URLs of incoming requests so that they conform to a consistent formatting standard.`}</p>\n    <p>{`When you enable URL normalization, all incoming URLs are normalized before they pass to subsequent Cloudflare edge features that accept a URL input, such as Page Rules, Firewall Rules, Workers, and Access. Rule expressions that filter traffic based on URLs will therefore trigger correctly, regardless of the format of the incoming URL. When URL normalization is disabled, Cloudflare forwards the URL to origin in its original form.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"availability\"\n    }}>{`Availability`}</h2>\n    <p>{`URL normalization is available in all Cloudflare plans.`}</p>\n    <h2 {...{\n      \"id\": \"get-started\"\n    }}>{`Get started`}</h2>\n    <p>{`Learn more about `}<a parentName=\"p\" {...{\n        \"href\": \"/normalization/how-it-works\"\n      }}>{`URL normalization`}</a>{` and how to `}<a parentName=\"p\" {...{\n        \"href\": \"/normalization/manage\"\n      }}>{`configure URL normalization`}</a>{` in the Cloudflare dashboard.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}