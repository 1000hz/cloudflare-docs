{"componentChunkName":"component---src-components-mdx-custom-renderer-js","path":"/graphql-api/tutorials/build-your-own-analytics","result":{"data":{"mdx":{"id":"68f3ca46-92ae-5da1-bc34-2f587238da72","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 40,\n  \"pcx-content-type\": \"interim\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Aside = makeShortcode(\"Aside\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"build-your-own-analytics-dashboard\"\n  }, \"Build your own Analytics dashboard\"), mdx(\"p\", null, \"In this example, we're going to see how to use the GraphQL Analytics API to build your own dashboard. This tutorial walks you through building a simple line chart for your Cloudflare zone using a bit of HTML, JavaScript, AJAX, and chart.js.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/0159390743b3914b809f676d1a451876/graphQL-recipe-cacheVisual.gif\",\n    \"alt\": \"GraphQL recipe\"\n  })), mdx(\"p\", null, \"The following code will build a page with all the requirements to fetch from GraphQL and plot the cached and uncached bandwidth for the given zone. You'll just need to enter your email address, API token, and your zone ID, and then push the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fetch analytics\"), \" button.\"), mdx(\"h2\", {\n    \"id\": \"code\"\n  }, \"Code\"), mdx(Aside, {\n    type: \"note\",\n    header: \"Note\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", null, \"Cloudflare's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://api.cloudflare.com/client/v4/graphql\"\n  }, \"GraphQL endpoint\"), \" does not set any CORS headers. Add an endpoint that can proxy the requests back to the API to avoid encountering CORS errors. In the following example, this hostname is referred to as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"api.yourdomain.com\"), \".\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n    <title>Line Chart</title>\\n    <script src=\\\"../../../../dist/Chart.min.js\\\"></script>\\n    <script src=\\\"https://www.chartjs.org/samples/latest/utils.js\\\"></script>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\\\"></script>\\n    <link rel=\\\"stylesheet\\\" href=\\\"/dist/main.css\\\">\\n</head>\\n\\n<body>\\n    <br />\\n\\n\\n    <div>\\n        <h3><span>Visualise your traffic from GraphQL!</span></h3>\\n        <br />\\n        <div>\\n            <form><label for=\\\"site\\\" class=\\\"\\\"><span>Enter your API details:</span></label>\\n                    <input placeholder= \\\"Email\\\" id=\\\"email\\\"></textarea>\\n                    <input placeholder= \\\"API Token\\\" id= \\\"apiKey\\\" ></textarea></form>\\n        </div>\\n        <label for=\\\"site\\\" class=\\\"\\\"><span>Choose the zone tag you want to fetch for:</span></label>\\n        <div><input placeholder= \\\"Zone Tag\\\" id=\\\"zoneTag\\\"></textarea></div>\\n        <button id=\\\"fetch\\\" type=\\\"button\\\" data-testid=\\\"add-site-button\\\">\\n\\n            <p><span>Fetch analytics</span></p>\\n        </button>\\n    </div>\\n\\n\\n\\n    <div style=\\\"width:50%;\\\">\\n        <div id = \\\"error\\\"></div>\\n        <canvas id=\\\"canvas\\\" style=\\\"width:100%;\\\"></canvas>\\n    </div>\\n    <div style=\\\"width:50%;\\\">\\n        <div id = \\\"error\\\"></div>\\n        <canvas id=\\\"canvas2\\\" style=\\\"width:100%;\\\"></canvas>\\n    </div>\\n    <br />\\n    <br />\\n\\n    <script>\\n        var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\\n\\n        function chartInit(date, total, cached){\\n            var config = {\\n            type: 'line',\\n            data: {\\n                labels: date,\\n                datasets: [{\\n                    label: 'total traffic',\\n                    backgroundColor: window.chartColors.red,\\n                    borderColor: window.chartColors.red,\\n                    data: total,\\n                    fill: false,\\n                }, {\\n                    label: 'Cached traffic',\\n                    fill: false,\\n                    backgroundColor: window.chartColors.blue,\\n                    borderColor: window.chartColors.blue,\\n                    data: cached\\n                }]\\n            },\\n            options: {\\n                responsive: true,\\n                title: {\\n                    display: true,\\n                    text: 'Cached vs Uncached traffic'\\n                },\\n                tooltips: {\\n                    mode: 'index',\\n                    intersect: false,\\n                },\\n                hover: {\\n                    mode: 'nearest',\\n                    intersect: true\\n                },\\n                scales: {\\n                    xAxes: [{\\n                        display: true,\\n                        scaleLabel: {\\n                            display: true,\\n                            labelString: 'Month'\\n                        }\\n                    }],\\n                    yAxes: [{\\n                        display: true,\\n                        scaleLabel: {\\n                            display: true,\\n                            labelString: 'Value'\\n                        }\\n                    }]\\n                }\\n            }\\n        };\\n        return config\\n        }\\n\\n        window.onload = function() {\\n\\n        };\\n\\n        function fetchAPI(url, email, apiKey, zoneTag) {\\n            let request = new Request(url)\\n            let query = {\\\"query\\\":\\\"{\\\\n  viewer {\\\\n    zones(filter: { zoneTag: \\\" + zoneTag + \\\" }) {\\\\n      httpRequests1dGroups(\\\\n        orderBy: [date_ASC]\\\\n        limit: 1000\\\\n        filter: { date_gt: \\\\\\\"2019-07-15\\\\\\\" }\\\\n      ) {\\\\n        date: dimensions {\\\\n          date\\\\n        }\\\\n        sum {\\\\n          cachedBytes\\\\n          bytes\\\\n        }\\\\n      }\\\\n    }\\\\n  }\\\\n}\\\",\\\"variables\\\":{}}\\n\\n            let init = {\\n                method: 'POST',\\n                body: JSON.stringify(query)\\n            }\\n            request.headers.set('x-auth-key', apiKey)\\n            request.headers.set('x-auth-email', email)\\n\\n            return fetch(request, init)\\n        }\\n\\n        document.getElementById('fetch').addEventListener('click', async function() {\\n            var email = document.getElementById('email').value\\n            var apiKey = document.getElementById('apiKey').value\\n            var zoneTag = document.getElementById('zoneTag').value\\n            var ctx = document.getElementById('canvas').getContext('2d');\\n            var beforeGraph = document.getElementById('canvas')\\n\\n            if (email && apiKey) {\\n                document.getElementById('error').innerHTML = \\\"\\\"\\n\\n                let response = await fetchAPI('https://api.cloudflare.com/client/v4/graphql', email, apiKey, zoneTag)\\n                let json = await response.json()\\n\\n                if (response.status == 200) {\\n                    var date = []\\n                    var total = []\\n                    var cached = []\\n                    var array = json.data.viewer.zones[0].httpRequests1dGroups\\n\\n                    for (let i =0 ; i < array.length; i++) {\\n                        date.push(array[i].date.date)\\n                        total.push(array[i].sum.bytes)\\n                        cached.push(array[i].sum.cachedBytes)\\n                    }\\n\\n                    window.myLine = new Chart(ctx, chartInit(date, total, cached));\\n                }\\n                else {\\n                    document.getElementById('error').innerHTML = 'error: \\\\n'+ json\\n                    document.getElementById('error').style.color = \\\"Red\\\"\\n                    ctx.clearRect(0, 0, canvas.width, canvas.height);\\n                }\\n\\n            }\\n            else {\\n                document.getElementById('error').innerHTML = \\\"Please fill the form with your key and email\\\"\\n                document.getElementById('error').style.color = \\\"Red\\\"\\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\\n            }\\n        });\\n\\n        var colorNames = Object.keys(window.chartColors);\\n    </script>\\n</body>\\n</html>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"demo":null,"difficulty":null,"summary":null,"tags":null,"title":"","type":null,"updated":null}}},"pageContext":{"id":"68f3ca46-92ae-5da1-bc34-2f587238da72","fields":{"slug":"/graphql-api/tutorials/build-your-own-analytics"},"frontmatter":{"title":"","type":null,"order":40,"hidden":null,"hideChildren":null,"breadcrumbs":null},"headings":[{"value":"Build your own Analytics dashboard","depth":1}],"tableOfContents":{"items":[{"url":"#build-your-own-analytics-dashboard","title":"Build your own Analytics dashboard","items":[{"url":"#code","title":"Code"}]}]},"parent":{"modifiedTime":"2021-10-26","relativePath":"graphql-api/tutorials/build-your-own-analytics/index.md"}}},"staticQueryHashes":["1052658729","2814688963","32046230","338033027","811020565"]}