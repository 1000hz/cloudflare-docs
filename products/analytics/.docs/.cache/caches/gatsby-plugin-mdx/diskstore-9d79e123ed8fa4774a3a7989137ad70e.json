{"expireTime":9007200889996143000,"key":"gatsby-plugin-mdx-entire-payload-9138d571570339c4515e5ba66d87b978-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Querying Magic Firewall Samples with GraphQL","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":47,"offset":47},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":47,"offset":47},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this example, we're going to use the GraphQL Analytics API to query for Magic Firewall Samples over a specified time period.","position":{"start":{"line":4,"column":1,"offset":49},"end":{"line":4,"column":128,"offset":176},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":49},"end":{"line":4,"column":128,"offset":176},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following API call will request Magic Firewall Samples over a one hour period, and output the requested fields. Be sure to replace CLOUDFLARE_ACCOUNT_ID, CLOUDFLARE_EMAIL, and CLOUDFLARE_API_KEY with your zone tag and API credentials, and adjust the datetime_geg and datetime_leq values to your liking.","position":{"start":{"line":6,"column":1,"offset":178},"end":{"line":6,"column":307,"offset":484},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":178},"end":{"line":6,"column":307,"offset":484},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"API Call","position":{"start":{"line":8,"column":4,"offset":489},"end":{"line":8,"column":12,"offset":497},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":486},"end":{"line":8,"column":12,"offset":497},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"PAYLOAD='{ \"query\":\n  \"query MFWActivity {\n      viewer {\n        accounts(filter: { accountTag: $accountTag }) {\n          magicFirewallSamplesAdaptiveGroups(\n            filter: $filter\n            limit: 10\n            orderBy: [datetimeFiveMinute_DESC]\n          ) {\n            sum {\n              bits\n              packets\n            }\n            dimensions {\n              datetimeFiveMinute\n              ruleId\n            }\n          }\n        }\n      }\n    }\",\n    \"variables\": {\n      \"accountTag\": \"$CLOUDFLARE_ACCOUNT_ID\",\n      \"filter\": {\n        \"datetime_geq\": \"2021-04-24T11:00:00Z\",\n        \"datetime_leq\": \"2021-04-24T12:00:00Z\"\n      }\n    }\n  }'\n\ncurl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Auth-Email: CLOUDFLARE_EMAIL\" \\\n  -H \"X-Auth-key: CLOUDFLARE_API_KEY\" \\\n  --data \"$(echo $PAYLOAD)\" \\\n  https://api.cloudflare.com/client/v4/graphql/","position":{"start":{"line":10,"column":1,"offset":499},"end":{"line":48,"column":4,"offset":1396},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The returned values represent the total number of packets and bits received during the five minute interval for a particular rule. The result will be in JSON (as requested), so piping the output to ","position":{"start":{"line":50,"column":1,"offset":1398},"end":{"line":50,"column":199,"offset":1596},"indent":[]}},{"type":"inlineCode","value":"jq","position":{"start":{"line":50,"column":199,"offset":1596},"end":{"line":50,"column":203,"offset":1600},"indent":[]}},{"type":"text","value":" will make it easier to read, e.g.,:","position":{"start":{"line":50,"column":203,"offset":1600},"end":{"line":50,"column":239,"offset":1636},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1398},"end":{"line":50,"column":239,"offset":1636},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"curl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Auth-Email: CLOUDFLARE_EMAIL\" \\\n  -H \"X-Auth-key: CLOUDFLARE_API_KEY\" \\\n  --data \"$(echo $PAYLOAD)\" \\\n  https://api.cloudflare.com/client/v4/graphql/ | jq .\n{\n  \"data\": {\n    \"viewer\": {\n      \"accounts\": [\n        {\n          \"magicFirewallSamplesAdaptiveGroups\": [\n            {\n              sum: { bits:  327680, packets: 16384 },\n              dimensions: {\n                datetimeFiveMinute: '2021-05-12T22:00-00:00',\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\n              }\n            },\n            {\n              sum: { bits:  360448, packets: 8192 },\n              dimensions: {\n                datetimeFiveMinute: '2021-05-12T22:05-00:00',\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\n              }\n            },\n            {\n              sum: { bits:  327680, packets: 8192 },\n              dimensions: {\n                datetimeFiveMinute: '2021-05-12T22:05-00:00',\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\n              }\n            },\n            {\n              sum: { bits:  360448, packets: 8192 },\n              dimensions: {\n                datetimeFiveMinute: '2021-05-12T22:20-00:00',\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\n              }\n            },\n            {\n              sum: { bits:  327680, packets: 8192 },\n              dimensions: {\n                datetimeFiveMinute: '2021-05-12T22:20-00:00',\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\n              }\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"errors\": null\n}","position":{"start":{"line":51,"column":1,"offset":1637},"end":{"line":107,"column":4,"offset":3273},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"pcx-content-type\":\"interim\"}","position":{"start":{"line":110,"column":1,"offset":3276},"end":{"line":110,"column":59,"offset":3334},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":110,"column":59,"offset":3334}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"pcx-content-type\": \"interim\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"querying-magic-firewall-samples-with-graphql\"\n  }, \"Querying Magic Firewall Samples with GraphQL\"), mdx(\"p\", null, \"In this example, we're going to use the GraphQL Analytics API to query for Magic Firewall Samples over a specified time period.\"), mdx(\"p\", null, \"The following API call will request Magic Firewall Samples over a one hour period, and output the requested fields. Be sure to replace CLOUDFLARE_ACCOUNT_ID, CLOUDFLARE_EMAIL, and CLOUDFLARE_API_KEY with your zone tag and API credentials, and adjust the datetime_geg and datetime_leq values to your liking.\"), mdx(\"h2\", {\n    \"id\": \"api-call\"\n  }, \"API Call\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"PAYLOAD='{ \\\"query\\\":\\n  \\\"query MFWActivity {\\n      viewer {\\n        accounts(filter: { accountTag: $accountTag }) {\\n          magicFirewallSamplesAdaptiveGroups(\\n            filter: $filter\\n            limit: 10\\n            orderBy: [datetimeFiveMinute_DESC]\\n          ) {\\n            sum {\\n              bits\\n              packets\\n            }\\n            dimensions {\\n              datetimeFiveMinute\\n              ruleId\\n            }\\n          }\\n        }\\n      }\\n    }\\\",\\n    \\\"variables\\\": {\\n      \\\"accountTag\\\": \\\"$CLOUDFLARE_ACCOUNT_ID\\\",\\n      \\\"filter\\\": {\\n        \\\"datetime_geq\\\": \\\"2021-04-24T11:00:00Z\\\",\\n        \\\"datetime_leq\\\": \\\"2021-04-24T12:00:00Z\\\"\\n      }\\n    }\\n  }'\\n\\ncurl \\\\\\n  -X POST \\\\\\n  -H \\\"Content-Type: application/json\\\" \\\\\\n  -H \\\"X-Auth-Email: CLOUDFLARE_EMAIL\\\" \\\\\\n  -H \\\"X-Auth-key: CLOUDFLARE_API_KEY\\\" \\\\\\n  --data \\\"$(echo $PAYLOAD)\\\" \\\\\\n  https://api.cloudflare.com/client/v4/graphql/\\n\")), mdx(\"p\", null, \"The returned values represent the total number of packets and bits received during the five minute interval for a particular rule. The result will be in JSON (as requested), so piping the output to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jq\"), \" will make it easier to read, e.g.,:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"curl \\\\\\n  -X POST \\\\\\n  -H \\\"Content-Type: application/json\\\" \\\\\\n  -H \\\"X-Auth-Email: CLOUDFLARE_EMAIL\\\" \\\\\\n  -H \\\"X-Auth-key: CLOUDFLARE_API_KEY\\\" \\\\\\n  --data \\\"$(echo $PAYLOAD)\\\" \\\\\\n  https://api.cloudflare.com/client/v4/graphql/ | jq .\\n{\\n  \\\"data\\\": {\\n    \\\"viewer\\\": {\\n      \\\"accounts\\\": [\\n        {\\n          \\\"magicFirewallSamplesAdaptiveGroups\\\": [\\n            {\\n              sum: { bits:  327680, packets: 16384 },\\n              dimensions: {\\n                datetimeFiveMinute: '2021-05-12T22:00-00:00',\\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\\n              }\\n            },\\n            {\\n              sum: { bits:  360448, packets: 8192 },\\n              dimensions: {\\n                datetimeFiveMinute: '2021-05-12T22:05-00:00',\\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\\n              }\\n            },\\n            {\\n              sum: { bits:  327680, packets: 8192 },\\n              dimensions: {\\n                datetimeFiveMinute: '2021-05-12T22:05-00:00',\\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\\n              }\\n            },\\n            {\\n              sum: { bits:  360448, packets: 8192 },\\n              dimensions: {\\n                datetimeFiveMinute: '2021-05-12T22:20-00:00',\\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\\n              }\\n            },\\n            {\\n              sum: { bits:  327680, packets: 8192 },\\n              dimensions: {\\n                datetimeFiveMinute: '2021-05-12T22:20-00:00',\\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\\n              }\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  },\\n  \\\"errors\\\": null\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"pcx-content-type\": \"interim\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"querying-magic-firewall-samples-with-graphql\"\n    }}>{`Querying Magic Firewall Samples with GraphQL`}</h1>\n    <p>{`In this example, we're going to use the GraphQL Analytics API to query for Magic Firewall Samples over a specified time period.`}</p>\n    <p>{`The following API call will request Magic Firewall Samples over a one hour period, and output the requested fields. Be sure to replace CLOUDFLARE_ACCOUNT_ID, CLOUDFLARE_EMAIL, and CLOUDFLARE_API_KEY with your zone tag and API credentials, and adjust the datetime_geg and datetime_leq values to your liking.`}</p>\n    <h2 {...{\n      \"id\": \"api-call\"\n    }}>{`API Call`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`PAYLOAD='{ \"query\":\n  \"query MFWActivity {\n      viewer {\n        accounts(filter: { accountTag: $accountTag }) {\n          magicFirewallSamplesAdaptiveGroups(\n            filter: $filter\n            limit: 10\n            orderBy: [datetimeFiveMinute_DESC]\n          ) {\n            sum {\n              bits\n              packets\n            }\n            dimensions {\n              datetimeFiveMinute\n              ruleId\n            }\n          }\n        }\n      }\n    }\",\n    \"variables\": {\n      \"accountTag\": \"$CLOUDFLARE_ACCOUNT_ID\",\n      \"filter\": {\n        \"datetime_geq\": \"2021-04-24T11:00:00Z\",\n        \"datetime_leq\": \"2021-04-24T12:00:00Z\"\n      }\n    }\n  }'\n\ncurl \\\\\n  -X POST \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -H \"X-Auth-Email: CLOUDFLARE_EMAIL\" \\\\\n  -H \"X-Auth-key: CLOUDFLARE_API_KEY\" \\\\\n  --data \"$(echo $PAYLOAD)\" \\\\\n  https://api.cloudflare.com/client/v4/graphql/\n`}</code></pre>\n    <p>{`The returned values represent the total number of packets and bits received during the five minute interval for a particular rule. The result will be in JSON (as requested), so piping the output to `}<inlineCode parentName=\"p\">{`jq`}</inlineCode>{` will make it easier to read, e.g.,:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`curl \\\\\n  -X POST \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -H \"X-Auth-Email: CLOUDFLARE_EMAIL\" \\\\\n  -H \"X-Auth-key: CLOUDFLARE_API_KEY\" \\\\\n  --data \"$(echo $PAYLOAD)\" \\\\\n  https://api.cloudflare.com/client/v4/graphql/ | jq .\n{\n  \"data\": {\n    \"viewer\": {\n      \"accounts\": [\n        {\n          \"magicFirewallSamplesAdaptiveGroups\": [\n            {\n              sum: { bits:  327680, packets: 16384 },\n              dimensions: {\n                datetimeFiveMinute: '2021-05-12T22:00-00:00',\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\n              }\n            },\n            {\n              sum: { bits:  360448, packets: 8192 },\n              dimensions: {\n                datetimeFiveMinute: '2021-05-12T22:05-00:00',\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\n              }\n            },\n            {\n              sum: { bits:  327680, packets: 8192 },\n              dimensions: {\n                datetimeFiveMinute: '2021-05-12T22:05-00:00',\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\n              }\n            },\n            {\n              sum: { bits:  360448, packets: 8192 },\n              dimensions: {\n                datetimeFiveMinute: '2021-05-12T22:20-00:00',\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\n              }\n            },\n            {\n              sum: { bits:  327680, packets: 8192 },\n              dimensions: {\n                datetimeFiveMinute: '2021-05-12T22:20-00:00',\n                ruleId: 'bdfa8f8f0ae142b4a70ef15f6160e532'\n              }\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"errors\": null\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}