{"expireTime":9007200889996143000,"key":"gatsby-plugin-mdx-entire-payload-48a05c14535ad980ee0306d24d9066bf-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"GraphQL Analytics API","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":24,"offset":24},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":24,"offset":24},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The GraphQL Analytics API provides data regarding HTTP requests passing through Cloudflareâ€™s network, as well as data from specific products, such as Firewall or Load Balancing. Network Analytics users also have access to packet-level data. Use the GraphQL Analytics API to select specific data sets and metrics of interest, filter and aggregate the data along various dimensions, and integrate the results with other applications.","position":{"start":{"line":4,"column":1,"offset":26},"end":{"line":4,"column":432,"offset":457},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":26},"end":{"line":4,"column":432,"offset":457},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The basis of the API is the ","position":{"start":{"line":6,"column":1,"offset":459},"end":{"line":6,"column":29,"offset":487},"indent":[]}},{"type":"link","title":null,"url":"https://graphql.org/","children":[{"type":"text","value":"GraphQL framework","position":{"start":{"line":6,"column":30,"offset":488},"end":{"line":6,"column":47,"offset":505},"indent":[]}}],"position":{"start":{"line":6,"column":29,"offset":487},"end":{"line":6,"column":70,"offset":528},"indent":[]}},{"type":"text","value":", created and open-sourced by Facebook. There is an active developer community for GraphQL and powerful clients for running queries, which makes it easy to get started. GraphQL is especially useful for building visualizations and powers the analytics in Cloudflare's Dashboard.","position":{"start":{"line":6,"column":70,"offset":528},"end":{"line":6,"column":347,"offset":805},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":459},"end":{"line":6,"column":347,"offset":805},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"GraphQL models a business domain as a graph using a schema. In the schema, there are logical definitions for different types of nodes and their connections (edges). These nodes are the data sets you use for your analytics. You write queries in GraphQL much like in SQL: you specify the data set (table), the metrics to retrieve (such as requests and bytes), and filter or group by dimensions (for example, a time period).","position":{"start":{"line":8,"column":1,"offset":807},"end":{"line":8,"column":422,"offset":1228},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":807},"end":{"line":8,"column":422,"offset":1228},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"GraphQL differs from a traditional API: it has one single endpoint:","position":{"start":{"line":10,"column":1,"offset":1230},"end":{"line":10,"column":68,"offset":1297},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1230},"end":{"line":10,"column":68,"offset":1297},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"https://api.cloudflare.com/client/v4/graphql","position":{"start":{"line":12,"column":1,"offset":1299},"end":{"line":14,"column":4,"offset":1351},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You pass the query parameters as a JSON object in the payload of a ","position":{"start":{"line":16,"column":1,"offset":1353},"end":{"line":16,"column":68,"offset":1420},"indent":[]}},{"type":"inlineCode","value":"POST","position":{"start":{"line":16,"column":68,"offset":1420},"end":{"line":16,"column":74,"offset":1426},"indent":[]}},{"type":"text","value":" request to this endpoint.","position":{"start":{"line":16,"column":74,"offset":1426},"end":{"line":16,"column":100,"offset":1452},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1353},"end":{"line":16,"column":100,"offset":1452},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can use ","position":{"start":{"line":18,"column":1,"offset":1454},"end":{"line":18,"column":13,"offset":1466},"indent":[]}},{"type":"inlineCode","value":"curl","position":{"start":{"line":18,"column":13,"offset":1466},"end":{"line":18,"column":19,"offset":1472},"indent":[]}},{"type":"text","value":" to make requests to the GraphQL Analytics API. Alternatively, you can use a GraphQL client to construct queries and pass requests to the GraphQL Analytics API.","position":{"start":{"line":18,"column":19,"offset":1472},"end":{"line":18,"column":179,"offset":1632},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1454},"end":{"line":18,"column":179,"offset":1632},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Clients","position":{"start":{"line":20,"column":4,"offset":1637},"end":{"line":20,"column":11,"offset":1644},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1634},"end":{"line":20,"column":11,"offset":1644},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We are using ","position":{"start":{"line":22,"column":1,"offset":1646},"end":{"line":22,"column":14,"offset":1659},"indent":[]}},{"type":"link","title":null,"url":"https://electronjs.org/apps/graphiql","children":[{"type":"emphasis","children":[{"type":"text","value":"GraphiQL","position":{"start":{"line":22,"column":16,"offset":1661},"end":{"line":22,"column":24,"offset":1669},"indent":[]}}],"position":{"start":{"line":22,"column":15,"offset":1660},"end":{"line":22,"column":25,"offset":1670},"indent":[]}}],"position":{"start":{"line":22,"column":14,"offset":1659},"end":{"line":22,"column":64,"offset":1709},"indent":[]}},{"type":"text","value":" for our example GraphQL queries. There are many other popular open-source clients that you can find online, such as ","position":{"start":{"line":22,"column":64,"offset":1709},"end":{"line":22,"column":181,"offset":1826},"indent":[]}},{"type":"link","title":null,"url":"https://altair.sirmuel.design","children":[{"type":"emphasis","children":[{"type":"text","value":"Altair","position":{"start":{"line":22,"column":183,"offset":1828},"end":{"line":22,"column":189,"offset":1834},"indent":[]}}],"position":{"start":{"line":22,"column":182,"offset":1827},"end":{"line":22,"column":190,"offset":1835},"indent":[]}}],"position":{"start":{"line":22,"column":181,"offset":1826},"end":{"line":22,"column":222,"offset":1867},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":22,"column":222,"offset":1867},"end":{"line":22,"column":227,"offset":1872},"indent":[]}},{"type":"link","title":null,"url":"https://insomnia.rest","children":[{"type":"emphasis","children":[{"type":"text","value":"Insomnia","position":{"start":{"line":22,"column":229,"offset":1874},"end":{"line":22,"column":237,"offset":1882},"indent":[]}}],"position":{"start":{"line":22,"column":228,"offset":1873},"end":{"line":22,"column":238,"offset":1883},"indent":[]}}],"position":{"start":{"line":22,"column":227,"offset":1872},"end":{"line":22,"column":262,"offset":1907},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":22,"column":262,"offset":1907},"end":{"line":22,"column":263,"offset":1908},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1646},"end":{"line":22,"column":263,"offset":1908},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"order\":2,\"pcx-content-type\":\"interim\"}","position":{"start":{"line":25,"column":1,"offset":1911},"end":{"line":25,"column":69,"offset":1979},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":25,"column":69,"offset":1979}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 2,\n  \"pcx-content-type\": \"interim\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"graphql-analytics-api\"\n  }, \"GraphQL Analytics API\"), mdx(\"p\", null, \"The GraphQL Analytics API provides data regarding HTTP requests passing through Cloudflare\\u2019s network, as well as data from specific products, such as Firewall or Load Balancing. Network Analytics users also have access to packet-level data. Use the GraphQL Analytics API to select specific data sets and metrics of interest, filter and aggregate the data along various dimensions, and integrate the results with other applications.\"), mdx(\"p\", null, \"The basis of the API is the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://graphql.org/\"\n  }, \"GraphQL framework\"), \", created and open-sourced by Facebook. There is an active developer community for GraphQL and powerful clients for running queries, which makes it easy to get started. GraphQL is especially useful for building visualizations and powers the analytics in Cloudflare's Dashboard.\"), mdx(\"p\", null, \"GraphQL models a business domain as a graph using a schema. In the schema, there are logical definitions for different types of nodes and their connections (edges). These nodes are the data sets you use for your analytics. You write queries in GraphQL much like in SQL: you specify the data set (table), the metrics to retrieve (such as requests and bytes), and filter or group by dimensions (for example, a time period).\"), mdx(\"p\", null, \"GraphQL differs from a traditional API: it has one single endpoint:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"https://api.cloudflare.com/client/v4/graphql\\n\")), mdx(\"p\", null, \"You pass the query parameters as a JSON object in the payload of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" request to this endpoint.\"), mdx(\"p\", null, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"curl\"), \" to make requests to the GraphQL Analytics API. Alternatively, you can use a GraphQL client to construct queries and pass requests to the GraphQL Analytics API.\"), mdx(\"h2\", {\n    \"id\": \"clients\"\n  }, \"Clients\"), mdx(\"p\", null, \"We are using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://electronjs.org/apps/graphiql\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"GraphiQL\")), \" for our example GraphQL queries. There are many other popular open-source clients that you can find online, such as \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://altair.sirmuel.design\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Altair\")), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://insomnia.rest\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Insomnia\")), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"order\": 2,\n  \"pcx-content-type\": \"interim\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"graphql-analytics-api\"\n    }}>{`GraphQL Analytics API`}</h1>\n    <p>{`The GraphQL Analytics API provides data regarding HTTP requests passing through Cloudflareâ€™s network, as well as data from specific products, such as Firewall or Load Balancing. Network Analytics users also have access to packet-level data. Use the GraphQL Analytics API to select specific data sets and metrics of interest, filter and aggregate the data along various dimensions, and integrate the results with other applications.`}</p>\n    <p>{`The basis of the API is the `}<a parentName=\"p\" {...{\n        \"href\": \"https://graphql.org/\"\n      }}>{`GraphQL framework`}</a>{`, created and open-sourced by Facebook. There is an active developer community for GraphQL and powerful clients for running queries, which makes it easy to get started. GraphQL is especially useful for building visualizations and powers the analytics in Cloudflare's Dashboard.`}</p>\n    <p>{`GraphQL models a business domain as a graph using a schema. In the schema, there are logical definitions for different types of nodes and their connections (edges). These nodes are the data sets you use for your analytics. You write queries in GraphQL much like in SQL: you specify the data set (table), the metrics to retrieve (such as requests and bytes), and filter or group by dimensions (for example, a time period).`}</p>\n    <p>{`GraphQL differs from a traditional API: it has one single endpoint:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`https://api.cloudflare.com/client/v4/graphql\n`}</code></pre>\n    <p>{`You pass the query parameters as a JSON object in the payload of a `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{` request to this endpoint.`}</p>\n    <p>{`You can use `}<inlineCode parentName=\"p\">{`curl`}</inlineCode>{` to make requests to the GraphQL Analytics API. Alternatively, you can use a GraphQL client to construct queries and pass requests to the GraphQL Analytics API.`}</p>\n    <h2 {...{\n      \"id\": \"clients\"\n    }}>{`Clients`}</h2>\n    <p>{`We are using `}<a parentName=\"p\" {...{\n        \"href\": \"https://electronjs.org/apps/graphiql\"\n      }}><em parentName=\"a\">{`GraphiQL`}</em></a>{` for our example GraphQL queries. There are many other popular open-source clients that you can find online, such as `}<a parentName=\"p\" {...{\n        \"href\": \"https://altair.sirmuel.design\"\n      }}><em parentName=\"a\">{`Altair`}</em></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://insomnia.rest\"\n      }}><em parentName=\"a\">{`Insomnia`}</em></a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}