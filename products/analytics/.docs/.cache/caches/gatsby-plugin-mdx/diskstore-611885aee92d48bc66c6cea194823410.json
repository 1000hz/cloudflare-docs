{"expireTime":9007200889996143000,"key":"gatsby-plugin-mdx-entire-payload-a536d89d0addbb3e46716383129a225e-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Querying Magic Transit Tunnel Health Check Results with GraphQL","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":66,"offset":66},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":66,"offset":66},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this example, you are going to use the GraphQL Analytics API to query Magic Transit Health check results which are aggregated from individual health checks carried out by Cloudflare servers to GRE tunnels you have set up to work with Magic Transit during the ","position":{"start":{"line":4,"column":1,"offset":68},"end":{"line":4,"column":263,"offset":330},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/magic-transit/get-started","children":[{"type":"text","value":"onboarding process","position":{"start":{"line":4,"column":264,"offset":331},"end":{"line":4,"column":282,"offset":349},"indent":[]}}],"position":{"start":{"line":4,"column":263,"offset":330},"end":{"line":4,"column":344,"offset":411},"indent":[]}},{"type":"text","value":". You can query up to one week of data for dates up to three months ago.","position":{"start":{"line":4,"column":344,"offset":411},"end":{"line":4,"column":416,"offset":483},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":68},"end":{"line":4,"column":416,"offset":483},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following API call will request a particular account's tunnel health checks over a one day period for a particular Cloudflare colo, and outputs the requested fields. Be sure to replace ","position":{"start":{"line":6,"column":1,"offset":485},"end":{"line":6,"column":190,"offset":674},"indent":[]}},{"type":"inlineCode","value":"CLOUDFLARE_EMAIL","position":{"start":{"line":6,"column":190,"offset":674},"end":{"line":6,"column":208,"offset":692},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":6,"column":208,"offset":692},"end":{"line":6,"column":213,"offset":697},"indent":[]}},{"type":"inlineCode","value":"CLOUDFLARE_API_KEY","position":{"start":{"line":6,"column":213,"offset":697},"end":{"line":6,"column":233,"offset":717},"indent":[]}},{"type":"text","value":" with your email and API credentials, and adjust the ","position":{"start":{"line":6,"column":233,"offset":717},"end":{"line":6,"column":286,"offset":770},"indent":[]}},{"type":"inlineCode","value":"datetimeStart","position":{"start":{"line":6,"column":286,"offset":770},"end":{"line":6,"column":301,"offset":785},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":6,"column":301,"offset":785},"end":{"line":6,"column":303,"offset":787},"indent":[]}},{"type":"inlineCode","value":"datetimeEnd","position":{"start":{"line":6,"column":303,"offset":787},"end":{"line":6,"column":316,"offset":800},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":6,"column":316,"offset":800},"end":{"line":6,"column":321,"offset":805},"indent":[]}},{"type":"inlineCode","value":"accountTag","position":{"start":{"line":6,"column":321,"offset":805},"end":{"line":6,"column":333,"offset":817},"indent":[]}},{"type":"text","value":" variables as needed.","position":{"start":{"line":6,"column":333,"offset":817},"end":{"line":6,"column":354,"offset":838},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":485},"end":{"line":6,"column":354,"offset":838},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It will return the tunnel health check results by Cloudflare colo. The result for each colo is aggregated from the healthchecks conducted on individual servers. The tunnel state field in the value represents the ","position":{"start":{"line":8,"column":1,"offset":840},"end":{"line":8,"column":213,"offset":1052},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/magic-transit/about/health-checks/tunnel#health-state-and-prioritization","children":[{"type":"text","value":"state of the tunnel","position":{"start":{"line":8,"column":214,"offset":1053},"end":{"line":8,"column":233,"offset":1072},"indent":[]}}],"position":{"start":{"line":8,"column":213,"offset":1052},"end":{"line":8,"column":342,"offset":1181},"indent":[]}},{"type":"text","value":". These states are used by Magic Transit for ","position":{"start":{"line":8,"column":342,"offset":1181},"end":{"line":8,"column":387,"offset":1226},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/magic-transit/about/health-checks/tunnel#failure","children":[{"type":"text","value":"routing","position":{"start":{"line":8,"column":388,"offset":1227},"end":{"line":8,"column":395,"offset":1234},"indent":[]}}],"position":{"start":{"line":8,"column":387,"offset":1226},"end":{"line":8,"column":480,"offset":1319},"indent":[]}},{"type":"text","value":". The value 0 for the tunnel state represents it being down, the value 0.5 being degraded and the value 1 as healthy.","position":{"start":{"line":8,"column":480,"offset":1319},"end":{"line":8,"column":597,"offset":1436},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":840},"end":{"line":8,"column":597,"offset":1436},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"API Call","position":{"start":{"line":10,"column":4,"offset":1441},"end":{"line":10,"column":12,"offset":1449},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1438},"end":{"line":10,"column":12,"offset":1449},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"CLOUDFLARE_EMAIL=<CLOUDFLARE_EMAIL>\nCLOUDFLARE_API_KEY=<CLOUDFLARE_API_KEY>\nPAYLOAD='{ \"query\":\n  \"query GetTunnelHealthCheckResults($accountTag: string, $datetimeStart: string, $datetimeEnd: string) {\n    {\n      viewer {\n        accounts(filter: {accountTag: $accountTag}) {\n          magicTransitTunnelHealthChecksAdaptiveGroups(\n            limit: 100,\n            filter: {\n              datetime_geq: $datetimeStart,\n              datetime_lt:  $datetimeEnd,\n            }\n          ) {\n            avg {\n              tunnelState\n            }\n            dimensions {\n              tunnelName\n              edgeColoName\n            }\n          }\n        }\n      }\n    }\n  }\",\n    \"variables\": {\n      \"accountTag\": \"90f518ca7113dc0a91513972ba243ba5\",\n      \"datetimeStart\": \"2020-05-04T00:00:00.000Z\",\n      \"datetimeEnd\": \"2020-05-04T00:00:00.000Z\"\n    }\n  }'\n\ncurl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Auth-Email: CLOUDFLARE_EMAIL\" \\\n  -H \"X-Auth-key: CLOUDFLARE_API_KEY\" \\\n  --data \"$(echo $PAYLOAD)\" \\\n  https://api.cloudflare.com/client/v4/graphql/","position":{"start":{"line":12,"column":1,"offset":1451},"end":{"line":53,"column":4,"offset":2545},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The results returned will be in JSON (as requested), so piping the output to ","position":{"start":{"line":55,"column":1,"offset":2547},"end":{"line":55,"column":78,"offset":2624},"indent":[]}},{"type":"inlineCode","value":"jq","position":{"start":{"line":55,"column":78,"offset":2624},"end":{"line":55,"column":82,"offset":2628},"indent":[]}},{"type":"text","value":" will make them easier to read, e.g.,:","position":{"start":{"line":55,"column":82,"offset":2628},"end":{"line":55,"column":120,"offset":2666},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2547},"end":{"line":55,"column":120,"offset":2666},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"curl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Auth-Email: CLOUDFLARE_EMAIL\" \\\n  -H \"X-Auth-key: CLOUDFLARE_API_KEY\" \\\n  --data \"$(echo $PAYLOAD)\" \\\n  https://api.cloudflare.com/client/v4/graphql/ | jq .\n  {\n    \"data\": {\n      \"viewer\": {\n        \"accounts\": [\n          {\n            \"conduitEdgeTunnelHealthChecks\": [\n              {\n                {\n                  \"avg\": {\n                    \"tunnelState\": 1\n                  },\n                  \"dimensions\": {\n                    \"edgeColoName\": \"mel01\",\n                    \"tunnelName\": \"tunnel_01\",\n                    \"tunnelState\": 0.5\n                  }\n                },\n                {\n                  \"avg\": {\n                    \"tunnelState\": 0.5\n                  },\n                  \"count\": 310,\n                  \"dimensions\": {\n                    \"edgeColoName\": \"mel01\",\n                    \"tunnelName\": \"tunnel_02\",\n                    \"tunnelState\": 0.5\n                  }\n                }\n            ]\n          }\n        ]\n      }\n    },\n    \"errors\": null\n  }","position":{"start":{"line":57,"column":1,"offset":2668},"end":{"line":100,"column":4,"offset":3753},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"pcx-content-type\":\"interim\"}","position":{"start":{"line":103,"column":1,"offset":3756},"end":{"line":103,"column":59,"offset":3814},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":103,"column":59,"offset":3814}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"pcx-content-type\": \"interim\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"querying-magic-transit-tunnel-health-check-results-with-graphql\"\n  }, \"Querying Magic Transit Tunnel Health Check Results with GraphQL\"), mdx(\"p\", null, \"In this example, you are going to use the GraphQL Analytics API to query Magic Transit Health check results which are aggregated from individual health checks carried out by Cloudflare servers to GRE tunnels you have set up to work with Magic Transit during the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/magic-transit/get-started\"\n  }, \"onboarding process\"), \". You can query up to one week of data for dates up to three months ago.\"), mdx(\"p\", null, \"The following API call will request a particular account's tunnel health checks over a one day period for a particular Cloudflare colo, and outputs the requested fields. Be sure to replace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CLOUDFLARE_EMAIL\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CLOUDFLARE_API_KEY\"), \" with your email and API credentials, and adjust the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"datetimeStart\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"datetimeEnd\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accountTag\"), \" variables as needed.\"), mdx(\"p\", null, \"It will return the tunnel health check results by Cloudflare colo. The result for each colo is aggregated from the healthchecks conducted on individual servers. The tunnel state field in the value represents the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/magic-transit/about/health-checks/tunnel#health-state-and-prioritization\"\n  }, \"state of the tunnel\"), \". These states are used by Magic Transit for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/magic-transit/about/health-checks/tunnel#failure\"\n  }, \"routing\"), \". The value 0 for the tunnel state represents it being down, the value 0.5 being degraded and the value 1 as healthy.\"), mdx(\"h2\", {\n    \"id\": \"api-call\"\n  }, \"API Call\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"CLOUDFLARE_EMAIL=<CLOUDFLARE_EMAIL>\\nCLOUDFLARE_API_KEY=<CLOUDFLARE_API_KEY>\\nPAYLOAD='{ \\\"query\\\":\\n  \\\"query GetTunnelHealthCheckResults($accountTag: string, $datetimeStart: string, $datetimeEnd: string) {\\n    {\\n      viewer {\\n        accounts(filter: {accountTag: $accountTag}) {\\n          magicTransitTunnelHealthChecksAdaptiveGroups(\\n            limit: 100,\\n            filter: {\\n              datetime_geq: $datetimeStart,\\n              datetime_lt:  $datetimeEnd,\\n            }\\n          ) {\\n            avg {\\n              tunnelState\\n            }\\n            dimensions {\\n              tunnelName\\n              edgeColoName\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\\",\\n    \\\"variables\\\": {\\n      \\\"accountTag\\\": \\\"90f518ca7113dc0a91513972ba243ba5\\\",\\n      \\\"datetimeStart\\\": \\\"2020-05-04T00:00:00.000Z\\\",\\n      \\\"datetimeEnd\\\": \\\"2020-05-04T00:00:00.000Z\\\"\\n    }\\n  }'\\n\\ncurl \\\\\\n  -X POST \\\\\\n  -H \\\"Content-Type: application/json\\\" \\\\\\n  -H \\\"X-Auth-Email: CLOUDFLARE_EMAIL\\\" \\\\\\n  -H \\\"X-Auth-key: CLOUDFLARE_API_KEY\\\" \\\\\\n  --data \\\"$(echo $PAYLOAD)\\\" \\\\\\n  https://api.cloudflare.com/client/v4/graphql/\\n\")), mdx(\"p\", null, \"The results returned will be in JSON (as requested), so piping the output to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jq\"), \" will make them easier to read, e.g.,:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"curl \\\\\\n  -X POST \\\\\\n  -H \\\"Content-Type: application/json\\\" \\\\\\n  -H \\\"X-Auth-Email: CLOUDFLARE_EMAIL\\\" \\\\\\n  -H \\\"X-Auth-key: CLOUDFLARE_API_KEY\\\" \\\\\\n  --data \\\"$(echo $PAYLOAD)\\\" \\\\\\n  https://api.cloudflare.com/client/v4/graphql/ | jq .\\n  {\\n    \\\"data\\\": {\\n      \\\"viewer\\\": {\\n        \\\"accounts\\\": [\\n          {\\n            \\\"conduitEdgeTunnelHealthChecks\\\": [\\n              {\\n                {\\n                  \\\"avg\\\": {\\n                    \\\"tunnelState\\\": 1\\n                  },\\n                  \\\"dimensions\\\": {\\n                    \\\"edgeColoName\\\": \\\"mel01\\\",\\n                    \\\"tunnelName\\\": \\\"tunnel_01\\\",\\n                    \\\"tunnelState\\\": 0.5\\n                  }\\n                },\\n                {\\n                  \\\"avg\\\": {\\n                    \\\"tunnelState\\\": 0.5\\n                  },\\n                  \\\"count\\\": 310,\\n                  \\\"dimensions\\\": {\\n                    \\\"edgeColoName\\\": \\\"mel01\\\",\\n                    \\\"tunnelName\\\": \\\"tunnel_02\\\",\\n                    \\\"tunnelState\\\": 0.5\\n                  }\\n                }\\n            ]\\n          }\\n        ]\\n      }\\n    },\\n    \\\"errors\\\": null\\n  }\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"pcx-content-type\": \"interim\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"querying-magic-transit-tunnel-health-check-results-with-graphql\"\n    }}>{`Querying Magic Transit Tunnel Health Check Results with GraphQL`}</h1>\n    <p>{`In this example, you are going to use the GraphQL Analytics API to query Magic Transit Health check results which are aggregated from individual health checks carried out by Cloudflare servers to GRE tunnels you have set up to work with Magic Transit during the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.cloudflare.com/magic-transit/get-started\"\n      }}>{`onboarding process`}</a>{`. You can query up to one week of data for dates up to three months ago.`}</p>\n    <p>{`The following API call will request a particular account's tunnel health checks over a one day period for a particular Cloudflare colo, and outputs the requested fields. Be sure to replace `}<inlineCode parentName=\"p\">{`CLOUDFLARE_EMAIL`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`CLOUDFLARE_API_KEY`}</inlineCode>{` with your email and API credentials, and adjust the `}<inlineCode parentName=\"p\">{`datetimeStart`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`datetimeEnd`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`accountTag`}</inlineCode>{` variables as needed.`}</p>\n    <p>{`It will return the tunnel health check results by Cloudflare colo. The result for each colo is aggregated from the healthchecks conducted on individual servers. The tunnel state field in the value represents the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.cloudflare.com/magic-transit/about/health-checks/tunnel#health-state-and-prioritization\"\n      }}>{`state of the tunnel`}</a>{`. These states are used by Magic Transit for `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.cloudflare.com/magic-transit/about/health-checks/tunnel#failure\"\n      }}>{`routing`}</a>{`. The value 0 for the tunnel state represents it being down, the value 0.5 being degraded and the value 1 as healthy.`}</p>\n    <h2 {...{\n      \"id\": \"api-call\"\n    }}>{`API Call`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`CLOUDFLARE_EMAIL=<CLOUDFLARE_EMAIL>\nCLOUDFLARE_API_KEY=<CLOUDFLARE_API_KEY>\nPAYLOAD='{ \"query\":\n  \"query GetTunnelHealthCheckResults($accountTag: string, $datetimeStart: string, $datetimeEnd: string) {\n    {\n      viewer {\n        accounts(filter: {accountTag: $accountTag}) {\n          magicTransitTunnelHealthChecksAdaptiveGroups(\n            limit: 100,\n            filter: {\n              datetime_geq: $datetimeStart,\n              datetime_lt:  $datetimeEnd,\n            }\n          ) {\n            avg {\n              tunnelState\n            }\n            dimensions {\n              tunnelName\n              edgeColoName\n            }\n          }\n        }\n      }\n    }\n  }\",\n    \"variables\": {\n      \"accountTag\": \"90f518ca7113dc0a91513972ba243ba5\",\n      \"datetimeStart\": \"2020-05-04T00:00:00.000Z\",\n      \"datetimeEnd\": \"2020-05-04T00:00:00.000Z\"\n    }\n  }'\n\ncurl \\\\\n  -X POST \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -H \"X-Auth-Email: CLOUDFLARE_EMAIL\" \\\\\n  -H \"X-Auth-key: CLOUDFLARE_API_KEY\" \\\\\n  --data \"$(echo $PAYLOAD)\" \\\\\n  https://api.cloudflare.com/client/v4/graphql/\n`}</code></pre>\n    <p>{`The results returned will be in JSON (as requested), so piping the output to `}<inlineCode parentName=\"p\">{`jq`}</inlineCode>{` will make them easier to read, e.g.,:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`curl \\\\\n  -X POST \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -H \"X-Auth-Email: CLOUDFLARE_EMAIL\" \\\\\n  -H \"X-Auth-key: CLOUDFLARE_API_KEY\" \\\\\n  --data \"$(echo $PAYLOAD)\" \\\\\n  https://api.cloudflare.com/client/v4/graphql/ | jq .\n  {\n    \"data\": {\n      \"viewer\": {\n        \"accounts\": [\n          {\n            \"conduitEdgeTunnelHealthChecks\": [\n              {\n                {\n                  \"avg\": {\n                    \"tunnelState\": 1\n                  },\n                  \"dimensions\": {\n                    \"edgeColoName\": \"mel01\",\n                    \"tunnelName\": \"tunnel_01\",\n                    \"tunnelState\": 0.5\n                  }\n                },\n                {\n                  \"avg\": {\n                    \"tunnelState\": 0.5\n                  },\n                  \"count\": 310,\n                  \"dimensions\": {\n                    \"edgeColoName\": \"mel01\",\n                    \"tunnelName\": \"tunnel_02\",\n                    \"tunnelState\": 0.5\n                  }\n                }\n            ]\n          }\n        ]\n      }\n    },\n    \"errors\": null\n  }\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}