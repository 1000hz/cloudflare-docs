{"expireTime":9007200889996145000,"key":"gatsby-plugin-mdx-entire-payload-cbebd35b6c2eaf4323fe6244361999a6-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Filtering","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":12,"offset":12},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":12,"offset":12},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Filters constrain queries to a particular account or set of zones, requests by date, or those from a specific user agent, for example. Without filters, queries can suffer performance degradation, results can easily exceed supported bounds, and the data returned can be noisy.","position":{"start":{"line":4,"column":1,"offset":14},"end":{"line":4,"column":276,"offset":289},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":14},"end":{"line":4,"column":276,"offset":289},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Filter Structure","position":{"start":{"line":6,"column":5,"offset":295},"end":{"line":6,"column":21,"offset":311},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":291},"end":{"line":6,"column":21,"offset":311},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The GraphQL filter is represented by the ","position":{"start":{"line":8,"column":1,"offset":313},"end":{"line":8,"column":42,"offset":354},"indent":[]}},{"type":"link","title":null,"url":"https://graphql.github.io/graphql-spec/June2018/#sec-Input-Objects","children":[{"type":"text","value":"GraphQL Input Object","position":{"start":{"line":8,"column":43,"offset":355},"end":{"line":8,"column":63,"offset":375},"indent":[]}}],"position":{"start":{"line":8,"column":42,"offset":354},"end":{"line":8,"column":132,"offset":444},"indent":[]}},{"type":"text","value":", which exposes Boolean algebra on nodes.","position":{"start":{"line":8,"column":132,"offset":444},"end":{"line":8,"column":173,"offset":485},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":313},"end":{"line":8,"column":173,"offset":485},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can use filters as an argument on the following resources:","position":{"start":{"line":10,"column":1,"offset":487},"end":{"line":10,"column":63,"offset":549},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":487},"end":{"line":10,"column":63,"offset":549},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"zones","position":{"start":{"line":12,"column":3,"offset":553},"end":{"line":12,"column":8,"offset":558},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":553},"end":{"line":12,"column":8,"offset":558},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":551},"end":{"line":12,"column":8,"offset":558},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"accounts","position":{"start":{"line":13,"column":3,"offset":561},"end":{"line":13,"column":11,"offset":569},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":561},"end":{"line":13,"column":11,"offset":569},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":559},"end":{"line":13,"column":11,"offset":569},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"tables (data sets)","position":{"start":{"line":14,"column":3,"offset":572},"end":{"line":14,"column":21,"offset":590},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":572},"end":{"line":14,"column":21,"offset":590},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":570},"end":{"line":14,"column":21,"offset":590},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":551},"end":{"line":14,"column":21,"offset":590},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Zone filter","position":{"start":{"line":16,"column":6,"offset":597},"end":{"line":16,"column":17,"offset":608},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":592},"end":{"line":16,"column":17,"offset":608},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Allows querying zone-related data by zone ID (","position":{"start":{"line":18,"column":1,"offset":610},"end":{"line":18,"column":47,"offset":656},"indent":[]}},{"type":"inlineCode","value":"zoneTag","position":{"start":{"line":18,"column":47,"offset":656},"end":{"line":18,"column":56,"offset":665},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":18,"column":56,"offset":665},"end":{"line":18,"column":58,"offset":667},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":610},"end":{"line":18,"column":58,"offset":667},"indent":[]}},{"type":"code","lang":"graphql","meta":null,"value":"zones(filter: {zoneTag: \"your Zone ID\"}) {\n    ...\n}","position":{"start":{"line":20,"column":1,"offset":669},"end":{"line":24,"column":4,"offset":736},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The zone filter must conform to the following grammar:","position":{"start":{"line":26,"column":1,"offset":738},"end":{"line":26,"column":55,"offset":792},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":738},"end":{"line":26,"column":55,"offset":792},"indent":[]}},{"type":"code","lang":"graphql","meta":null,"value":"filter\n    { zoneTag: t }\n    { zoneTag_gt: t }\n    { zoneTag_in: [t, ...] }","position":{"start":{"line":28,"column":1,"offset":794},"end":{"line":33,"column":4,"offset":885},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Compound filters (comma-separated, ","position":{"start":{"line":35,"column":1,"offset":887},"end":{"line":35,"column":36,"offset":922},"indent":[]}},{"type":"inlineCode","value":"AND","position":{"start":{"line":35,"column":36,"offset":922},"end":{"line":35,"column":41,"offset":927},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":35,"column":41,"offset":927},"end":{"line":35,"column":43,"offset":929},"indent":[]}},{"type":"inlineCode","value":"OR","position":{"start":{"line":35,"column":43,"offset":929},"end":{"line":35,"column":47,"offset":933},"indent":[]}},{"type":"text","value":") are not supported.","position":{"start":{"line":35,"column":47,"offset":933},"end":{"line":35,"column":67,"offset":953},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":887},"end":{"line":35,"column":67,"offset":953},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use the ","position":{"start":{"line":37,"column":1,"offset":955},"end":{"line":37,"column":9,"offset":963},"indent":[]}},{"type":"inlineCode","value":"zoneTag: t","position":{"start":{"line":37,"column":9,"offset":963},"end":{"line":37,"column":21,"offset":975},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":37,"column":21,"offset":975},"end":{"line":37,"column":26,"offset":980},"indent":[]}},{"type":"inlineCode","value":"zoneTag_in: [t, ...]","position":{"start":{"line":37,"column":26,"offset":980},"end":{"line":37,"column":48,"offset":1002},"indent":[]}},{"type":"text","value":" forms when you know the zone IDs. Use the ","position":{"start":{"line":37,"column":48,"offset":1002},"end":{"line":37,"column":91,"offset":1045},"indent":[]}},{"type":"inlineCode","value":"zoneTag_gt: t","position":{"start":{"line":37,"column":91,"offset":1045},"end":{"line":37,"column":106,"offset":1060},"indent":[]}},{"type":"text","value":" form with limits to traverse all zones if the zone IDs are not known. Zones always sort alphanumerically.","position":{"start":{"line":37,"column":106,"offset":1060},"end":{"line":37,"column":212,"offset":1166},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":955},"end":{"line":37,"column":212,"offset":1166},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Omit the filter to get results for all zones (up to the supported limit).","position":{"start":{"line":39,"column":1,"offset":1168},"end":{"line":39,"column":74,"offset":1241},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1168},"end":{"line":39,"column":74,"offset":1241},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Account filter","position":{"start":{"line":41,"column":6,"offset":1248},"end":{"line":41,"column":20,"offset":1262},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1243},"end":{"line":41,"column":20,"offset":1262},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The account filter uses the same structure and rules as the zone filter, except that it uses the Account ID (","position":{"start":{"line":43,"column":1,"offset":1264},"end":{"line":43,"column":110,"offset":1373},"indent":[]}},{"type":"inlineCode","value":"accountTag","position":{"start":{"line":43,"column":110,"offset":1373},"end":{"line":43,"column":122,"offset":1385},"indent":[]}},{"type":"text","value":") instead of the Zone ID (","position":{"start":{"line":43,"column":122,"offset":1385},"end":{"line":43,"column":148,"offset":1411},"indent":[]}},{"type":"inlineCode","value":"zoneTag","position":{"start":{"line":43,"column":148,"offset":1411},"end":{"line":43,"column":157,"offset":1420},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":43,"column":157,"offset":1420},"end":{"line":43,"column":159,"offset":1422},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1264},"end":{"line":43,"column":159,"offset":1422},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You must specify an account filter when making an account-scoped query, and you cannot query multiple accounts simultaneously.","position":{"start":{"line":45,"column":1,"offset":1424},"end":{"line":45,"column":127,"offset":1550},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1424},"end":{"line":45,"column":127,"offset":1550},"indent":[]}},{"type":"jsx","value":"<Aside type=\"info\" header=\"Info\">","position":{"start":{"line":47,"column":1,"offset":1552},"end":{"line":47,"column":34,"offset":1585},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Network Analytics queries require an Account ID (","position":{"start":{"line":49,"column":1,"offset":1587},"end":{"line":49,"column":50,"offset":1636},"indent":[]}},{"type":"inlineCode","value":"accountTag","position":{"start":{"line":49,"column":50,"offset":1636},"end":{"line":49,"column":62,"offset":1648},"indent":[]}},{"type":"text","value":") filter.","position":{"start":{"line":49,"column":62,"offset":1648},"end":{"line":49,"column":71,"offset":1657},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1587},"end":{"line":49,"column":71,"offset":1657},"indent":[]}},{"type":"jsx","value":"</Aside>","position":{"start":{"line":50,"column":1,"offset":1658},"end":{"line":50,"column":9,"offset":1666},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Table (data set) filter","position":{"start":{"line":52,"column":6,"offset":1673},"end":{"line":52,"column":29,"offset":1696},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1668},"end":{"line":52,"column":29,"offset":1696},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Table filters require that you query at least one node. Use the ","position":{"start":{"line":54,"column":1,"offset":1698},"end":{"line":54,"column":65,"offset":1762},"indent":[]}},{"type":"inlineCode","value":"AND","position":{"start":{"line":54,"column":65,"offset":1762},"end":{"line":54,"column":70,"offset":1767},"indent":[]}},{"type":"text","value":" operator to create and combine multi-node filters. Table filters also support the ","position":{"start":{"line":54,"column":70,"offset":1767},"end":{"line":54,"column":153,"offset":1850},"indent":[]}},{"type":"inlineCode","value":"OR","position":{"start":{"line":54,"column":153,"offset":1850},"end":{"line":54,"column":157,"offset":1854},"indent":[]}},{"type":"text","value":" operator, which you must specify explicitly.","position":{"start":{"line":54,"column":157,"offset":1854},"end":{"line":54,"column":202,"offset":1899},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1698},"end":{"line":54,"column":202,"offset":1899},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following grammar describes the table filter, where ","position":{"start":{"line":56,"column":1,"offset":1901},"end":{"line":56,"column":57,"offset":1957},"indent":[]}},{"type":"inlineCode","value":"k","position":{"start":{"line":56,"column":57,"offset":1957},"end":{"line":56,"column":60,"offset":1960},"indent":[]}},{"type":"text","value":" is the GraphQL node on which to filter and ","position":{"start":{"line":56,"column":60,"offset":1960},"end":{"line":56,"column":104,"offset":2004},"indent":[]}},{"type":"inlineCode","value":"op","position":{"start":{"line":56,"column":104,"offset":2004},"end":{"line":56,"column":108,"offset":2008},"indent":[]}},{"type":"text","value":" is one of the supported operators for that node:","position":{"start":{"line":56,"column":108,"offset":2008},"end":{"line":56,"column":157,"offset":2057},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1901},"end":{"line":56,"column":157,"offset":2057},"indent":[]}},{"type":"code","lang":"graphql","meta":null,"value":"filter\n  { kvs }\nkvs\n  kv\n  kv, kvs\nkv\n  k: v\n  k_op: v\n  AND: [filters]\n  OR: [filters]\nfilters\n  filter\n  filter, filters","position":{"start":{"line":58,"column":1,"offset":2059},"end":{"line":72,"column":4,"offset":2197},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Operators","position":{"start":{"line":74,"column":6,"offset":2204},"end":{"line":74,"column":15,"offset":2213},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":2199},"end":{"line":74,"column":15,"offset":2213},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Operator support varies, depending on the node type and node name.","position":{"start":{"line":76,"column":1,"offset":2215},"end":{"line":76,"column":67,"offset":2281},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":2215},"end":{"line":76,"column":67,"offset":2281},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"Common operators","position":{"start":{"line":78,"column":7,"offset":2289},"end":{"line":78,"column":23,"offset":2305},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2283},"end":{"line":78,"column":23,"offset":2305},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following operators are supported for all types:","position":{"start":{"line":80,"column":1,"offset":2307},"end":{"line":80,"column":53,"offset":2359},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":2307},"end":{"line":80,"column":53,"offset":2359},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Operator","position":{"start":{"line":82,"column":3,"offset":2363},"end":{"line":82,"column":11,"offset":2371},"indent":[]}}],"position":{"start":{"line":82,"column":3,"offset":2363},"end":{"line":82,"column":11,"offset":2371},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Comparison","position":{"start":{"line":82,"column":14,"offset":2374},"end":{"line":82,"column":24,"offset":2384},"indent":[]}}],"position":{"start":{"line":82,"column":14,"offset":2374},"end":{"line":82,"column":33,"offset":2393},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2361},"end":{"line":82,"column":35,"offset":2395},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"gt","position":{"start":{"line":84,"column":3,"offset":2433},"end":{"line":84,"column":7,"offset":2437},"indent":[]}}],"position":{"start":{"line":84,"column":3,"offset":2433},"end":{"line":84,"column":11,"offset":2441},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"greater than","position":{"start":{"line":84,"column":14,"offset":2444},"end":{"line":84,"column":26,"offset":2456},"indent":[]}}],"position":{"start":{"line":84,"column":14,"offset":2444},"end":{"line":84,"column":33,"offset":2463},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2431},"end":{"line":84,"column":35,"offset":2465},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"lt","position":{"start":{"line":85,"column":3,"offset":2468},"end":{"line":85,"column":7,"offset":2472},"indent":[]}}],"position":{"start":{"line":85,"column":3,"offset":2468},"end":{"line":85,"column":11,"offset":2476},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"less than","position":{"start":{"line":85,"column":14,"offset":2479},"end":{"line":85,"column":23,"offset":2488},"indent":[]}}],"position":{"start":{"line":85,"column":14,"offset":2479},"end":{"line":85,"column":33,"offset":2498},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":2466},"end":{"line":85,"column":35,"offset":2500},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"geq","position":{"start":{"line":86,"column":3,"offset":2503},"end":{"line":86,"column":8,"offset":2508},"indent":[]}}],"position":{"start":{"line":86,"column":3,"offset":2503},"end":{"line":86,"column":11,"offset":2511},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"greater or equal to","position":{"start":{"line":86,"column":14,"offset":2514},"end":{"line":86,"column":33,"offset":2533},"indent":[]}}],"position":{"start":{"line":86,"column":14,"offset":2514},"end":{"line":86,"column":33,"offset":2533},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":2501},"end":{"line":86,"column":35,"offset":2535},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"leq","position":{"start":{"line":87,"column":3,"offset":2538},"end":{"line":87,"column":8,"offset":2543},"indent":[]}}],"position":{"start":{"line":87,"column":3,"offset":2538},"end":{"line":87,"column":11,"offset":2546},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"less or equal to","position":{"start":{"line":87,"column":14,"offset":2549},"end":{"line":87,"column":30,"offset":2565},"indent":[]}}],"position":{"start":{"line":87,"column":14,"offset":2549},"end":{"line":87,"column":33,"offset":2568},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2536},"end":{"line":87,"column":35,"offset":2570},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"neq","position":{"start":{"line":88,"column":3,"offset":2573},"end":{"line":88,"column":8,"offset":2578},"indent":[]}}],"position":{"start":{"line":88,"column":3,"offset":2573},"end":{"line":88,"column":11,"offset":2581},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"not equal","position":{"start":{"line":88,"column":14,"offset":2584},"end":{"line":88,"column":23,"offset":2593},"indent":[]}}],"position":{"start":{"line":88,"column":14,"offset":2584},"end":{"line":88,"column":33,"offset":2603},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2571},"end":{"line":88,"column":35,"offset":2605},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"in","position":{"start":{"line":89,"column":3,"offset":2608},"end":{"line":89,"column":7,"offset":2612},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":2608},"end":{"line":89,"column":11,"offset":2616},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"in","position":{"start":{"line":89,"column":14,"offset":2619},"end":{"line":89,"column":16,"offset":2621},"indent":[]}}],"position":{"start":{"line":89,"column":14,"offset":2619},"end":{"line":89,"column":33,"offset":2638},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2606},"end":{"line":89,"column":35,"offset":2640},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2361},"end":{"line":89,"column":35,"offset":2640},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"String operators","position":{"start":{"line":91,"column":7,"offset":2648},"end":{"line":91,"column":23,"offset":2664},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2642},"end":{"line":91,"column":23,"offset":2664},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":93,"column":1,"offset":2666},"end":{"line":93,"column":5,"offset":2670},"indent":[]}},{"type":"inlineCode","value":"like","position":{"start":{"line":93,"column":5,"offset":2670},"end":{"line":93,"column":11,"offset":2676},"indent":[]}},{"type":"text","value":" operator is available for string comparisons and supports the ","position":{"start":{"line":93,"column":11,"offset":2676},"end":{"line":93,"column":74,"offset":2739},"indent":[]}},{"type":"inlineCode","value":"%","position":{"start":{"line":93,"column":74,"offset":2739},"end":{"line":93,"column":77,"offset":2742},"indent":[]}},{"type":"text","value":" character as a wildcard.","position":{"start":{"line":93,"column":77,"offset":2742},"end":{"line":93,"column":102,"offset":2767},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2666},"end":{"line":93,"column":102,"offset":2767},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Examples","position":{"start":{"line":95,"column":5,"offset":2773},"end":{"line":95,"column":13,"offset":2781},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2769},"end":{"line":95,"column":13,"offset":2781},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"General example","position":{"start":{"line":97,"column":6,"offset":2788},"end":{"line":97,"column":21,"offset":2803},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2783},"end":{"line":97,"column":21,"offset":2803},"indent":[]}},{"type":"code","lang":"graphql","meta":null,"value":"{\n  viewer {\n    zones(filter: {zoneTag: $zoneTag}) {\n      httpRequestsAdaptiveGroups(filter: {datetime_gt: \"2021-06-10T00:00:00Z\", clientCountryName: \"GB\"}, limit: 1) {\n        count\n      }\n    }\n  }\n}","position":{"start":{"line":99,"column":1,"offset":2805},"end":{"line":109,"column":4,"offset":3024},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Filter on a specific node","position":{"start":{"line":111,"column":6,"offset":3031},"end":{"line":111,"column":31,"offset":3056},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":3026},"end":{"line":111,"column":31,"offset":3056},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following GraphQL example shows how to filter a specific node. The SQL equivalent follows.","position":{"start":{"line":113,"column":1,"offset":3058},"end":{"line":113,"column":95,"offset":3152},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":3058},"end":{"line":113,"column":95,"offset":3152},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"GraphQL {#001}","position":{"start":{"line":115,"column":7,"offset":3160},"end":{"line":115,"column":21,"offset":3174},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":3154},"end":{"line":115,"column":21,"offset":3174},"indent":[]}},{"type":"code","lang":"graphql","meta":null,"value":"httpRequestsAdaptiveGroups(filter: {datetime: \"2018-01-01T10:00:00Z\"}) {\n    ...\n}","position":{"start":{"line":117,"column":1,"offset":3176},"end":{"line":121,"column":4,"offset":3273},"indent":[1,1,1,1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"SQL {#002}","position":{"start":{"line":123,"column":7,"offset":3281},"end":{"line":123,"column":17,"offset":3291},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":3275},"end":{"line":123,"column":17,"offset":3291},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":"WHERE datetime=\"2018-01-01T10:00:00Z\"","position":{"start":{"line":125,"column":1,"offset":3293},"end":{"line":127,"column":4,"offset":3341},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Filter on multiple fields","position":{"start":{"line":129,"column":6,"offset":3348},"end":{"line":129,"column":31,"offset":3373},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":3343},"end":{"line":129,"column":31,"offset":3373},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following GraphQL example shows how to apply a filter to a multiple fields, in this case 2 datetime fields. The SQL equivalent follows.","position":{"start":{"line":131,"column":1,"offset":3375},"end":{"line":131,"column":140,"offset":3514},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":3375},"end":{"line":131,"column":140,"offset":3514},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"GraphQL {#003}","position":{"start":{"line":133,"column":7,"offset":3522},"end":{"line":133,"column":21,"offset":3536},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":3516},"end":{"line":133,"column":21,"offset":3536},"indent":[]}},{"type":"code","lang":"graphql","meta":null,"value":"httpRequests1hGroups(filter: {datetime_gt: \"2018-01-01T10:00:00Z\", datetime_lt: \"2018-01-01T11:00:00Z\"}) {\n    ...\n}","position":{"start":{"line":135,"column":1,"offset":3538},"end":{"line":139,"column":4,"offset":3669},"indent":[1,1,1,1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"SQL {#004}","position":{"start":{"line":141,"column":7,"offset":3677},"end":{"line":141,"column":17,"offset":3687},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":3671},"end":{"line":141,"column":17,"offset":3687},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":"WHERE (datetime > \"2018-01-01T10:00:00Z\") AND (datetime < \"2018-01-01T10:00:00Z\")","position":{"start":{"line":143,"column":1,"offset":3689},"end":{"line":145,"column":4,"offset":3781},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Filter using the ","position":{"start":{"line":147,"column":6,"offset":3788},"end":{"line":147,"column":23,"offset":3805},"indent":[]}},{"type":"inlineCode","value":"OR","position":{"start":{"line":147,"column":23,"offset":3805},"end":{"line":147,"column":27,"offset":3809},"indent":[]}},{"type":"text","value":" operator","position":{"start":{"line":147,"column":27,"offset":3809},"end":{"line":147,"column":36,"offset":3818},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":3783},"end":{"line":147,"column":36,"offset":3818},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following GraphQL example demonstrates using the ","position":{"start":{"line":149,"column":1,"offset":3820},"end":{"line":149,"column":54,"offset":3873},"indent":[]}},{"type":"inlineCode","value":"OR","position":{"start":{"line":149,"column":54,"offset":3873},"end":{"line":149,"column":58,"offset":3877},"indent":[]}},{"type":"text","value":" operator in a filter. This ","position":{"start":{"line":149,"column":58,"offset":3877},"end":{"line":149,"column":86,"offset":3905},"indent":[]}},{"type":"inlineCode","value":"OR","position":{"start":{"line":149,"column":86,"offset":3905},"end":{"line":149,"column":90,"offset":3909},"indent":[]}},{"type":"text","value":" operator filters for the value ","position":{"start":{"line":149,"column":90,"offset":3909},"end":{"line":149,"column":122,"offset":3941},"indent":[]}},{"type":"inlineCode","value":"US","position":{"start":{"line":149,"column":122,"offset":3941},"end":{"line":149,"column":126,"offset":3945},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":149,"column":126,"offset":3945},"end":{"line":149,"column":130,"offset":3949},"indent":[]}},{"type":"inlineCode","value":"GB","position":{"start":{"line":149,"column":130,"offset":3949},"end":{"line":149,"column":134,"offset":3953},"indent":[]}},{"type":"text","value":" in the ","position":{"start":{"line":149,"column":134,"offset":3953},"end":{"line":149,"column":142,"offset":3961},"indent":[]}},{"type":"inlineCode","value":"clientCountryName","position":{"start":{"line":149,"column":142,"offset":3961},"end":{"line":149,"column":161,"offset":3980},"indent":[]}},{"type":"text","value":" field.","position":{"start":{"line":149,"column":161,"offset":3980},"end":{"line":149,"column":168,"offset":3987},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":3820},"end":{"line":149,"column":168,"offset":3987},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"GraphQL {#005}","position":{"start":{"line":151,"column":7,"offset":3995},"end":{"line":151,"column":21,"offset":4009},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":3989},"end":{"line":151,"column":21,"offset":4009},"indent":[]}},{"type":"code","lang":"graphql","meta":null,"value":"httpRequestsAdaptiveGroups(\n        filter: {\n          datetime: \"2018-01-01T10:00:00Z\",\n          OR:[{clientCountryName: \"US\"}, {clientCountryName: \"GB\"}]) {\n    ...\n}","position":{"start":{"line":153,"column":1,"offset":4011},"end":{"line":160,"column":4,"offset":4196},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"SQL {#006}","position":{"start":{"line":162,"column":7,"offset":4204},"end":{"line":162,"column":17,"offset":4214},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":4198},"end":{"line":162,"column":17,"offset":4214},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":"WHERE datetime=\"2018-01-01T10:00:00Z\"\n  AND ((clientCountryName = \"US\") OR (clientCountryName = \"GB\"))","position":{"start":{"line":164,"column":1,"offset":4216},"end":{"line":167,"column":4,"offset":4329},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Subqueries (advanced filters)","position":{"start":{"line":169,"column":5,"offset":4335},"end":{"line":169,"column":34,"offset":4364},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":4331},"end":{"line":169,"column":34,"offset":4364},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Subqueries are not currently supported. You can use two GraphQL queries as a workaround for this limitation.","position":{"start":{"line":171,"column":1,"offset":4366},"end":{"line":171,"column":109,"offset":4474},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":4366},"end":{"line":171,"column":109,"offset":4474},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"order\":10,\"pcx-content-type\":\"reference\"}","position":{"start":{"line":174,"column":1,"offset":4477},"end":{"line":174,"column":72,"offset":4548},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":174,"column":72,"offset":4548}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 10,\n  \"pcx-content-type\": \"reference\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Aside = makeShortcode(\"Aside\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"filtering\"\n  }, \"Filtering\"), mdx(\"p\", null, \"Filters constrain queries to a particular account or set of zones, requests by date, or those from a specific user agent, for example. Without filters, queries can suffer performance degradation, results can easily exceed supported bounds, and the data returned can be noisy.\"), mdx(\"h3\", {\n    \"id\": \"filter-structure\"\n  }, \"Filter Structure\"), mdx(\"p\", null, \"The GraphQL filter is represented by the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://graphql.github.io/graphql-spec/June2018/#sec-Input-Objects\"\n  }, \"GraphQL Input Object\"), \", which exposes Boolean algebra on nodes.\"), mdx(\"p\", null, \"You can use filters as an argument on the following resources:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"zones\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"accounts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tables (data sets)\")), mdx(\"h4\", {\n    \"id\": \"zone-filter\"\n  }, \"Zone filter\"), mdx(\"p\", null, \"Allows querying zone-related data by zone ID (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zoneTag\"), \").\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"zones(filter: {zoneTag: \\\"your Zone ID\\\"}) {\\n    ...\\n}\\n\")), mdx(\"p\", null, \"The zone filter must conform to the following grammar:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"filter\\n    { zoneTag: t }\\n    { zoneTag_gt: t }\\n    { zoneTag_in: [t, ...] }\\n\")), mdx(\"p\", null, \"Compound filters (comma-separated, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AND\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OR\"), \") are not supported.\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zoneTag: t\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zoneTag_in: [t, ...]\"), \" forms when you know the zone IDs. Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zoneTag_gt: t\"), \" form with limits to traverse all zones if the zone IDs are not known. Zones always sort alphanumerically.\"), mdx(\"p\", null, \"Omit the filter to get results for all zones (up to the supported limit).\"), mdx(\"h4\", {\n    \"id\": \"account-filter\"\n  }, \"Account filter\"), mdx(\"p\", null, \"The account filter uses the same structure and rules as the zone filter, except that it uses the Account ID (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accountTag\"), \") instead of the Zone ID (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zoneTag\"), \").\"), mdx(\"p\", null, \"You must specify an account filter when making an account-scoped query, and you cannot query multiple accounts simultaneously.\"), mdx(Aside, {\n    type: \"info\",\n    header: \"Info\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", null, \"Network Analytics queries require an Account ID (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accountTag\"), \") filter.\")), mdx(\"h4\", {\n    \"id\": \"table-data-set-filter\"\n  }, \"Table (data set) filter\"), mdx(\"p\", null, \"Table filters require that you query at least one node. Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AND\"), \" operator to create and combine multi-node filters. Table filters also support the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OR\"), \" operator, which you must specify explicitly.\"), mdx(\"p\", null, \"The following grammar describes the table filter, where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k\"), \" is the GraphQL node on which to filter and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"op\"), \" is one of the supported operators for that node:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"filter\\n  { kvs }\\nkvs\\n  kv\\n  kv, kvs\\nkv\\n  k: v\\n  k_op: v\\n  AND: [filters]\\n  OR: [filters]\\nfilters\\n  filter\\n  filter, filters\\n\")), mdx(\"h4\", {\n    \"id\": \"operators\"\n  }, \"Operators\"), mdx(\"p\", null, \"Operator support varies, depending on the node type and node name.\"), mdx(\"h5\", {\n    \"id\": \"common-operators\"\n  }, \"Common operators\"), mdx(\"p\", null, \"The following operators are supported for all types:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Operator\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Comparison\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"gt\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"greater than\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lt\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"less than\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"geq\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"greater or equal to\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"leq\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"less or equal to\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"neq\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"not equal\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"in\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"in\")))), mdx(\"h5\", {\n    \"id\": \"string-operators\"\n  }, \"String operators\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"like\"), \" operator is available for string comparisons and supports the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"%\"), \" character as a wildcard.\"), mdx(\"h3\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h4\", {\n    \"id\": \"general-example\"\n  }, \"General example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"{\\n  viewer {\\n    zones(filter: {zoneTag: $zoneTag}) {\\n      httpRequestsAdaptiveGroups(filter: {datetime_gt: \\\"2021-06-10T00:00:00Z\\\", clientCountryName: \\\"GB\\\"}, limit: 1) {\\n        count\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"h4\", {\n    \"id\": \"filter-on-a-specific-node\"\n  }, \"Filter on a specific node\"), mdx(\"p\", null, \"The following GraphQL example shows how to filter a specific node. The SQL equivalent follows.\"), mdx(\"h5\", {\n    \"id\": \"graphql-001\"\n  }, \"GraphQL {#001}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"httpRequestsAdaptiveGroups(filter: {datetime: \\\"2018-01-01T10:00:00Z\\\"}) {\\n    ...\\n}\\n\")), mdx(\"h5\", {\n    \"id\": \"sql-002\"\n  }, \"SQL {#002}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"WHERE datetime=\\\"2018-01-01T10:00:00Z\\\"\\n\")), mdx(\"h4\", {\n    \"id\": \"filter-on-multiple-fields\"\n  }, \"Filter on multiple fields\"), mdx(\"p\", null, \"The following GraphQL example shows how to apply a filter to a multiple fields, in this case 2 datetime fields. The SQL equivalent follows.\"), mdx(\"h5\", {\n    \"id\": \"graphql-003\"\n  }, \"GraphQL {#003}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"httpRequests1hGroups(filter: {datetime_gt: \\\"2018-01-01T10:00:00Z\\\", datetime_lt: \\\"2018-01-01T11:00:00Z\\\"}) {\\n    ...\\n}\\n\")), mdx(\"h5\", {\n    \"id\": \"sql-004\"\n  }, \"SQL {#004}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"WHERE (datetime > \\\"2018-01-01T10:00:00Z\\\") AND (datetime < \\\"2018-01-01T10:00:00Z\\\")\\n\")), mdx(\"h4\", {\n    \"id\": \"filter-using-the-or-operator\"\n  }, \"Filter using the \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"OR\"), \" operator\"), mdx(\"p\", null, \"The following GraphQL example demonstrates using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OR\"), \" operator in a filter. This \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OR\"), \" operator filters for the value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"US\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GB\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clientCountryName\"), \" field.\"), mdx(\"h5\", {\n    \"id\": \"graphql-005\"\n  }, \"GraphQL {#005}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"httpRequestsAdaptiveGroups(\\n        filter: {\\n          datetime: \\\"2018-01-01T10:00:00Z\\\",\\n          OR:[{clientCountryName: \\\"US\\\"}, {clientCountryName: \\\"GB\\\"}]) {\\n    ...\\n}\\n\")), mdx(\"h5\", {\n    \"id\": \"sql-006\"\n  }, \"SQL {#006}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"WHERE datetime=\\\"2018-01-01T10:00:00Z\\\"\\n  AND ((clientCountryName = \\\"US\\\") OR (clientCountryName = \\\"GB\\\"))\\n\")), mdx(\"h3\", {\n    \"id\": \"subqueries-advanced-filters\"\n  }, \"Subqueries (advanced filters)\"), mdx(\"p\", null, \"Subqueries are not currently supported. You can use two GraphQL queries as a workaround for this limitation.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"order\": 10,\n  \"pcx-content-type\": \"reference\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Aside = makeShortcode(\"Aside\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"filtering\"\n    }}>{`Filtering`}</h1>\n    <p>{`Filters constrain queries to a particular account or set of zones, requests by date, or those from a specific user agent, for example. Without filters, queries can suffer performance degradation, results can easily exceed supported bounds, and the data returned can be noisy.`}</p>\n    <h3 {...{\n      \"id\": \"filter-structure\"\n    }}>{`Filter Structure`}</h3>\n    <p>{`The GraphQL filter is represented by the `}<a parentName=\"p\" {...{\n        \"href\": \"https://graphql.github.io/graphql-spec/June2018/#sec-Input-Objects\"\n      }}>{`GraphQL Input Object`}</a>{`, which exposes Boolean algebra on nodes.`}</p>\n    <p>{`You can use filters as an argument on the following resources:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`zones`}</li>\n      <li parentName=\"ul\">{`accounts`}</li>\n      <li parentName=\"ul\">{`tables (data sets)`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"zone-filter\"\n    }}>{`Zone filter`}</h4>\n    <p>{`Allows querying zone-related data by zone ID (`}<inlineCode parentName=\"p\">{`zoneTag`}</inlineCode>{`).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`zones(filter: {zoneTag: \"your Zone ID\"}) {\n    ...\n}\n`}</code></pre>\n    <p>{`The zone filter must conform to the following grammar:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`filter\n    { zoneTag: t }\n    { zoneTag_gt: t }\n    { zoneTag_in: [t, ...] }\n`}</code></pre>\n    <p>{`Compound filters (comma-separated, `}<inlineCode parentName=\"p\">{`AND`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`OR`}</inlineCode>{`) are not supported.`}</p>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`zoneTag: t`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`zoneTag_in: [t, ...]`}</inlineCode>{` forms when you know the zone IDs. Use the `}<inlineCode parentName=\"p\">{`zoneTag_gt: t`}</inlineCode>{` form with limits to traverse all zones if the zone IDs are not known. Zones always sort alphanumerically.`}</p>\n    <p>{`Omit the filter to get results for all zones (up to the supported limit).`}</p>\n    <h4 {...{\n      \"id\": \"account-filter\"\n    }}>{`Account filter`}</h4>\n    <p>{`The account filter uses the same structure and rules as the zone filter, except that it uses the Account ID (`}<inlineCode parentName=\"p\">{`accountTag`}</inlineCode>{`) instead of the Zone ID (`}<inlineCode parentName=\"p\">{`zoneTag`}</inlineCode>{`).`}</p>\n    <p>{`You must specify an account filter when making an account-scoped query, and you cannot query multiple accounts simultaneously.`}</p>\n    <Aside type=\"info\" header=\"Info\" mdxType=\"Aside\">\n      <p>{`Network Analytics queries require an Account ID (`}<inlineCode parentName=\"p\">{`accountTag`}</inlineCode>{`) filter.`}</p>\n    </Aside>\n    <h4 {...{\n      \"id\": \"table-data-set-filter\"\n    }}>{`Table (data set) filter`}</h4>\n    <p>{`Table filters require that you query at least one node. Use the `}<inlineCode parentName=\"p\">{`AND`}</inlineCode>{` operator to create and combine multi-node filters. Table filters also support the `}<inlineCode parentName=\"p\">{`OR`}</inlineCode>{` operator, which you must specify explicitly.`}</p>\n    <p>{`The following grammar describes the table filter, where `}<inlineCode parentName=\"p\">{`k`}</inlineCode>{` is the GraphQL node on which to filter and `}<inlineCode parentName=\"p\">{`op`}</inlineCode>{` is one of the supported operators for that node:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`filter\n  { kvs }\nkvs\n  kv\n  kv, kvs\nkv\n  k: v\n  k_op: v\n  AND: [filters]\n  OR: [filters]\nfilters\n  filter\n  filter, filters\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"operators\"\n    }}>{`Operators`}</h4>\n    <p>{`Operator support varies, depending on the node type and node name.`}</p>\n    <h5 {...{\n      \"id\": \"common-operators\"\n    }}>{`Common operators`}</h5>\n    <p>{`The following operators are supported for all types:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Operator`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Comparison`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`gt`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`greater than`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`lt`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`less than`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`geq`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`greater or equal to`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`leq`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`less or equal to`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`neq`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`not equal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`in`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`in`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"string-operators\"\n    }}>{`String operators`}</h5>\n    <p>{`The `}<inlineCode parentName=\"p\">{`like`}</inlineCode>{` operator is available for string comparisons and supports the `}<inlineCode parentName=\"p\">{`%`}</inlineCode>{` character as a wildcard.`}</p>\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <h4 {...{\n      \"id\": \"general-example\"\n    }}>{`General example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  viewer {\n    zones(filter: {zoneTag: $zoneTag}) {\n      httpRequestsAdaptiveGroups(filter: {datetime_gt: \"2021-06-10T00:00:00Z\", clientCountryName: \"GB\"}, limit: 1) {\n        count\n      }\n    }\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"filter-on-a-specific-node\"\n    }}>{`Filter on a specific node`}</h4>\n    <p>{`The following GraphQL example shows how to filter a specific node. The SQL equivalent follows.`}</p>\n    <h5 {...{\n      \"id\": \"graphql-001\"\n    }}>{`GraphQL {#001}`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`httpRequestsAdaptiveGroups(filter: {datetime: \"2018-01-01T10:00:00Z\"}) {\n    ...\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"sql-002\"\n    }}>{`SQL {#002}`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`WHERE datetime=\"2018-01-01T10:00:00Z\"\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"filter-on-multiple-fields\"\n    }}>{`Filter on multiple fields`}</h4>\n    <p>{`The following GraphQL example shows how to apply a filter to a multiple fields, in this case 2 datetime fields. The SQL equivalent follows.`}</p>\n    <h5 {...{\n      \"id\": \"graphql-003\"\n    }}>{`GraphQL {#003}`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`httpRequests1hGroups(filter: {datetime_gt: \"2018-01-01T10:00:00Z\", datetime_lt: \"2018-01-01T11:00:00Z\"}) {\n    ...\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"sql-004\"\n    }}>{`SQL {#004}`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`WHERE (datetime > \"2018-01-01T10:00:00Z\") AND (datetime < \"2018-01-01T10:00:00Z\")\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"filter-using-the-or-operator\"\n    }}>{`Filter using the `}<inlineCode parentName=\"h4\">{`OR`}</inlineCode>{` operator`}</h4>\n    <p>{`The following GraphQL example demonstrates using the `}<inlineCode parentName=\"p\">{`OR`}</inlineCode>{` operator in a filter. This `}<inlineCode parentName=\"p\">{`OR`}</inlineCode>{` operator filters for the value `}<inlineCode parentName=\"p\">{`US`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`GB`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`clientCountryName`}</inlineCode>{` field.`}</p>\n    <h5 {...{\n      \"id\": \"graphql-005\"\n    }}>{`GraphQL {#005}`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`httpRequestsAdaptiveGroups(\n        filter: {\n          datetime: \"2018-01-01T10:00:00Z\",\n          OR:[{clientCountryName: \"US\"}, {clientCountryName: \"GB\"}]) {\n    ...\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"sql-006\"\n    }}>{`SQL {#006}`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`WHERE datetime=\"2018-01-01T10:00:00Z\"\n  AND ((clientCountryName = \"US\") OR (clientCountryName = \"GB\"))\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"subqueries-advanced-filters\"\n    }}>{`Subqueries (advanced filters)`}</h3>\n    <p>{`Subqueries are not currently supported. You can use two GraphQL queries as a workaround for this limitation.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}