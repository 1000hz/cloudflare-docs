{"expireTime":9007200889996145000,"key":"gatsby-plugin-mdx-entire-payload-2a94e52c1295ee441095866cbf738bbf-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Error responses","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":18,"offset":18},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":18,"offset":18},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The GraphQL Analytics API is a RESTful API based on HTTPS requests and JSON responses and will return familiar HTTP status codes (e.g., ","position":{"start":{"line":4,"column":1,"offset":20},"end":{"line":4,"column":137,"offset":156},"indent":[]}},{"type":"inlineCode","value":"404","position":{"start":{"line":4,"column":137,"offset":156},"end":{"line":4,"column":142,"offset":161},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":4,"column":142,"offset":161},"end":{"line":4,"column":144,"offset":163},"indent":[]}},{"type":"inlineCode","value":"500","position":{"start":{"line":4,"column":144,"offset":163},"end":{"line":4,"column":149,"offset":168},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":4,"column":149,"offset":168},"end":{"line":4,"column":151,"offset":170},"indent":[]}},{"type":"inlineCode","value":"504","position":{"start":{"line":4,"column":151,"offset":170},"end":{"line":4,"column":156,"offset":175},"indent":[]}},{"type":"text","value":"). However, in contrast to the common REST approach, a ","position":{"start":{"line":4,"column":156,"offset":175},"end":{"line":4,"column":211,"offset":230},"indent":[]}},{"type":"inlineCode","value":"200","position":{"start":{"line":4,"column":211,"offset":230},"end":{"line":4,"column":216,"offset":235},"indent":[]}},{"type":"text","value":" response can contain an error, conforming to the ","position":{"start":{"line":4,"column":216,"offset":235},"end":{"line":4,"column":266,"offset":285},"indent":[]}},{"type":"link","title":null,"url":"https://graphql.github.io/graphql-spec/June2018/#sec-Errors","children":[{"type":"text","value":"GraphQL specification","position":{"start":{"line":4,"column":267,"offset":286},"end":{"line":4,"column":288,"offset":307},"indent":[]}}],"position":{"start":{"line":4,"column":266,"offset":285},"end":{"line":4,"column":350,"offset":369},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":4,"column":350,"offset":369},"end":{"line":4,"column":351,"offset":370},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":20},"end":{"line":4,"column":351,"offset":370},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All responses contain an ","position":{"start":{"line":6,"column":1,"offset":372},"end":{"line":6,"column":26,"offset":397},"indent":[]}},{"type":"inlineCode","value":"errors","position":{"start":{"line":6,"column":26,"offset":397},"end":{"line":6,"column":34,"offset":405},"indent":[]}},{"type":"text","value":" array, which will be ","position":{"start":{"line":6,"column":34,"offset":405},"end":{"line":6,"column":56,"offset":427},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":6,"column":56,"offset":427},"end":{"line":6,"column":62,"offset":433},"indent":[]}},{"type":"text","value":" if there are no errors, and include at least one error object if there was an error. Non-null error objects will contain the following fields:","position":{"start":{"line":6,"column":62,"offset":433},"end":{"line":6,"column":205,"offset":576},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":372},"end":{"line":6,"column":205,"offset":576},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"message","position":{"start":{"line":8,"column":3,"offset":580},"end":{"line":8,"column":12,"offset":589},"indent":[]}},{"type":"text","value":": a string describing the error","position":{"start":{"line":8,"column":12,"offset":589},"end":{"line":8,"column":43,"offset":620},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":580},"end":{"line":8,"column":43,"offset":620},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":578},"end":{"line":8,"column":43,"offset":620},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"path","position":{"start":{"line":9,"column":3,"offset":623},"end":{"line":9,"column":9,"offset":629},"indent":[]}},{"type":"text","value":": the nodes associated with the error, starting from the root. Note that the number included in the path array, e.g., ","position":{"start":{"line":9,"column":9,"offset":629},"end":{"line":9,"column":127,"offset":747},"indent":[]}},{"type":"inlineCode","value":"0","position":{"start":{"line":9,"column":127,"offset":747},"end":{"line":9,"column":130,"offset":750},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":9,"column":130,"offset":750},"end":{"line":9,"column":134,"offset":754},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":9,"column":134,"offset":754},"end":{"line":9,"column":137,"offset":757},"indent":[]}},{"type":"text","value":", specifies to which zone the error applies; ","position":{"start":{"line":9,"column":137,"offset":757},"end":{"line":9,"column":182,"offset":802},"indent":[]}},{"type":"inlineCode","value":"0","position":{"start":{"line":9,"column":182,"offset":802},"end":{"line":9,"column":185,"offset":805},"indent":[]}},{"type":"text","value":" indicates the first zone in the list (or only zone, if only one is being queried).","position":{"start":{"line":9,"column":185,"offset":805},"end":{"line":9,"column":268,"offset":888},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":623},"end":{"line":9,"column":268,"offset":888},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":621},"end":{"line":9,"column":268,"offset":888},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"timestamp","position":{"start":{"line":10,"column":3,"offset":891},"end":{"line":10,"column":14,"offset":902},"indent":[]}},{"type":"text","value":": UTC datetime when the error occurred","position":{"start":{"line":10,"column":14,"offset":902},"end":{"line":10,"column":52,"offset":940},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":891},"end":{"line":10,"column":52,"offset":940},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":889},"end":{"line":10,"column":52,"offset":940},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":578},"end":{"line":10,"column":52,"offset":940},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":12,"column":4,"offset":945},"end":{"line":12,"column":11,"offset":952},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":942},"end":{"line":12,"column":11,"offset":952},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"{\n  \"data\": null,\n  \"errors\": [\n    {\n      \"message\": \"cannot request data older than 2678400s\",\n      \"path\": [\n        \"viewer\",\n        \"zones\",\n        \"0\",\n        \"firewallEventsAdaptiveGroups\"\n      ],\n      \"extensions\": {\n        \"timestamp\": \"2019-12-09T21:27:19.195060142Z\"\n      }\n    }\n  ]\n}","position":{"start":{"line":13,"column":1,"offset":953},"end":{"line":31,"column":4,"offset":1270},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Common error types","position":{"start":{"line":33,"column":4,"offset":1275},"end":{"line":33,"column":22,"offset":1293},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1272},"end":{"line":33,"column":22,"offset":1293},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Data set accessibility limits (entitlements) exceeded","position":{"start":{"line":35,"column":5,"offset":1299},"end":{"line":35,"column":58,"offset":1352},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1295},"end":{"line":35,"column":58,"offset":1352},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sample error messages:","position":{"start":{"line":37,"column":1,"offset":1354},"end":{"line":37,"column":23,"offset":1376},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1354},"end":{"line":37,"column":23,"offset":1376},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"\"cannot request data older than...\"","position":{"start":{"line":39,"column":3,"offset":1380},"end":{"line":39,"column":38,"offset":1415},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":1380},"end":{"line":39,"column":38,"offset":1415},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1378},"end":{"line":39,"column":38,"offset":1415},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"\"number of fields can't be more than...\"","position":{"start":{"line":40,"column":3,"offset":1418},"end":{"line":40,"column":43,"offset":1458},"indent":[]}}],"position":{"start":{"line":40,"column":3,"offset":1418},"end":{"line":40,"column":43,"offset":1458},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1416},"end":{"line":40,"column":43,"offset":1458},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1378},"end":{"line":40,"column":43,"offset":1458},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Indicate that the query exceeds what's allowed for the particular data set under your plan. ","position":{"start":{"line":42,"column":1,"offset":1460},"end":{"line":42,"column":93,"offset":1552},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"See ","position":{"start":{"line":42,"column":94,"offset":1553},"end":{"line":42,"column":98,"offset":1557},"indent":[]}},{"type":"link","title":null,"url":"/graphql-api/limits/#data-set-accessibility","children":[{"type":"text","value":"Data set accessibility","position":{"start":{"line":42,"column":99,"offset":1558},"end":{"line":42,"column":121,"offset":1580},"indent":[]}}],"position":{"start":{"line":42,"column":98,"offset":1557},"end":{"line":42,"column":167,"offset":1626},"indent":[]}}],"position":{"start":{"line":42,"column":93,"offset":1552},"end":{"line":42,"column":168,"offset":1627},"indent":[]}},{"type":"text","value":" for details.","position":{"start":{"line":42,"column":168,"offset":1627},"end":{"line":42,"column":181,"offset":1640},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1460},"end":{"line":42,"column":181,"offset":1640},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Parsing issues","position":{"start":{"line":44,"column":5,"offset":1646},"end":{"line":44,"column":19,"offset":1660},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1642},"end":{"line":44,"column":19,"offset":1660},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sample error messages:","position":{"start":{"line":46,"column":1,"offset":1662},"end":{"line":46,"column":23,"offset":1684},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1662},"end":{"line":46,"column":23,"offset":1684},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"\"error parsing args...\"","position":{"start":{"line":48,"column":3,"offset":1688},"end":{"line":48,"column":26,"offset":1711},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":1688},"end":{"line":48,"column":26,"offset":1711},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1686},"end":{"line":48,"column":26,"offset":1711},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"\"scalar fields must have not selections\"","position":{"start":{"line":49,"column":3,"offset":1714},"end":{"line":49,"column":43,"offset":1754},"indent":[]}}],"position":{"start":{"line":49,"column":3,"offset":1714},"end":{"line":49,"column":43,"offset":1754},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1712},"end":{"line":49,"column":43,"offset":1754},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1686},"end":{"line":49,"column":43,"offset":1754},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Indicate that the query can't be processed because it's malformed.","position":{"start":{"line":51,"column":1,"offset":1756},"end":{"line":51,"column":67,"offset":1822},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1756},"end":{"line":51,"column":67,"offset":1822},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Rate limits exceeded","position":{"start":{"line":53,"column":5,"offset":1828},"end":{"line":53,"column":25,"offset":1848},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1824},"end":{"line":53,"column":25,"offset":1848},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sample error messages:","position":{"start":{"line":55,"column":1,"offset":1850},"end":{"line":55,"column":23,"offset":1872},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1850},"end":{"line":55,"column":23,"offset":1872},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"\"limit reached, please try reduced time period\"","position":{"start":{"line":57,"column":3,"offset":1876},"end":{"line":57,"column":50,"offset":1923},"indent":[]}}],"position":{"start":{"line":57,"column":3,"offset":1876},"end":{"line":57,"column":50,"offset":1923},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1874},"end":{"line":57,"column":50,"offset":1923},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"\"quota exceeded, please repeat your request in the next minute\"","position":{"start":{"line":58,"column":3,"offset":1926},"end":{"line":58,"column":66,"offset":1989},"indent":[]}}],"position":{"start":{"line":58,"column":3,"offset":1926},"end":{"line":58,"column":66,"offset":1989},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1924},"end":{"line":58,"column":66,"offset":1989},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1874},"end":{"line":58,"column":66,"offset":1989},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {\"order\":25,\"pcx-content-type\":\"reference\"}","position":{"start":{"line":61,"column":1,"offset":1992},"end":{"line":61,"column":72,"offset":2063},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":61,"column":72,"offset":2063}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 25,\n  \"pcx-content-type\": \"reference\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"error-responses\"\n  }, \"Error responses\"), mdx(\"p\", null, \"The GraphQL Analytics API is a RESTful API based on HTTPS requests and JSON responses and will return familiar HTTP status codes (e.g., \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"404\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"500\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"504\"), \"). However, in contrast to the common REST approach, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"200\"), \" response can contain an error, conforming to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://graphql.github.io/graphql-spec/June2018/#sec-Errors\"\n  }, \"GraphQL specification\"), \".\"), mdx(\"p\", null, \"All responses contain an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"errors\"), \" array, which will be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" if there are no errors, and include at least one error object if there was an error. Non-null error objects will contain the following fields:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"message\"), \": a string describing the error\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"path\"), \": the nodes associated with the error, starting from the root. Note that the number included in the path array, e.g., \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1\"), \", specifies to which zone the error applies; \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \" indicates the first zone in the list (or only zone, if only one is being queried).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"timestamp\"), \": UTC datetime when the error occurred\")), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"data\\\": null,\\n  \\\"errors\\\": [\\n    {\\n      \\\"message\\\": \\\"cannot request data older than 2678400s\\\",\\n      \\\"path\\\": [\\n        \\\"viewer\\\",\\n        \\\"zones\\\",\\n        \\\"0\\\",\\n        \\\"firewallEventsAdaptiveGroups\\\"\\n      ],\\n      \\\"extensions\\\": {\\n        \\\"timestamp\\\": \\\"2019-12-09T21:27:19.195060142Z\\\"\\n      }\\n    }\\n  ]\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"common-error-types\"\n  }, \"Common error types\"), mdx(\"h3\", {\n    \"id\": \"data-set-accessibility-limits-entitlements-exceeded\"\n  }, \"Data set accessibility limits (entitlements) exceeded\"), mdx(\"p\", null, \"Sample error messages:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"cannot request data older than...\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"number of fields can't be more than...\\\"\")), mdx(\"p\", null, \"Indicate that the query exceeds what's allowed for the particular data set under your plan. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"See \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"/graphql-api/limits/#data-set-accessibility\"\n  }, \"Data set accessibility\")), \" for details.\"), mdx(\"h3\", {\n    \"id\": \"parsing-issues\"\n  }, \"Parsing issues\"), mdx(\"p\", null, \"Sample error messages:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"error parsing args...\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"scalar fields must have not selections\\\"\")), mdx(\"p\", null, \"Indicate that the query can't be processed because it's malformed.\"), mdx(\"h3\", {\n    \"id\": \"rate-limits-exceeded\"\n  }, \"Rate limits exceeded\"), mdx(\"p\", null, \"Sample error messages:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"limit reached, please try reduced time period\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"quota exceeded, please repeat your request in the next minute\\\"\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"order\": 25,\n  \"pcx-content-type\": \"reference\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"error-responses\"\n    }}>{`Error responses`}</h1>\n    <p>{`The GraphQL Analytics API is a RESTful API based on HTTPS requests and JSON responses and will return familiar HTTP status codes (e.g., `}<inlineCode parentName=\"p\">{`404`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`500`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`504`}</inlineCode>{`). However, in contrast to the common REST approach, a `}<inlineCode parentName=\"p\">{`200`}</inlineCode>{` response can contain an error, conforming to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://graphql.github.io/graphql-spec/June2018/#sec-Errors\"\n      }}>{`GraphQL specification`}</a>{`.`}</p>\n    <p>{`All responses contain an `}<inlineCode parentName=\"p\">{`errors`}</inlineCode>{` array, which will be `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` if there are no errors, and include at least one error object if there was an error. Non-null error objects will contain the following fields:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`message`}</inlineCode>{`: a string describing the error`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`path`}</inlineCode>{`: the nodes associated with the error, starting from the root. Note that the number included in the path array, e.g., `}<inlineCode parentName=\"li\">{`0`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`1`}</inlineCode>{`, specifies to which zone the error applies; `}<inlineCode parentName=\"li\">{`0`}</inlineCode>{` indicates the first zone in the list (or only zone, if only one is being queried).`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`timestamp`}</inlineCode>{`: UTC datetime when the error occurred`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": null,\n  \"errors\": [\n    {\n      \"message\": \"cannot request data older than 2678400s\",\n      \"path\": [\n        \"viewer\",\n        \"zones\",\n        \"0\",\n        \"firewallEventsAdaptiveGroups\"\n      ],\n      \"extensions\": {\n        \"timestamp\": \"2019-12-09T21:27:19.195060142Z\"\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"common-error-types\"\n    }}>{`Common error types`}</h2>\n    <h3 {...{\n      \"id\": \"data-set-accessibility-limits-entitlements-exceeded\"\n    }}>{`Data set accessibility limits (entitlements) exceeded`}</h3>\n    <p>{`Sample error messages:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`\"cannot request data older than...\"`}</li>\n      <li parentName=\"ul\">{`\"number of fields can't be more than...\"`}</li>\n    </ul>\n    <p>{`Indicate that the query exceeds what's allowed for the particular data set under your plan. `}<em parentName=\"p\">{`See `}<a parentName=\"em\" {...{\n          \"href\": \"/graphql-api/limits/#data-set-accessibility\"\n        }}>{`Data set accessibility`}</a></em>{` for details.`}</p>\n    <h3 {...{\n      \"id\": \"parsing-issues\"\n    }}>{`Parsing issues`}</h3>\n    <p>{`Sample error messages:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`\"error parsing args...\"`}</li>\n      <li parentName=\"ul\">{`\"scalar fields must have not selections\"`}</li>\n    </ul>\n    <p>{`Indicate that the query can't be processed because it's malformed.`}</p>\n    <h3 {...{\n      \"id\": \"rate-limits-exceeded\"\n    }}>{`Rate limits exceeded`}</h3>\n    <p>{`Sample error messages:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`\"limit reached, please try reduced time period\"`}</li>\n      <li parentName=\"ul\">{`\"quota exceeded, please repeat your request in the next minute\"`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}