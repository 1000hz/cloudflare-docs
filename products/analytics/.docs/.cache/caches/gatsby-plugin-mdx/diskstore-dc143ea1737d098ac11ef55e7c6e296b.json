{"expireTime":9007200889996143000,"key":"gatsby-plugin-mdx-entire-payload-8541d84a71b9806c18172dde9e1ae058-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Querying Workers Metrics with GraphQL","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":40,"offset":40},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":40,"offset":40},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this example, we're going to use the GraphQL Analytics API to query for Workers Metrics over a specified time period. We can query up to one week of data for dates up to three months ago.","position":{"start":{"line":4,"column":1,"offset":42},"end":{"line":4,"column":191,"offset":232},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":42},"end":{"line":4,"column":191,"offset":232},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following API call will request a Worker script's metrics over a one day period, and output the requested fields. Be sure to replace ","position":{"start":{"line":6,"column":1,"offset":234},"end":{"line":6,"column":138,"offset":371},"indent":[]}},{"type":"inlineCode","value":"CLOUDFLARE_EMAIL","position":{"start":{"line":6,"column":138,"offset":371},"end":{"line":6,"column":156,"offset":389},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":6,"column":156,"offset":389},"end":{"line":6,"column":161,"offset":394},"indent":[]}},{"type":"inlineCode","value":"CLOUDFLARE_API_KEY","position":{"start":{"line":6,"column":161,"offset":394},"end":{"line":6,"column":181,"offset":414},"indent":[]}},{"type":"text","value":" with your email and API credentials, and adjust the ","position":{"start":{"line":6,"column":181,"offset":414},"end":{"line":6,"column":234,"offset":467},"indent":[]}},{"type":"inlineCode","value":"datetimeStart","position":{"start":{"line":6,"column":234,"offset":467},"end":{"line":6,"column":249,"offset":482},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":6,"column":249,"offset":482},"end":{"line":6,"column":251,"offset":484},"indent":[]}},{"type":"inlineCode","value":"datetimeEnd","position":{"start":{"line":6,"column":251,"offset":484},"end":{"line":6,"column":264,"offset":497},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":6,"column":264,"offset":497},"end":{"line":6,"column":266,"offset":499},"indent":[]}},{"type":"inlineCode","value":"accountTag","position":{"start":{"line":6,"column":266,"offset":499},"end":{"line":6,"column":278,"offset":511},"indent":[]}},{"type":"text","value":", and ","position":{"start":{"line":6,"column":278,"offset":511},"end":{"line":6,"column":284,"offset":517},"indent":[]}},{"type":"inlineCode","value":"scriptName","position":{"start":{"line":6,"column":284,"offset":517},"end":{"line":6,"column":296,"offset":529},"indent":[]}},{"type":"text","value":" variables as needed.","position":{"start":{"line":6,"column":296,"offset":529},"end":{"line":6,"column":317,"offset":550},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":234},"end":{"line":6,"column":317,"offset":550},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"API Call","position":{"start":{"line":8,"column":4,"offset":555},"end":{"line":8,"column":12,"offset":563},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":552},"end":{"line":8,"column":12,"offset":563},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"CLOUDFLARE_EMAIL=<CLOUDFLARE_EMAIL>\nCLOUDFLARE_API_KEY=<CLOUDFLARE_API_KEY>\nPAYLOAD='{ \"query\":\n  \"query GetWorkersAnalytics($accountTag: string, $datetimeStart: string, $datetimeEnd: string, $scriptName: string) {\n      viewer {\n        accounts(filter: {accountTag: $accountTag}) {\n          workersInvocationsAdaptive(limit: 100, filter: {\n            scriptName: $scriptName,\n            datetime_geq: $datetimeStart,\n            datetime_leq: $datetimeEnd\n          }) {\n            sum {\n              subrequests\n              requests\n              errors\n            }\n            quantiles {\n              cpuTimeP50\n              cpuTimeP99\n            }\n            dimensions{\n              datetime\n              scriptName\n              status\n            }\n          }\n        }\n      }\n    }\",\n    \"variables\": {\n      \"accountTag\": \"90f518ca7113dc0a91513972ba243ba5\",\n      \"datetimeStart\": \"2020-05-04T00:00:00.000Z\",\n      \"datetimeEnd\": \"2020-05-04T00:00:00.000Z\",\n      \"scriptName\": \"worker-subrequest-test-client\"\n    }\n  }'\n\ncurl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Auth-Email: CLOUDFLARE_EMAIL\" \\\n  -H \"X-Auth-key: CLOUDFLARE_API_KEY\" \\\n  --data \"$(echo $PAYLOAD)\" \\\n  https://api.cloudflare.com/client/v4/graphql/","position":{"start":{"line":10,"column":1,"offset":565},"end":{"line":55,"column":4,"offset":1839},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The results returned will be in JSON (as requested), so piping the output to ","position":{"start":{"line":57,"column":1,"offset":1841},"end":{"line":57,"column":78,"offset":1918},"indent":[]}},{"type":"inlineCode","value":"jq","position":{"start":{"line":57,"column":78,"offset":1918},"end":{"line":57,"column":82,"offset":1922},"indent":[]}},{"type":"text","value":" will make them easier to read, e.g.,:","position":{"start":{"line":57,"column":82,"offset":1922},"end":{"line":57,"column":120,"offset":1960},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1841},"end":{"line":57,"column":120,"offset":1960},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"curl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Auth-Email: CLOUDFLARE_EMAIL\" \\\n  -H \"X-Auth-key: CLOUDFLARE_API_KEY\" \\\n  --data \"$(echo $PAYLOAD)\" \\\n  https://api.cloudflare.com/client/v4/graphql/ | jq .\n{\n  \"data\": {\n    \"viewer\": {\n      \"accounts\": [\n        {\n          \"workersInvocationsAdaptive\": [\n            {\n              \"dimensions\": {\n                \"datetime\": \"2020-05-04T18:10:35Z\",\n                \"scriptName\": \"worker-subrequest-test-client\",\n                \"status\": \"success\"\n              },\n              \"quantiles\": {\n                \"cpuTimeP50\": 206,\n                \"cpuTimeP99\": 206\n              },\n              \"sum\": {\n                \"errors\": 0,\n                \"requests\": 1,\n                \"subrequests\": 0\n              }\n            },\n            {\n              \"dimensions\": {\n                \"datetime\": \"2020-05-04T18:10:34Z\",\n                \"scriptName\": \"worker-subrequest-test-client\",\n                \"status\": \"success\"\n              },\n              \"quantiles\": {\n                \"cpuTimeP50\": 291,\n                \"cpuTimeP99\": 291\n              },\n              \"sum\": {\n                \"errors\": 0,\n                \"requests\": 1,\n                \"subrequests\": 0\n              }\n            },\n            {\n              \"dimensions\": {\n                \"datetime\": \"2020-05-04T18:10:49Z\",\n                \"scriptName\": \"worker-subrequest-test-client\",\n                \"status\": \"success\"\n              },\n              \"quantiles\": {\n                \"cpuTimeP50\": 212.5,\n                \"cpuTimeP99\": 261.19\n              },\n              \"sum\": {\n                \"errors\": 0,\n                \"requests\": 4,\n                \"subrequests\": 0\n              }\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"errors\": null\n}","position":{"start":{"line":59,"column":1,"offset":1962},"end":{"line":128,"column":4,"offset":3781},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Querying Workers Metrics with GraphQL\",\"pcx-content-type\":\"interim\"}","position":{"start":{"line":131,"column":1,"offset":3784},"end":{"line":131,"column":107,"offset":3890},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":131,"column":107,"offset":3890}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Querying Workers Metrics with GraphQL\",\n  \"pcx-content-type\": \"interim\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"querying-workers-metrics-with-graphql\"\n  }, \"Querying Workers Metrics with GraphQL\"), mdx(\"p\", null, \"In this example, we're going to use the GraphQL Analytics API to query for Workers Metrics over a specified time period. We can query up to one week of data for dates up to three months ago.\"), mdx(\"p\", null, \"The following API call will request a Worker script's metrics over a one day period, and output the requested fields. Be sure to replace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CLOUDFLARE_EMAIL\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CLOUDFLARE_API_KEY\"), \" with your email and API credentials, and adjust the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"datetimeStart\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"datetimeEnd\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accountTag\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scriptName\"), \" variables as needed.\"), mdx(\"h2\", {\n    \"id\": \"api-call\"\n  }, \"API Call\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"CLOUDFLARE_EMAIL=<CLOUDFLARE_EMAIL>\\nCLOUDFLARE_API_KEY=<CLOUDFLARE_API_KEY>\\nPAYLOAD='{ \\\"query\\\":\\n  \\\"query GetWorkersAnalytics($accountTag: string, $datetimeStart: string, $datetimeEnd: string, $scriptName: string) {\\n      viewer {\\n        accounts(filter: {accountTag: $accountTag}) {\\n          workersInvocationsAdaptive(limit: 100, filter: {\\n            scriptName: $scriptName,\\n            datetime_geq: $datetimeStart,\\n            datetime_leq: $datetimeEnd\\n          }) {\\n            sum {\\n              subrequests\\n              requests\\n              errors\\n            }\\n            quantiles {\\n              cpuTimeP50\\n              cpuTimeP99\\n            }\\n            dimensions{\\n              datetime\\n              scriptName\\n              status\\n            }\\n          }\\n        }\\n      }\\n    }\\\",\\n    \\\"variables\\\": {\\n      \\\"accountTag\\\": \\\"90f518ca7113dc0a91513972ba243ba5\\\",\\n      \\\"datetimeStart\\\": \\\"2020-05-04T00:00:00.000Z\\\",\\n      \\\"datetimeEnd\\\": \\\"2020-05-04T00:00:00.000Z\\\",\\n      \\\"scriptName\\\": \\\"worker-subrequest-test-client\\\"\\n    }\\n  }'\\n\\ncurl \\\\\\n  -X POST \\\\\\n  -H \\\"Content-Type: application/json\\\" \\\\\\n  -H \\\"X-Auth-Email: CLOUDFLARE_EMAIL\\\" \\\\\\n  -H \\\"X-Auth-key: CLOUDFLARE_API_KEY\\\" \\\\\\n  --data \\\"$(echo $PAYLOAD)\\\" \\\\\\n  https://api.cloudflare.com/client/v4/graphql/\\n\")), mdx(\"p\", null, \"The results returned will be in JSON (as requested), so piping the output to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jq\"), \" will make them easier to read, e.g.,:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"curl \\\\\\n  -X POST \\\\\\n  -H \\\"Content-Type: application/json\\\" \\\\\\n  -H \\\"X-Auth-Email: CLOUDFLARE_EMAIL\\\" \\\\\\n  -H \\\"X-Auth-key: CLOUDFLARE_API_KEY\\\" \\\\\\n  --data \\\"$(echo $PAYLOAD)\\\" \\\\\\n  https://api.cloudflare.com/client/v4/graphql/ | jq .\\n{\\n  \\\"data\\\": {\\n    \\\"viewer\\\": {\\n      \\\"accounts\\\": [\\n        {\\n          \\\"workersInvocationsAdaptive\\\": [\\n            {\\n              \\\"dimensions\\\": {\\n                \\\"datetime\\\": \\\"2020-05-04T18:10:35Z\\\",\\n                \\\"scriptName\\\": \\\"worker-subrequest-test-client\\\",\\n                \\\"status\\\": \\\"success\\\"\\n              },\\n              \\\"quantiles\\\": {\\n                \\\"cpuTimeP50\\\": 206,\\n                \\\"cpuTimeP99\\\": 206\\n              },\\n              \\\"sum\\\": {\\n                \\\"errors\\\": 0,\\n                \\\"requests\\\": 1,\\n                \\\"subrequests\\\": 0\\n              }\\n            },\\n            {\\n              \\\"dimensions\\\": {\\n                \\\"datetime\\\": \\\"2020-05-04T18:10:34Z\\\",\\n                \\\"scriptName\\\": \\\"worker-subrequest-test-client\\\",\\n                \\\"status\\\": \\\"success\\\"\\n              },\\n              \\\"quantiles\\\": {\\n                \\\"cpuTimeP50\\\": 291,\\n                \\\"cpuTimeP99\\\": 291\\n              },\\n              \\\"sum\\\": {\\n                \\\"errors\\\": 0,\\n                \\\"requests\\\": 1,\\n                \\\"subrequests\\\": 0\\n              }\\n            },\\n            {\\n              \\\"dimensions\\\": {\\n                \\\"datetime\\\": \\\"2020-05-04T18:10:49Z\\\",\\n                \\\"scriptName\\\": \\\"worker-subrequest-test-client\\\",\\n                \\\"status\\\": \\\"success\\\"\\n              },\\n              \\\"quantiles\\\": {\\n                \\\"cpuTimeP50\\\": 212.5,\\n                \\\"cpuTimeP99\\\": 261.19\\n              },\\n              \\\"sum\\\": {\\n                \\\"errors\\\": 0,\\n                \\\"requests\\\": 4,\\n                \\\"subrequests\\\": 0\\n              }\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  },\\n  \\\"errors\\\": null\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Querying Workers Metrics with GraphQL\",\n  \"pcx-content-type\": \"interim\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"querying-workers-metrics-with-graphql\"\n    }}>{`Querying Workers Metrics with GraphQL`}</h1>\n    <p>{`In this example, we're going to use the GraphQL Analytics API to query for Workers Metrics over a specified time period. We can query up to one week of data for dates up to three months ago.`}</p>\n    <p>{`The following API call will request a Worker script's metrics over a one day period, and output the requested fields. Be sure to replace `}<inlineCode parentName=\"p\">{`CLOUDFLARE_EMAIL`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`CLOUDFLARE_API_KEY`}</inlineCode>{` with your email and API credentials, and adjust the `}<inlineCode parentName=\"p\">{`datetimeStart`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`datetimeEnd`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`accountTag`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`scriptName`}</inlineCode>{` variables as needed.`}</p>\n    <h2 {...{\n      \"id\": \"api-call\"\n    }}>{`API Call`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`CLOUDFLARE_EMAIL=<CLOUDFLARE_EMAIL>\nCLOUDFLARE_API_KEY=<CLOUDFLARE_API_KEY>\nPAYLOAD='{ \"query\":\n  \"query GetWorkersAnalytics($accountTag: string, $datetimeStart: string, $datetimeEnd: string, $scriptName: string) {\n      viewer {\n        accounts(filter: {accountTag: $accountTag}) {\n          workersInvocationsAdaptive(limit: 100, filter: {\n            scriptName: $scriptName,\n            datetime_geq: $datetimeStart,\n            datetime_leq: $datetimeEnd\n          }) {\n            sum {\n              subrequests\n              requests\n              errors\n            }\n            quantiles {\n              cpuTimeP50\n              cpuTimeP99\n            }\n            dimensions{\n              datetime\n              scriptName\n              status\n            }\n          }\n        }\n      }\n    }\",\n    \"variables\": {\n      \"accountTag\": \"90f518ca7113dc0a91513972ba243ba5\",\n      \"datetimeStart\": \"2020-05-04T00:00:00.000Z\",\n      \"datetimeEnd\": \"2020-05-04T00:00:00.000Z\",\n      \"scriptName\": \"worker-subrequest-test-client\"\n    }\n  }'\n\ncurl \\\\\n  -X POST \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -H \"X-Auth-Email: CLOUDFLARE_EMAIL\" \\\\\n  -H \"X-Auth-key: CLOUDFLARE_API_KEY\" \\\\\n  --data \"$(echo $PAYLOAD)\" \\\\\n  https://api.cloudflare.com/client/v4/graphql/\n`}</code></pre>\n    <p>{`The results returned will be in JSON (as requested), so piping the output to `}<inlineCode parentName=\"p\">{`jq`}</inlineCode>{` will make them easier to read, e.g.,:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`curl \\\\\n  -X POST \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -H \"X-Auth-Email: CLOUDFLARE_EMAIL\" \\\\\n  -H \"X-Auth-key: CLOUDFLARE_API_KEY\" \\\\\n  --data \"$(echo $PAYLOAD)\" \\\\\n  https://api.cloudflare.com/client/v4/graphql/ | jq .\n{\n  \"data\": {\n    \"viewer\": {\n      \"accounts\": [\n        {\n          \"workersInvocationsAdaptive\": [\n            {\n              \"dimensions\": {\n                \"datetime\": \"2020-05-04T18:10:35Z\",\n                \"scriptName\": \"worker-subrequest-test-client\",\n                \"status\": \"success\"\n              },\n              \"quantiles\": {\n                \"cpuTimeP50\": 206,\n                \"cpuTimeP99\": 206\n              },\n              \"sum\": {\n                \"errors\": 0,\n                \"requests\": 1,\n                \"subrequests\": 0\n              }\n            },\n            {\n              \"dimensions\": {\n                \"datetime\": \"2020-05-04T18:10:34Z\",\n                \"scriptName\": \"worker-subrequest-test-client\",\n                \"status\": \"success\"\n              },\n              \"quantiles\": {\n                \"cpuTimeP50\": 291,\n                \"cpuTimeP99\": 291\n              },\n              \"sum\": {\n                \"errors\": 0,\n                \"requests\": 1,\n                \"subrequests\": 0\n              }\n            },\n            {\n              \"dimensions\": {\n                \"datetime\": \"2020-05-04T18:10:49Z\",\n                \"scriptName\": \"worker-subrequest-test-client\",\n                \"status\": \"success\"\n              },\n              \"quantiles\": {\n                \"cpuTimeP50\": 212.5,\n                \"cpuTimeP99\": 261.19\n              },\n              \"sum\": {\n                \"errors\": 0,\n                \"requests\": 4,\n                \"subrequests\": 0\n              }\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"errors\": null\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}