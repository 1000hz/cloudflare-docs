{"expireTime":9007200889996144000,"key":"gatsby-plugin-mdx-entire-payload-54942a0338e7db494134b03f36667223-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Use curl to query the Analytics API","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":38,"offset":38},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":38,"offset":38},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can submit a ","position":{"start":{"line":4,"column":1,"offset":40},"end":{"line":4,"column":18,"offset":57},"indent":[]}},{"type":"link","title":null,"url":"/graphql-api/getting-started/compose-graphql-query","children":[{"type":"text","value":"query built with the GraphiQL client","position":{"start":{"line":4,"column":19,"offset":58},"end":{"line":4,"column":55,"offset":94},"indent":[]}}],"position":{"start":{"line":4,"column":18,"offset":57},"end":{"line":4,"column":108,"offset":147},"indent":[]}},{"type":"text","value":" as the payload in the ","position":{"start":{"line":4,"column":108,"offset":147},"end":{"line":4,"column":131,"offset":170},"indent":[]}},{"type":"inlineCode","value":"data","position":{"start":{"line":4,"column":131,"offset":170},"end":{"line":4,"column":137,"offset":176},"indent":[]}},{"type":"text","value":" field of a POST request to the Analytics API.","position":{"start":{"line":4,"column":137,"offset":176},"end":{"line":4,"column":183,"offset":222},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":40},"end":{"line":4,"column":183,"offset":222},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The advantage of executing a request with ","position":{"start":{"line":6,"column":1,"offset":224},"end":{"line":6,"column":43,"offset":266},"indent":[]}},{"type":"link","title":null,"url":"https://curl.se/","children":[{"type":"text","value":"curl","position":{"start":{"line":6,"column":44,"offset":267},"end":{"line":6,"column":48,"offset":271},"indent":[]}}],"position":{"start":{"line":6,"column":43,"offset":266},"end":{"line":6,"column":67,"offset":290},"indent":[]}},{"type":"text","value":" is that you can redirect the response to a file and execute other post processing methods.","position":{"start":{"line":6,"column":67,"offset":290},"end":{"line":6,"column":158,"offset":381},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":224},"end":{"line":6,"column":158,"offset":381},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The GraphQL endpoint requires valid JSON, so you must pass the query as the ","position":{"start":{"line":8,"column":1,"offset":383},"end":{"line":8,"column":77,"offset":459},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"value","position":{"start":{"line":8,"column":78,"offset":460},"end":{"line":8,"column":83,"offset":465},"indent":[]}}],"position":{"start":{"line":8,"column":77,"offset":459},"end":{"line":8,"column":84,"offset":466},"indent":[]}},{"type":"text","value":" part of a JSON ","position":{"start":{"line":8,"column":84,"offset":466},"end":{"line":8,"column":100,"offset":482},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"key:value","position":{"start":{"line":8,"column":101,"offset":483},"end":{"line":8,"column":110,"offset":492},"indent":[]}}],"position":{"start":{"line":8,"column":100,"offset":482},"end":{"line":8,"column":111,"offset":493},"indent":[]}},{"type":"text","value":" pair with a key named ","position":{"start":{"line":8,"column":111,"offset":493},"end":{"line":8,"column":134,"offset":516},"indent":[]}},{"type":"inlineCode","value":"query","position":{"start":{"line":8,"column":134,"offset":516},"end":{"line":8,"column":141,"offset":523},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":8,"column":141,"offset":523},"end":{"line":8,"column":142,"offset":524},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":383},"end":{"line":8,"column":142,"offset":524},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Pass the list of variables in another JSON ","position":{"start":{"line":10,"column":1,"offset":526},"end":{"line":10,"column":44,"offset":569},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"key:value","position":{"start":{"line":10,"column":45,"offset":570},"end":{"line":10,"column":54,"offset":579},"indent":[]}}],"position":{"start":{"line":10,"column":44,"offset":569},"end":{"line":10,"column":55,"offset":580},"indent":[]}},{"type":"text","value":" pair with a key named ","position":{"start":{"line":10,"column":55,"offset":580},"end":{"line":10,"column":78,"offset":603},"indent":[]}},{"type":"inlineCode","value":"variables","position":{"start":{"line":10,"column":78,"offset":603},"end":{"line":10,"column":89,"offset":614},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":10,"column":89,"offset":614},"end":{"line":10,"column":90,"offset":615},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":526},"end":{"line":10,"column":90,"offset":615},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The script below returns the firewall events in one zone over the last 24 hours:","position":{"start":{"line":12,"column":1,"offset":617},"end":{"line":12,"column":81,"offset":697},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":617},"end":{"line":12,"column":81,"offset":697},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"---\nheader: Example bash script that uses curl to query Analytics API\n---\n#!/bin/bash\n#\n# This script fetches the last 24 hours of firewall events for the ZoneID passed\n# in as the first parameter using the global key passed in as the second parameter.\n######################################################################################\n \nZoneID=\"$1\"\nglobal_key=\"$2\"\nEmail=\"user@domain.com\"\n#\n# Calculate 24 hours back and produce the start and end times in the appropriate format.\nback_seconds=60*60*24  # 24 hours\nend_epoch=$(date +'%s')\nlet start_epoch=$end_epoch-$back_seconds\nstart_date=$(date --date=\"@$start_epoch\" +'%Y-%m-%dT%H:%M:%SZ')\nend_date=$(date --date=\"@$end_epoch\" +'%Y-%m-%dT%H:%M:%SZ')\n \nPAYLOAD='{ \"query\":\n  \"query {\n    viewer {\n      zones(filter: { zoneTag: $zoneTag }) {\n      firewallEventsAdaptive(\n        filter: $filter\n        limit: 10000\n        orderBy: [datetime_DESC, rayName_DESC]\n      ) {\n          action,\n          datetime,\n          rayName,\n          clientRequestHTTPHost,\n          userAgent\n        }\n      }\n    }\n  }\",'\nPAYLOAD=\"$PAYLOAD\n\n  \\\"variables\\\": {\n    \\\"zoneTag\\\": \\\"$ZoneID\\\",\n    \\\"filter\\\": {\n      \\\"datetime_gt\\\": \\\"$start_date\\\",\n      \\\"datetime_leq\\\": \\\"$end_date\\\"\n    }\n  }\n}\"\n\n# Run query to GraphQL API endpoint\n\ncurl -s -X POST -H \"Content-Type: application/json\" -H \"X-Auth-Email: $Email\" -H  \"X-Auth-Key: $global_key\" --data \"$(echo $PAYLOAD)\" https://api.cloudflare.com/client/v4/graphql/","position":{"start":{"line":14,"column":1,"offset":699},"end":{"line":67,"column":4,"offset":2177},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"order\":60,\"pcx-content-type\":\"interim\"}","position":{"start":{"line":70,"column":1,"offset":2180},"end":{"line":70,"column":70,"offset":2249},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":70,"column":70,"offset":2249}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 60,\n  \"pcx-content-type\": \"interim\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"use-curl-to-query-the-analytics-api\"\n  }, \"Use curl to query the Analytics API\"), mdx(\"p\", null, \"You can submit a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/graphql-api/getting-started/compose-graphql-query\"\n  }, \"query built with the GraphiQL client\"), \" as the payload in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" field of a POST request to the Analytics API.\"), mdx(\"p\", null, \"The advantage of executing a request with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://curl.se/\"\n  }, \"curl\"), \" is that you can redirect the response to a file and execute other post processing methods.\"), mdx(\"p\", null, \"The GraphQL endpoint requires valid JSON, so you must pass the query as the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"value\"), \" part of a JSON \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"key:value\"), \" pair with a key named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query\"), \".\"), mdx(\"p\", null, \"Pass the list of variables in another JSON \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"key:value\"), \" pair with a key named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variables\"), \".\"), mdx(\"p\", null, \"The script below returns the firewall events in one zone over the last 24 hours:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"---\\nheader: Example bash script that uses curl to query Analytics API\\n---\\n#!/bin/bash\\n#\\n# This script fetches the last 24 hours of firewall events for the ZoneID passed\\n# in as the first parameter using the global key passed in as the second parameter.\\n######################################################################################\\n \\nZoneID=\\\"$1\\\"\\nglobal_key=\\\"$2\\\"\\nEmail=\\\"user@domain.com\\\"\\n#\\n# Calculate 24 hours back and produce the start and end times in the appropriate format.\\nback_seconds=60*60*24  # 24 hours\\nend_epoch=$(date +'%s')\\nlet start_epoch=$end_epoch-$back_seconds\\nstart_date=$(date --date=\\\"@$start_epoch\\\" +'%Y-%m-%dT%H:%M:%SZ')\\nend_date=$(date --date=\\\"@$end_epoch\\\" +'%Y-%m-%dT%H:%M:%SZ')\\n \\nPAYLOAD='{ \\\"query\\\":\\n  \\\"query {\\n    viewer {\\n      zones(filter: { zoneTag: $zoneTag }) {\\n      firewallEventsAdaptive(\\n        filter: $filter\\n        limit: 10000\\n        orderBy: [datetime_DESC, rayName_DESC]\\n      ) {\\n          action,\\n          datetime,\\n          rayName,\\n          clientRequestHTTPHost,\\n          userAgent\\n        }\\n      }\\n    }\\n  }\\\",'\\nPAYLOAD=\\\"$PAYLOAD\\n\\n  \\\\\\\"variables\\\\\\\": {\\n    \\\\\\\"zoneTag\\\\\\\": \\\\\\\"$ZoneID\\\\\\\",\\n    \\\\\\\"filter\\\\\\\": {\\n      \\\\\\\"datetime_gt\\\\\\\": \\\\\\\"$start_date\\\\\\\",\\n      \\\\\\\"datetime_leq\\\\\\\": \\\\\\\"$end_date\\\\\\\"\\n    }\\n  }\\n}\\\"\\n\\n# Run query to GraphQL API endpoint\\n\\ncurl -s -X POST -H \\\"Content-Type: application/json\\\" -H \\\"X-Auth-Email: $Email\\\" -H  \\\"X-Auth-Key: $global_key\\\" --data \\\"$(echo $PAYLOAD)\\\" https://api.cloudflare.com/client/v4/graphql/\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"order\": 60,\n  \"pcx-content-type\": \"interim\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"use-curl-to-query-the-analytics-api\"\n    }}>{`Use curl to query the Analytics API`}</h1>\n    <p>{`You can submit a `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-api/getting-started/compose-graphql-query\"\n      }}>{`query built with the GraphiQL client`}</a>{` as the payload in the `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` field of a POST request to the Analytics API.`}</p>\n    <p>{`The advantage of executing a request with `}<a parentName=\"p\" {...{\n        \"href\": \"https://curl.se/\"\n      }}>{`curl`}</a>{` is that you can redirect the response to a file and execute other post processing methods.`}</p>\n    <p>{`The GraphQL endpoint requires valid JSON, so you must pass the query as the `}<em parentName=\"p\">{`value`}</em>{` part of a JSON `}<em parentName=\"p\">{`key:value`}</em>{` pair with a key named `}<inlineCode parentName=\"p\">{`query`}</inlineCode>{`.`}</p>\n    <p>{`Pass the list of variables in another JSON `}<em parentName=\"p\">{`key:value`}</em>{` pair with a key named `}<inlineCode parentName=\"p\">{`variables`}</inlineCode>{`.`}</p>\n    <p>{`The script below returns the firewall events in one zone over the last 24 hours:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`---\nheader: Example bash script that uses curl to query Analytics API\n---\n#!/bin/bash\n#\n# This script fetches the last 24 hours of firewall events for the ZoneID passed\n# in as the first parameter using the global key passed in as the second parameter.\n######################################################################################\n \nZoneID=\"$1\"\nglobal_key=\"$2\"\nEmail=\"user@domain.com\"\n#\n# Calculate 24 hours back and produce the start and end times in the appropriate format.\nback_seconds=60*60*24  # 24 hours\nend_epoch=$(date +'%s')\nlet start_epoch=$end_epoch-$back_seconds\nstart_date=$(date --date=\"@$start_epoch\" +'%Y-%m-%dT%H:%M:%SZ')\nend_date=$(date --date=\"@$end_epoch\" +'%Y-%m-%dT%H:%M:%SZ')\n \nPAYLOAD='{ \"query\":\n  \"query {\n    viewer {\n      zones(filter: { zoneTag: $zoneTag }) {\n      firewallEventsAdaptive(\n        filter: $filter\n        limit: 10000\n        orderBy: [datetime_DESC, rayName_DESC]\n      ) {\n          action,\n          datetime,\n          rayName,\n          clientRequestHTTPHost,\n          userAgent\n        }\n      }\n    }\n  }\",'\nPAYLOAD=\"$PAYLOAD\n\n  \\\\\"variables\\\\\": {\n    \\\\\"zoneTag\\\\\": \\\\\"$ZoneID\\\\\",\n    \\\\\"filter\\\\\": {\n      \\\\\"datetime_gt\\\\\": \\\\\"$start_date\\\\\",\n      \\\\\"datetime_leq\\\\\": \\\\\"$end_date\\\\\"\n    }\n  }\n}\"\n\n# Run query to GraphQL API endpoint\n\ncurl -s -X POST -H \"Content-Type: application/json\" -H \"X-Auth-Email: $Email\" -H  \"X-Auth-Key: $global_key\" --data \"$(echo $PAYLOAD)\" https://api.cloudflare.com/client/v4/graphql/\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}