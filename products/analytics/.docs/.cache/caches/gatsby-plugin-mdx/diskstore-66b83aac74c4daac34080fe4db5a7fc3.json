{"expireTime":9007200889996145000,"key":"gatsby-plugin-mdx-entire-payload-051f395a7d9049cf7f1c518934fe1a20-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Nested Structures","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":20,"offset":20},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":20,"offset":20},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Two kinds of nested structures that behave in special ways are supported: ","position":{"start":{"line":4,"column":1,"offset":22},"end":{"line":4,"column":75,"offset":96},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"arrays","position":{"start":{"line":4,"column":77,"offset":98},"end":{"line":4,"column":83,"offset":104},"indent":[]}}],"position":{"start":{"line":4,"column":75,"offset":96},"end":{"line":4,"column":85,"offset":106},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":4,"column":85,"offset":106},"end":{"line":4,"column":90,"offset":111},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"maps","position":{"start":{"line":4,"column":92,"offset":113},"end":{"line":4,"column":96,"offset":117},"indent":[]}}],"position":{"start":{"line":4,"column":90,"offset":111},"end":{"line":4,"column":98,"offset":119},"indent":[]}},{"type":"text","value":". Fields of either of these types are arrays; when they're part part of query result, which is already an array of objects, they become nested arrays.","position":{"start":{"line":4,"column":98,"offset":119},"end":{"line":4,"column":248,"offset":269},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":22},"end":{"line":4,"column":248,"offset":269},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Arrays","position":{"start":{"line":6,"column":4,"offset":274},"end":{"line":6,"column":10,"offset":280},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":271},"end":{"line":6,"column":10,"offset":280},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Arrays behave as a special kind of single value. There is no way to paginate through, filter, filter by, group, or group by the array.","position":{"start":{"line":8,"column":1,"offset":282},"end":{"line":8,"column":135,"offset":416},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":282},"end":{"line":8,"column":135,"offset":416},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"On the other hand, you can choose which fields of the underlying type you want fetched.","position":{"start":{"line":10,"column":1,"offset":418},"end":{"line":10,"column":88,"offset":505},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":418},"end":{"line":10,"column":88,"offset":505},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, given arrays like this:","position":{"start":{"line":12,"column":1,"offset":507},"end":{"line":12,"column":37,"offset":543},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":507},"end":{"line":12,"column":37,"offset":543},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"type SubRequest {\n    url: String!\n    status: Int\n}\n\ntype Request {\n    date: Date!\n    datetime: DateTime!\n    subRequests: [SubRequest!]!\n}","position":{"start":{"line":14,"column":1,"offset":545},"end":{"line":25,"column":5,"offset":707},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can run a query to get the status by subrequest:","position":{"start":{"line":27,"column":1,"offset":709},"end":{"line":27,"column":53,"offset":761},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":709},"end":{"line":27,"column":53,"offset":761},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"{\n    requests {\n        date\n        subRequests {\n            # discard the url, only need the status\n            status\n        }\n    }\n}","position":{"start":{"line":28,"column":1,"offset":762},"end":{"line":38,"column":5,"offset":922},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The results would be:","position":{"start":{"line":40,"column":1,"offset":924},"end":{"line":40,"column":22,"offset":945},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":924},"end":{"line":40,"column":22,"offset":945},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"{\n    \"requests\": [\n        {\n            \"date\": \"2018-01-01\",\n            \"subRequests\": [{\"status\": 404}, {\"status\": 200}, {\"status\": 404}]\n        },\n        {\n            \"date\": \"2018-01-01\",\n            \"subRequests\": [{\"status\": 200}]\n        }\n    ]\n}","position":{"start":{"line":41,"column":1,"offset":946},"end":{"line":54,"column":5,"offset":1226},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Maps","position":{"start":{"line":56,"column":4,"offset":1231},"end":{"line":56,"column":8,"offset":1235},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1228},"end":{"line":56,"column":8,"offset":1235},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Maps behave like arrays, but can be grouped using the ","position":{"start":{"line":58,"column":1,"offset":1237},"end":{"line":58,"column":55,"offset":1291},"indent":[]}},{"type":"inlineCode","value":"sum","position":{"start":{"line":58,"column":55,"offset":1291},"end":{"line":58,"column":60,"offset":1296},"indent":[]}},{"type":"text","value":" function. They are used in aggregated data sets, such as ","position":{"start":{"line":58,"column":60,"offset":1296},"end":{"line":58,"column":118,"offset":1354},"indent":[]}},{"type":"inlineCode","value":"httpRequest1dGroups","position":{"start":{"line":58,"column":118,"offset":1354},"end":{"line":58,"column":139,"offset":1375},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":58,"column":139,"offset":1375},"end":{"line":58,"column":140,"offset":1376},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1237},"end":{"line":58,"column":140,"offset":1376},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Example maps:","position":{"start":{"line":60,"column":1,"offset":1378},"end":{"line":60,"column":14,"offset":1391},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1378},"end":{"line":60,"column":14,"offset":1391},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"type URLStatsMapElem {\n    url: String!\n    requests: Int\n    bytes: Int\n}\n\ntype Request {\n    date: Date!\n    datetime: DateTime!\n    urlStatsMap: [URLStatsMapElem!]!\n}","position":{"start":{"line":61,"column":1,"offset":1392},"end":{"line":73,"column":5,"offset":1581},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Query:","position":{"start":{"line":75,"column":1,"offset":1583},"end":{"line":75,"column":7,"offset":1589},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":1583},"end":{"line":75,"column":7,"offset":1589},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"{\n    requests {\n        sum {\n            urlStatsMap {\n                url\n                requests\n                bytes\n            }\n        }\n        dimensions {\n            date\n        }\n    }\n}","position":{"start":{"line":76,"column":1,"offset":1590},"end":{"line":91,"column":5,"offset":1813},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Response:","position":{"start":{"line":93,"column":1,"offset":1815},"end":{"line":93,"column":10,"offset":1824},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":1815},"end":{"line":93,"column":10,"offset":1824},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"{\n    \"requests\": [\n        {\n            \"sum\": {\n                \"urlStatsMap\": [\n                    {\n                        \"url\": \"hello-world.org/1\",\n                        \"requests\": 123,\n                        \"bytes\": 1024\n                    },\n                    {\n                        \"url\": \"hello-world.org/10\",\n                        \"requests\": 1230,\n                        \"bytes\": 10240\n                    }\n                ]\n            }\n            \"dimensions\" {\n                \"date\": \"2018-10-19\"\n            }\n        },\n        ...\n    ]\n}","position":{"start":{"line":94,"column":1,"offset":1825},"end":{"line":119,"column":5,"offset":2423},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Examples","position":{"start":{"line":121,"column":4,"offset":2428},"end":{"line":121,"column":12,"offset":2436},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2425},"end":{"line":121,"column":12,"offset":2436},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Query array fields in raw data sets:","position":{"start":{"line":123,"column":1,"offset":2438},"end":{"line":123,"column":37,"offset":2474},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":2438},"end":{"line":123,"column":37,"offset":2474},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"query NestedFields($zoneTag: string, $dateStart: string, $dateEnd: string, $datetimeStart: string, $datetimeEnd: string) {\n      viewer {\n        zones(filter: {zoneTag: $zoneTag}) {\n          events(limit: 2, filter: {datetime_geq: $datetimeStart,datetime_leq: $datetimeEnd}){\n            matches {\n              ruleId\n              action\n              source\n            }\n          }\n        }\n      }\n}","position":{"start":{"line":124,"column":1,"offset":2475},"end":{"line":138,"column":5,"offset":2903},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Example response:","position":{"start":{"line":140,"column":1,"offset":2905},"end":{"line":140,"column":18,"offset":2922},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":2905},"end":{"line":140,"column":18,"offset":2922},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"{\n  \"data\": {\n    \"viewer\": {\n      \"zones\": [\n        {\n          \"events\": [\n            {\n              \"matches\": [\n                {\n                  \"action\": \"allow\",\n                  \"ruleId\": \"rule-id-one\",\n                  \"source\": \"asn\"\n                },\n                {\n                  \"action\": \"block\",\n                  \"ruleId\": \"rule-id-two\",\n                  \"source\": \"asn\"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"errors\": null\n}","position":{"start":{"line":141,"column":1,"offset":2923},"end":{"line":169,"column":5,"offset":3453},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Query maps fields in aggregated data sets:","position":{"start":{"line":171,"column":1,"offset":3455},"end":{"line":171,"column":43,"offset":3497},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":3455},"end":{"line":171,"column":43,"offset":3497},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"query MapCapacity($zoneTag: string, $dateStart: string, $dateEnd: string, $datetimeStart: string, $datetimeEnd: string) {\n    viewer {\n        zones(filter: {zoneTag: $zoneTag}) {\n            httpRequests1mGroups(\n                limit: 10,\n                filter: {date_geq: $dateStart, date_leq: $dateEnd, datetime_geq: $datetimeStart, datetime_lt: $datetimeEnd}) {\n                sum {\n                    countryMap {\n                        clientCountryName\n                        requests\n                        bytes\n                        threats\n                    }\n                }\n                dimensions {\n                    datetimeHour\n                }\n            }\n        }\n    }\n}","position":{"start":{"line":172,"column":1,"offset":3498},"end":{"line":194,"column":5,"offset":4229},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Example response:","position":{"start":{"line":196,"column":1,"offset":4231},"end":{"line":196,"column":18,"offset":4248},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":4231},"end":{"line":196,"column":18,"offset":4248},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"{\n  \"data\": {\n    \"viewer\": {\n      \"zones\": [\n        {\n          \"httpRequests1mGroups\": [\n            {\n              \"dimensions\": {\n                \"datetime\": \"2019-03-08T17:00:00Z\"\n              },\n              \"sum\": {\n                \"countryMap\": [\n                  {\n                    \"bytes\": 51911317,\n                    \"clientCountryName\": \"XK\",\n                    \"requests\": 4492,\n                    \"threats\": 0\n                  },\n                  {\n                    \"bytes\": 1816103586,\n                    \"clientCountryName\": \"T1\",\n                    \"requests\": 132423,\n                    \"threats\": 0\n                  },\n                  ...\n                ]\n              }\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"errors\": null\n}","position":{"start":{"line":197,"column":1,"offset":4249},"end":{"line":233,"column":5,"offset":5058},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"order\":16,\"pcx-content-type\":\"reference\"}","position":{"start":{"line":235,"column":1,"offset":5060},"end":{"line":235,"column":72,"offset":5131},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":235,"column":72,"offset":5131}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 16,\n  \"pcx-content-type\": \"reference\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"nested-structures\"\n  }, \"Nested Structures\"), mdx(\"p\", null, \"Two kinds of nested structures that behave in special ways are supported: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arrays\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"maps\"), \". Fields of either of these types are arrays; when they're part part of query result, which is already an array of objects, they become nested arrays.\"), mdx(\"h2\", {\n    \"id\": \"arrays\"\n  }, \"Arrays\"), mdx(\"p\", null, \"Arrays behave as a special kind of single value. There is no way to paginate through, filter, filter by, group, or group by the array.\"), mdx(\"p\", null, \"On the other hand, you can choose which fields of the underlying type you want fetched.\"), mdx(\"p\", null, \"For example, given arrays like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"type SubRequest {\\n    url: String!\\n    status: Int\\n}\\n\\ntype Request {\\n    date: Date!\\n    datetime: DateTime!\\n    subRequests: [SubRequest!]!\\n}\\n\")), mdx(\"p\", null, \"You can run a query to get the status by subrequest:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"{\\n    requests {\\n        date\\n        subRequests {\\n            # discard the url, only need the status\\n            status\\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"The results would be:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"{\\n    \\\"requests\\\": [\\n        {\\n            \\\"date\\\": \\\"2018-01-01\\\",\\n            \\\"subRequests\\\": [{\\\"status\\\": 404}, {\\\"status\\\": 200}, {\\\"status\\\": 404}]\\n        },\\n        {\\n            \\\"date\\\": \\\"2018-01-01\\\",\\n            \\\"subRequests\\\": [{\\\"status\\\": 200}]\\n        }\\n    ]\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"maps\"\n  }, \"Maps\"), mdx(\"p\", null, \"Maps behave like arrays, but can be grouped using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sum\"), \" function. They are used in aggregated data sets, such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"httpRequest1dGroups\"), \".\"), mdx(\"p\", null, \"Example maps:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"type URLStatsMapElem {\\n    url: String!\\n    requests: Int\\n    bytes: Int\\n}\\n\\ntype Request {\\n    date: Date!\\n    datetime: DateTime!\\n    urlStatsMap: [URLStatsMapElem!]!\\n}\\n\")), mdx(\"p\", null, \"Query:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"{\\n    requests {\\n        sum {\\n            urlStatsMap {\\n                url\\n                requests\\n                bytes\\n            }\\n        }\\n        dimensions {\\n            date\\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"Response:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"{\\n    \\\"requests\\\": [\\n        {\\n            \\\"sum\\\": {\\n                \\\"urlStatsMap\\\": [\\n                    {\\n                        \\\"url\\\": \\\"hello-world.org/1\\\",\\n                        \\\"requests\\\": 123,\\n                        \\\"bytes\\\": 1024\\n                    },\\n                    {\\n                        \\\"url\\\": \\\"hello-world.org/10\\\",\\n                        \\\"requests\\\": 1230,\\n                        \\\"bytes\\\": 10240\\n                    }\\n                ]\\n            }\\n            \\\"dimensions\\\" {\\n                \\\"date\\\": \\\"2018-10-19\\\"\\n            }\\n        },\\n        ...\\n    ]\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"p\", null, \"Query array fields in raw data sets:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"query NestedFields($zoneTag: string, $dateStart: string, $dateEnd: string, $datetimeStart: string, $datetimeEnd: string) {\\n      viewer {\\n        zones(filter: {zoneTag: $zoneTag}) {\\n          events(limit: 2, filter: {datetime_geq: $datetimeStart,datetime_leq: $datetimeEnd}){\\n            matches {\\n              ruleId\\n              action\\n              source\\n            }\\n          }\\n        }\\n      }\\n}\\n\")), mdx(\"p\", null, \"Example response:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"{\\n  \\\"data\\\": {\\n    \\\"viewer\\\": {\\n      \\\"zones\\\": [\\n        {\\n          \\\"events\\\": [\\n            {\\n              \\\"matches\\\": [\\n                {\\n                  \\\"action\\\": \\\"allow\\\",\\n                  \\\"ruleId\\\": \\\"rule-id-one\\\",\\n                  \\\"source\\\": \\\"asn\\\"\\n                },\\n                {\\n                  \\\"action\\\": \\\"block\\\",\\n                  \\\"ruleId\\\": \\\"rule-id-two\\\",\\n                  \\\"source\\\": \\\"asn\\\"\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  },\\n  \\\"errors\\\": null\\n}\\n\")), mdx(\"p\", null, \"Query maps fields in aggregated data sets:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"query MapCapacity($zoneTag: string, $dateStart: string, $dateEnd: string, $datetimeStart: string, $datetimeEnd: string) {\\n    viewer {\\n        zones(filter: {zoneTag: $zoneTag}) {\\n            httpRequests1mGroups(\\n                limit: 10,\\n                filter: {date_geq: $dateStart, date_leq: $dateEnd, datetime_geq: $datetimeStart, datetime_lt: $datetimeEnd}) {\\n                sum {\\n                    countryMap {\\n                        clientCountryName\\n                        requests\\n                        bytes\\n                        threats\\n                    }\\n                }\\n                dimensions {\\n                    datetimeHour\\n                }\\n            }\\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"Example response:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"{\\n  \\\"data\\\": {\\n    \\\"viewer\\\": {\\n      \\\"zones\\\": [\\n        {\\n          \\\"httpRequests1mGroups\\\": [\\n            {\\n              \\\"dimensions\\\": {\\n                \\\"datetime\\\": \\\"2019-03-08T17:00:00Z\\\"\\n              },\\n              \\\"sum\\\": {\\n                \\\"countryMap\\\": [\\n                  {\\n                    \\\"bytes\\\": 51911317,\\n                    \\\"clientCountryName\\\": \\\"XK\\\",\\n                    \\\"requests\\\": 4492,\\n                    \\\"threats\\\": 0\\n                  },\\n                  {\\n                    \\\"bytes\\\": 1816103586,\\n                    \\\"clientCountryName\\\": \\\"T1\\\",\\n                    \\\"requests\\\": 132423,\\n                    \\\"threats\\\": 0\\n                  },\\n                  ...\\n                ]\\n              }\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  },\\n  \\\"errors\\\": null\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"order\": 16,\n  \"pcx-content-type\": \"reference\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"nested-structures\"\n    }}>{`Nested Structures`}</h1>\n    <p>{`Two kinds of nested structures that behave in special ways are supported: `}<strong parentName=\"p\">{`arrays`}</strong>{` and `}<strong parentName=\"p\">{`maps`}</strong>{`. Fields of either of these types are arrays; when they're part part of query result, which is already an array of objects, they become nested arrays.`}</p>\n    <h2 {...{\n      \"id\": \"arrays\"\n    }}>{`Arrays`}</h2>\n    <p>{`Arrays behave as a special kind of single value. There is no way to paginate through, filter, filter by, group, or group by the array.`}</p>\n    <p>{`On the other hand, you can choose which fields of the underlying type you want fetched.`}</p>\n    <p>{`For example, given arrays like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`type SubRequest {\n    url: String!\n    status: Int\n}\n\ntype Request {\n    date: Date!\n    datetime: DateTime!\n    subRequests: [SubRequest!]!\n}\n`}</code></pre>\n    <p>{`You can run a query to get the status by subrequest:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n    requests {\n        date\n        subRequests {\n            # discard the url, only need the status\n            status\n        }\n    }\n}\n`}</code></pre>\n    <p>{`The results would be:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n    \"requests\": [\n        {\n            \"date\": \"2018-01-01\",\n            \"subRequests\": [{\"status\": 404}, {\"status\": 200}, {\"status\": 404}]\n        },\n        {\n            \"date\": \"2018-01-01\",\n            \"subRequests\": [{\"status\": 200}]\n        }\n    ]\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"maps\"\n    }}>{`Maps`}</h2>\n    <p>{`Maps behave like arrays, but can be grouped using the `}<inlineCode parentName=\"p\">{`sum`}</inlineCode>{` function. They are used in aggregated data sets, such as `}<inlineCode parentName=\"p\">{`httpRequest1dGroups`}</inlineCode>{`.`}</p>\n    <p>{`Example maps:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`type URLStatsMapElem {\n    url: String!\n    requests: Int\n    bytes: Int\n}\n\ntype Request {\n    date: Date!\n    datetime: DateTime!\n    urlStatsMap: [URLStatsMapElem!]!\n}\n`}</code></pre>\n    <p>{`Query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n    requests {\n        sum {\n            urlStatsMap {\n                url\n                requests\n                bytes\n            }\n        }\n        dimensions {\n            date\n        }\n    }\n}\n`}</code></pre>\n    <p>{`Response:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n    \"requests\": [\n        {\n            \"sum\": {\n                \"urlStatsMap\": [\n                    {\n                        \"url\": \"hello-world.org/1\",\n                        \"requests\": 123,\n                        \"bytes\": 1024\n                    },\n                    {\n                        \"url\": \"hello-world.org/10\",\n                        \"requests\": 1230,\n                        \"bytes\": 10240\n                    }\n                ]\n            }\n            \"dimensions\" {\n                \"date\": \"2018-10-19\"\n            }\n        },\n        ...\n    ]\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`Query array fields in raw data sets:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`query NestedFields($zoneTag: string, $dateStart: string, $dateEnd: string, $datetimeStart: string, $datetimeEnd: string) {\n      viewer {\n        zones(filter: {zoneTag: $zoneTag}) {\n          events(limit: 2, filter: {datetime_geq: $datetimeStart,datetime_leq: $datetimeEnd}){\n            matches {\n              ruleId\n              action\n              source\n            }\n          }\n        }\n      }\n}\n`}</code></pre>\n    <p>{`Example response:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  \"data\": {\n    \"viewer\": {\n      \"zones\": [\n        {\n          \"events\": [\n            {\n              \"matches\": [\n                {\n                  \"action\": \"allow\",\n                  \"ruleId\": \"rule-id-one\",\n                  \"source\": \"asn\"\n                },\n                {\n                  \"action\": \"block\",\n                  \"ruleId\": \"rule-id-two\",\n                  \"source\": \"asn\"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"errors\": null\n}\n`}</code></pre>\n    <p>{`Query maps fields in aggregated data sets:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`query MapCapacity($zoneTag: string, $dateStart: string, $dateEnd: string, $datetimeStart: string, $datetimeEnd: string) {\n    viewer {\n        zones(filter: {zoneTag: $zoneTag}) {\n            httpRequests1mGroups(\n                limit: 10,\n                filter: {date_geq: $dateStart, date_leq: $dateEnd, datetime_geq: $datetimeStart, datetime_lt: $datetimeEnd}) {\n                sum {\n                    countryMap {\n                        clientCountryName\n                        requests\n                        bytes\n                        threats\n                    }\n                }\n                dimensions {\n                    datetimeHour\n                }\n            }\n        }\n    }\n}\n`}</code></pre>\n    <p>{`Example response:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  \"data\": {\n    \"viewer\": {\n      \"zones\": [\n        {\n          \"httpRequests1mGroups\": [\n            {\n              \"dimensions\": {\n                \"datetime\": \"2019-03-08T17:00:00Z\"\n              },\n              \"sum\": {\n                \"countryMap\": [\n                  {\n                    \"bytes\": 51911317,\n                    \"clientCountryName\": \"XK\",\n                    \"requests\": 4492,\n                    \"threats\": 0\n                  },\n                  {\n                    \"bytes\": 1816103586,\n                    \"clientCountryName\": \"T1\",\n                    \"requests\": 132423,\n                    \"threats\": 0\n                  },\n                  ...\n                ]\n              }\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"errors\": null\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}