{"data":{"mdx":{"id":"8d5f3093-6427-594f-86cf-4ac39a5e6680","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 12,\n  \"pcx-content-type\": \"reference\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"zone-analytics-colos-endpoint-to-graphql-analytics\"\n  }, \"Zone Analytics Colos Endpoint to GraphQL Analytics\"), mdx(\"p\", null, \"This guide shows how you might migrate from the deprecated (and soon to be\\nsunset) zone analytics API to the GraphQL API. It provides an example for a\\nplausible use-case of the colos endpoint, then shows how that use-case is\\ntranslated to the GraphQL API. It also explores features of the GraphQL API\\nthat make it more powerful than the API it replaces.\"), mdx(\"p\", null, \"In this example, we want to calculate the number of requests for a particular\\ncolo, broken down by the hour in which the requests occurred. Referring to the\\nzone analytics colos endpoint, we can construct a \\\"curl\\\" which retrieves the\\ndata from the API.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"curl -H \\\"Authorization: Bearer $API_TOKEN\\\" \\\"https://api.cloudflare.com/client/v4/zones/$ZONE_ID/analytics/colos?since=2020-12-10T00:00:00Z\\\"  > colos_endpoint_output.json\\n\")), mdx(\"p\", null, \"This query says:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Given an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"API_TOKEN\"), \" which has Analytics Read access to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZONE_ID\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fetch colos analytics for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ZONE_ID\"), \" with a time range that starts on\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2020-12-10T00:00:00Z\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"since\"), \" paramenter) to now.\")), mdx(\"p\", null, \"The question that we want to answer is: \\\"what is the number of requests for ZHR\\nper hour?\\\" Using the colos endpoint response data and some wrangling by jq we\\ncan answer that question with this command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"cat colos_endpoint_output.json | jq  -c '.result[] | {colo_id: .colo_id, timeseries: .timeseries[]} | {colo_id: .colo_id, timeslot: .timeseries.since, requests: .timeseries.requests.all, bandwidth: .timeseries.bandwidth.all} | select(.requests > 0) | select(.colo_id == \\\"ZRH\\\") '\\n\")), mdx(\"p\", null, \"This jq command is a bit of a mouthful, so let's break it down:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \".result[]\\n\")), mdx(\"p\", null, \"This means \\\"break out the result array into individual json lines\\\"\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"{colo_id: .colo_id, timeseries: .timeseries[]}\\n\")), mdx(\"p\", null, \"This breaks out each json line into multiple json lines. Each resulting line\\ncontains a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colo_id\"), \" and one element of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"timeseries\"), \" array. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"{colo_id: .colo_id, timeslot: .timeseries.since, requests: .timeseries.requests.all, bandwidth: .timeseries.bandwidth.all}\\n\")), mdx(\"p\", null, \"This flattens out the data we are interested in that is inside the timeseries\\nobject of each line.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"select(.requests > 0) | select(.colo_id == \\\"ZRH\\\")\\n\")), mdx(\"p\", null, \"This selects only lines that contain more than 0 requests and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colo_id\"), \" is ZRH.\"), mdx(\"p\", null, \"So the final data we get looks something like this:\"), mdx(\"details\", null, mdx(\"summary\", null, \"Response\"), mdx(\"div\", null, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\\"colo_id\\\":\\\"ZRH\\\",\\\"timeslot\\\":\\\"2020-12-10T00:00:00Z\\\",\\\"requests\\\":601,\\\"bandwidth\\\":683581}\\n{\\\"colo_id\\\":\\\"ZRH\\\",\\\"timeslot\\\":\\\"2020-12-10T01:00:00Z\\\",\\\"requests\\\":484,\\\"bandwidth\\\":550936}\\n{\\\"colo_id\\\":\\\"ZRH\\\",\\\"timeslot\\\":\\\"2020-12-10T02:00:00Z\\\",\\\"requests\\\":326,\\\"bandwidth\\\":370627}\\n{\\\"colo_id\\\":\\\"ZRH\\\",\\\"timeslot\\\":\\\"2020-12-10T03:00:00Z\\\",\\\"requests\\\":354,\\\"bandwidth\\\":402527}\\n{\\\"colo_id\\\":\\\"ZRH\\\",\\\"timeslot\\\":\\\"2020-12-10T04:00:00Z\\\",\\\"requests\\\":446,\\\"bandwidth\\\":507234}\\n{\\\"colo_id\\\":\\\"ZRH\\\",\\\"timeslot\\\":\\\"2020-12-10T05:00:00Z\\\",\\\"requests\\\":692,\\\"bandwidth\\\":787688}\\n{\\\"colo_id\\\":\\\"ZRH\\\",\\\"timeslot\\\":\\\"2020-12-10T06:00:00Z\\\",\\\"requests\\\":1474,\\\"bandwidth\\\":1676166}\\n{\\\"colo_id\\\":\\\"ZRH\\\",\\\"timeslot\\\":\\\"2020-12-10T07:00:00Z\\\",\\\"requests\\\":2839,\\\"bandwidth\\\":3226871}\\n{\\\"colo_id\\\":\\\"ZRH\\\",\\\"timeslot\\\":\\\"2020-12-10T08:00:00Z\\\",\\\"requests\\\":2953,\\\"bandwidth\\\":3358487}\\n{\\\"colo_id\\\":\\\"ZRH\\\",\\\"timeslot\\\":\\\"2020-12-10T09:00:00Z\\\",\\\"requests\\\":2550,\\\"bandwidth\\\":2901823}\\n{\\\"colo_id\\\":\\\"ZRH\\\",\\\"timeslot\\\":\\\"2020-12-10T10:00:00Z\\\",\\\"requests\\\":2203,\\\"bandwidth\\\":2504615}\\n...\\n\")))), mdx(\"p\", null, \"So, how do we do the same thing using the GraphQL API?\"), mdx(\"p\", null, \"The GraphQL API allows us to be much more specific about the data that we want\\nto retrieve. While the colos endpoint forces us to retrieve all the information\\nis has about the breakdown of requests and bandwidth per colo, using the\\nGraphQL API allows us to fetch only the information we are interested in.\"), mdx(\"p\", null, \"The data we want is about HTTP requests. Hence, we use the canonical source for\\nHTTP request data, also known as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"httpRequestsAdaptiveGroups\"), \". This node in\\nGraphQL API allows you to filter and group by almost any dimension of an http\\nrequest imaginable. It is \\\"Adaptive\\\" so responses will be fast since it is\\ndriven by our\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://blog.cloudflare.com/explaining-cloudflares-abr-analytics/\"\n  }, \"\\\"ABR\\\" technology\"), \".\"), mdx(\"p\", null, \"Let's craft a GraphQL API query to retrieve the data we need to answer the\\nquestion: \\\"what is the number of requests for ZHR per hour?\\\" \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"{\\n  viewer {\\n    zones(filter: {zoneTag:\\\"$ZONE_TAG\\\"}) {\\n      httpRequestsAdaptiveGroups(filter: {datetime_gt: \\\"2020-12-10T00:00:00Z\\\", coloCode:\\\"ZRH\\\"}, limit:10000, orderBy: [datetimeHour_ASC]) {\\n        count\\n        sum {\\n          edgeResponseBytes\\n        }\\n        avg {\\n          sampleInterval\\n        }\\n        count\\n        dimensions {\\n          datetimeHour\\n          coloCode\\n        }\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Then we can run it with \\\"curl\\\":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"curl -X POST -H 'Authorization: Bearer $API_TOKEN'  https://api.cloudflare.com/client/v4/graphql -d \\\"@./coloGroups.json\\\" > graphqlColoGroupsResponse.json\\n\")), mdx(\"p\", null, \"We can answer our question in the same way as before using jq:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"cat graphqlColoGroupsResponse.json| jq -c '.data.viewer.zones[] | .httpRequestsAdaptiveGroups[] | {colo_id: .dimensions.coloCode, timeslot: .dimensions.datetimeHour, requests: .count, bandwidth: .sum.edgeResponseBytes}'\\n\")), mdx(\"p\", null, \"This command is much simpler than what we had before, because the data returned\\nby the GraphQL API is much simpler than what is returned by the colos endpoint.\"), mdx(\"p\", null, \"Still, it is worth explaining the command since it will help to understand some\\nof the concepts underlying the GraphQL API.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \".data.viewer.zones[]\\n\")), mdx(\"p\", null, \"The format of a GraphQL response is much the same as the query. A successful\\nresponse always contains a \\\"data\\\" object which wraps the data in the response.\\nA query will always have a \\\"viewer\\\" object which represents your user. Then, we\\nunwrap the zones objects, one per line. Our query only has one zone (since this\\nis how we chose to do it). But a query could have multiple zones as well. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \".httpRequestsAdaptiveGroups[]\\n\")), mdx(\"p\", null, \"The httpRequestsAdaptiveGroups field is a list, where each datapoint in the\\nlist represents a combination of the dimensions that were selected, along with\\nthe aggregation that was selected for that combination of the dimensions. Here,\\nwe unwrap each of the datapoints, one per row.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"{colo_id: .dimensions.coloCode, timeslot: .dimensions.datetimeHour, requests: .count, bandwidth: .sum.edgeResponseBytes}\\n\")), mdx(\"p\", null, \"This is straightforward: it just selects the attributes of each datapoint that\\nwe are interested in, in the format which we used previously in the colos\\nendpoint.\"), mdx(\"p\", null, \"The GraphQL API is so much more powerful than this, though. You can filter and\\ngroup the data by any dimensions you can think of. This feature is totally\\nabsent from the colos endpoint in the Zone Analytics API.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"demo":null,"difficulty":null,"summary":null,"tags":null,"title":"","type":null,"updated":null}}},"pageContext":{"id":"8d5f3093-6427-594f-86cf-4ac39a5e6680","fields":{"slug":"/graphql-api/migration-guides/zone-analytics-colos"},"frontmatter":{"title":"","type":null,"order":12,"hidden":null,"hideChildren":null,"breadcrumbs":null},"headings":[{"value":"Zone Analytics Colos Endpoint to GraphQL Analytics","depth":1}],"tableOfContents":{"items":[{"url":"#zone-analytics-colos-endpoint-to-graphql-analytics","title":"Zone Analytics Colos Endpoint to GraphQL Analytics"}]},"parent":{"modifiedTime":"2021-10-26","relativePath":"graphql-api/migration-guides/zone-analytics-colos/index.md"}}}