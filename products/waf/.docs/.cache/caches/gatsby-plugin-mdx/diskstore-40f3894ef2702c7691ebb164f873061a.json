{"expireTime":9007200897882661000,"key":"gatsby-plugin-mdx-entire-payload-cd07ea61a3feff1b81c8d9485bec83ce-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"How exposed credentials checks work","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":38,"offset":38},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":38,"offset":38},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"WAF rules can include a check for exposed credentials. When enabled in a given rule, exposed credentials checking happens when there is a match for the rule expression (that is, the rule expression evaluates to ","position":{"start":{"line":4,"column":1,"offset":40},"end":{"line":4,"column":212,"offset":251},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":4,"column":212,"offset":251},"end":{"line":4,"column":218,"offset":257},"indent":[]}},{"type":"text","value":"). ","position":{"start":{"line":4,"column":218,"offset":257},"end":{"line":4,"column":221,"offset":260},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":40},"end":{"line":4,"column":221,"offset":260},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At this point, the WAF looks up the username/password pair in the request against a database of publicly available stolen credentials. When both the rule expression and the exposed credentials check are true, there is a rule match, and Cloudflare performs the action configured in the rule.","position":{"start":{"line":6,"column":1,"offset":262},"end":{"line":6,"column":291,"offset":552},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":262},"end":{"line":6,"column":291,"offset":552},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, the following rule blocks ","position":{"start":{"line":8,"column":1,"offset":554},"end":{"line":8,"column":40,"offset":593},"indent":[]}},{"type":"inlineCode","value":"POST","position":{"start":{"line":8,"column":40,"offset":593},"end":{"line":8,"column":46,"offset":599},"indent":[]}},{"type":"text","value":" requests to the ","position":{"start":{"line":8,"column":46,"offset":599},"end":{"line":8,"column":63,"offset":616},"indent":[]}},{"type":"inlineCode","value":"/login.php","position":{"start":{"line":8,"column":63,"offset":616},"end":{"line":8,"column":75,"offset":628},"indent":[]}},{"type":"text","value":" URI when Cloudflare identifies the submitted credentials as previously exposed:","position":{"start":{"line":8,"column":75,"offset":628},"end":{"line":8,"column":155,"offset":708},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":554},"end":{"line":8,"column":155,"offset":708},"indent":[]}},{"type":"jsx","value":"<Example>","position":{"start":{"line":10,"column":1,"offset":710},"end":{"line":10,"column":10,"offset":719},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Rule #1","position":{"start":{"line":12,"column":3,"offset":723},"end":{"line":12,"column":10,"offset":730},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":721},"end":{"line":12,"column":12,"offset":732},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":721},"end":{"line":12,"column":12,"offset":732},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Rule expression:","position":{"start":{"line":14,"column":1,"offset":734},"end":{"line":14,"column":17,"offset":750},"indent":[]}},{"type":"jsx","value":"<br/>","position":{"start":{"line":14,"column":17,"offset":750},"end":{"line":14,"column":22,"offset":755},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":14,"column":22,"offset":755},"end":{"line":15,"column":1,"offset":756},"indent":[1]}},{"type":"inlineCode","value":"http.request.method == \"POST\" and http.request.uri == \"/login.php\"","position":{"start":{"line":15,"column":1,"offset":756},"end":{"line":15,"column":69,"offset":824},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":734},"end":{"line":15,"column":69,"offset":824},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Exposed credentials check with the following configuration:","position":{"start":{"line":17,"column":1,"offset":826},"end":{"line":17,"column":60,"offset":885},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":826},"end":{"line":17,"column":60,"offset":885},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Username expression: ","position":{"start":{"line":18,"column":3,"offset":888},"end":{"line":18,"column":24,"offset":909},"indent":[]}},{"type":"inlineCode","value":"http.request.body.form[\"user_id\"]","position":{"start":{"line":18,"column":24,"offset":909},"end":{"line":18,"column":59,"offset":944},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":888},"end":{"line":18,"column":59,"offset":944},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":886},"end":{"line":18,"column":59,"offset":944},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Password expression: ","position":{"start":{"line":19,"column":3,"offset":947},"end":{"line":19,"column":24,"offset":968},"indent":[]}},{"type":"inlineCode","value":"http.request.body.form[\"password\"]","position":{"start":{"line":19,"column":24,"offset":968},"end":{"line":19,"column":60,"offset":1004},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":947},"end":{"line":19,"column":60,"offset":1004},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":945},"end":{"line":19,"column":60,"offset":1004},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":886},"end":{"line":19,"column":60,"offset":1004},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Action: ","position":{"start":{"line":21,"column":1,"offset":1006},"end":{"line":21,"column":9,"offset":1014},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Challenge (Captcha)","position":{"start":{"line":21,"column":10,"offset":1015},"end":{"line":21,"column":29,"offset":1034},"indent":[]}}],"position":{"start":{"line":21,"column":9,"offset":1014},"end":{"line":21,"column":30,"offset":1035},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1006},"end":{"line":21,"column":30,"offset":1035},"indent":[]}},{"type":"jsx","value":"</Example>","position":{"start":{"line":23,"column":1,"offset":1037},"end":{"line":23,"column":11,"offset":1047},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When there is a match for the rule above and Cloudflare detects exposed credentials, the WAF presents the user with a challenge.","position":{"start":{"line":25,"column":1,"offset":1049},"end":{"line":25,"column":129,"offset":1177},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1049},"end":{"line":25,"column":129,"offset":1177},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"pcx-content-type\":\"concept\",\"order\":1}","position":{"start":{"line":28,"column":1,"offset":1180},"end":{"line":28,"column":69,"offset":1248},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":28,"column":69,"offset":1248}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"pcx-content-type\": \"concept\",\n  \"order\": 1\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"how-exposed-credentials-checks-work\"\n  }, \"How exposed credentials checks work\"), mdx(\"p\", null, \"WAF rules can include a check for exposed credentials. When enabled in a given rule, exposed credentials checking happens when there is a match for the rule expression (that is, the rule expression evaluates to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \"). \"), mdx(\"p\", null, \"At this point, the WAF looks up the username/password pair in the request against a database of publicly available stolen credentials. When both the rule expression and the exposed credentials check are true, there is a rule match, and Cloudflare performs the action configured in the rule.\"), mdx(\"p\", null, \"For example, the following rule blocks \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" requests to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/login.php\"), \" URI when Cloudflare identifies the submitted credentials as previously exposed:\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Rule #1\")), mdx(\"p\", null, \"Rule expression:\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.request.method == \\\"POST\\\" and http.request.uri == \\\"/login.php\\\"\")), mdx(\"p\", null, \"Exposed credentials check with the following configuration:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Username expression: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http.request.body.form[\\\"user_id\\\"]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Password expression: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http.request.body.form[\\\"password\\\"]\"))), mdx(\"p\", null, \"Action: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Challenge (Captcha)\"))), mdx(\"p\", null, \"When there is a match for the rule above and Cloudflare detects exposed credentials, the WAF presents the user with a challenge.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"pcx-content-type\": \"concept\",\n  \"order\": 1\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Example = makeShortcode(\"Example\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"how-exposed-credentials-checks-work\"\n    }}>{`How exposed credentials checks work`}</h1>\n    <p>{`WAF rules can include a check for exposed credentials. When enabled in a given rule, exposed credentials checking happens when there is a match for the rule expression (that is, the rule expression evaluates to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`). `}</p>\n    <p>{`At this point, the WAF looks up the username/password pair in the request against a database of publicly available stolen credentials. When both the rule expression and the exposed credentials check are true, there is a rule match, and Cloudflare performs the action configured in the rule.`}</p>\n    <p>{`For example, the following rule blocks `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{` requests to the `}<inlineCode parentName=\"p\">{`/login.php`}</inlineCode>{` URI when Cloudflare identifies the submitted credentials as previously exposed:`}</p>\n    <Example mdxType=\"Example\">\n      <p><strong parentName=\"p\">{`Rule #1`}</strong></p>\n      <p>{`Rule expression:`}<br />{`\n`}<inlineCode parentName=\"p\">{`http.request.method == \"POST\" and http.request.uri == \"/login.php\"`}</inlineCode></p>\n      <p>{`Exposed credentials check with the following configuration:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`Username expression: `}<inlineCode parentName=\"li\">{`http.request.body.form[\"user_id\"]`}</inlineCode></li>\n        <li parentName=\"ul\">{`Password expression: `}<inlineCode parentName=\"li\">{`http.request.body.form[\"password\"]`}</inlineCode></li>\n      </ul>\n      <p>{`Action: `}<em parentName=\"p\">{`Challenge (Captcha)`}</em></p>\n    </Example>\n    <p>{`When there is a match for the rule above and Cloudflare detects exposed credentials, the WAF presents the user with a challenge.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}