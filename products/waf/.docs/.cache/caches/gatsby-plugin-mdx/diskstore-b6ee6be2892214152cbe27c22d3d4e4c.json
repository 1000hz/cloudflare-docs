{"expireTime":9007200897882661000,"key":"gatsby-plugin-mdx-entire-payload-688c5de1dd378808f46a7dee723bf296-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Test your exposed credentials checks configuration","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":53,"offset":53},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":53,"offset":53},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"After enabling and configuring exposed credentials checks, you may want to test if the checks are working properly.","position":{"start":{"line":4,"column":1,"offset":55},"end":{"line":4,"column":116,"offset":170},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":55},"end":{"line":4,"column":116,"offset":170},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Cloudflare provides a special set of credentials for this purpose:","position":{"start":{"line":6,"column":1,"offset":172},"end":{"line":6,"column":67,"offset":238},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":172},"end":{"line":6,"column":67,"offset":238},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Login: ","position":{"start":{"line":8,"column":3,"offset":242},"end":{"line":8,"column":10,"offset":249},"indent":[]}},{"type":"inlineCode","value":"CF_EXPOSED_USERNAME","position":{"start":{"line":8,"column":10,"offset":249},"end":{"line":8,"column":31,"offset":270},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":8,"column":31,"offset":270},"end":{"line":8,"column":35,"offset":274},"indent":[]}},{"type":"inlineCode","value":"CF_EXPOSED_USERNAME@example.com","position":{"start":{"line":8,"column":35,"offset":274},"end":{"line":8,"column":68,"offset":307},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":242},"end":{"line":8,"column":68,"offset":307},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":240},"end":{"line":8,"column":68,"offset":307},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Password: ","position":{"start":{"line":9,"column":3,"offset":310},"end":{"line":9,"column":13,"offset":320},"indent":[]}},{"type":"inlineCode","value":"CF_EXPOSED_PASSWORD","position":{"start":{"line":9,"column":13,"offset":320},"end":{"line":9,"column":34,"offset":341},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":310},"end":{"line":9,"column":34,"offset":341},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":308},"end":{"line":9,"column":34,"offset":341},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":240},"end":{"line":9,"column":34,"offset":341},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The WAF always considers these specific credentials as having been previously exposed. Use them to force an \"exposed credentials\" event, which allows you to check the behavior of your current configuration.","position":{"start":{"line":11,"column":1,"offset":343},"end":{"line":11,"column":207,"offset":549},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":343},"end":{"line":11,"column":207,"offset":549},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"pcx-content-type\":\"reference\",\"order\":4}","position":{"start":{"line":15,"column":1,"offset":553},"end":{"line":15,"column":71,"offset":623},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":15,"column":71,"offset":623}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"pcx-content-type\": \"reference\",\n  \"order\": 4\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"test-your-exposed-credentials-checks-configuration\"\n  }, \"Test your exposed credentials checks configuration\"), mdx(\"p\", null, \"After enabling and configuring exposed credentials checks, you may want to test if the checks are working properly.\"), mdx(\"p\", null, \"Cloudflare provides a special set of credentials for this purpose:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Login: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CF_EXPOSED_USERNAME\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CF_EXPOSED_USERNAME@example.com\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Password: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CF_EXPOSED_PASSWORD\"))), mdx(\"p\", null, \"The WAF always considers these specific credentials as having been previously exposed. Use them to force an \\\"exposed credentials\\\" event, which allows you to check the behavior of your current configuration.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"pcx-content-type\": \"reference\",\n  \"order\": 4\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"test-your-exposed-credentials-checks-configuration\"\n    }}>{`Test your exposed credentials checks configuration`}</h1>\n    <p>{`After enabling and configuring exposed credentials checks, you may want to test if the checks are working properly.`}</p>\n    <p>{`Cloudflare provides a special set of credentials for this purpose:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Login: `}<inlineCode parentName=\"li\">{`CF_EXPOSED_USERNAME`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`CF_EXPOSED_USERNAME@example.com`}</inlineCode></li>\n      <li parentName=\"ul\">{`Password: `}<inlineCode parentName=\"li\">{`CF_EXPOSED_PASSWORD`}</inlineCode></li>\n    </ul>\n    <p>{`The WAF always considers these specific credentials as having been previously exposed. Use them to force an \"exposed credentials\" event, which allows you to check the behavior of your current configuration.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}