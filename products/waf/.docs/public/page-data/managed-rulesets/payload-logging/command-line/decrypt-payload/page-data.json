{"componentChunkName":"component---src-components-mdx-custom-renderer-js","path":"/managed-rulesets/payload-logging/command-line/decrypt-payload","result":{"data":{"mdx":{"id":"26137d98-d232-51a1-9b90-37682860ad73","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Decrypt the payload content\",\n  \"pcx-content-type\": \"how-to\",\n  \"order\": 2,\n  \"type\": \"overview\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Aside = makeShortcode(\"Aside\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"decrypt-the-payload-content-in-the-command-line\"\n  }, \"Decrypt the payload content in the command line\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matched-data-cli\"), \" tool to decrypt a payload in the command line.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/cloudflare/matched-data-cli/releases\"\n  }, \"Download\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matched-data-cli\"), \" tool for your platform from the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Releases\"), \" page on GitHub, under \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Assets\"), \".\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Extract the content of the downloaded \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tar.gz\"), \" file to a local folder.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Open a command line window and change to the local folder containing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matched-data-cli\"), \" binary.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"~ $ cd matched-data-cli\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create two files: one with your private key and another one with the encrypted payload:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"~/matched-data-cli $ printf \\\"<PRIVATE_KEY>\\\" > private_key.txt && chmod 400 private_key.txt\\n\\n~/matched-data-cli $ printf \\\"<ENCRYPTED_PAYLOAD>\\\" > encrypted_payload.txt\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Replace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<PRIVATE_KEY>\"), \" with your private key and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ENCRYPTED_PAYLOAD>\"), \" with the encrypted payload.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Note: The first \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"printf\"), \" command will make your private key visible in your command history.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Run the following command to decrypt the payload:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"~/matched-data-cli $ ./matched-data-cli decrypt -k private_key.txt encrypted_payload.txt\\n\")))), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"p\", null, \"The following example creates two files \\u2014 one with the private key and another one with the encrypted payload \\u2014 and runs the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matched-data-cli\"), \" tool to decrypt the payload in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"encrypted_payload.txt\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"~ $ cd matched-data-cli\\n\\n~/matched-data-cli $ printf \\\"uBS5eBttHrqkdY41kbZPdvYnNz8Vj0TvKIUpjB1y/GA=\\\" > private_key.txt && chmod 400 private_key.txt\\n\\n~/matched-data-cli $ printf \\\"AzTY6FHajXYXuDMUte82wrd+1n5CEHPoydYiyd3FMg5IEQAAAAAAAAA0lOhGXBclw8pWU5jbbYuepSIJN5JohTtZekLliJBlVWk=\\\" > encrypted_payload.txt\\n\\n~/matched-data-cli $ ./matched-data-cli decrypt -k private_key.txt encrypted_payload.txt\\ntest matched data\\n\")), mdx(Aside, {\n    type: \"note\",\n    header: \"Encryption formats\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", null, \"The format of the encrypted payload can change over time. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matched-data-cli\"), \" tool returns an error if it cannot decrypt a new encryption format.\"), mdx(\"p\", null, \"To fix this error, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/cloudflare/matched-data-cli/releases\"\n  }, \"download\"), \" a newer version of the tool from GitHub and try again.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"demo":null,"difficulty":null,"summary":null,"tags":null,"title":"Decrypt the payload content","type":"overview","updated":null}}},"pageContext":{"id":"26137d98-d232-51a1-9b90-37682860ad73","fields":{"slug":"/managed-rulesets/payload-logging/command-line/decrypt-payload"},"frontmatter":{"pcx_content_type":"how-to","title":"Decrypt the payload content","type":"overview","order":2,"hidden":null,"hideChildren":null,"breadcrumbs":null},"headings":[{"value":"Decrypt the payload content in the command line","depth":1}],"tableOfContents":{"items":[{"url":"#decrypt-the-payload-content-in-the-command-line","title":"Decrypt the payload content in the command line","items":[{"url":"#example","title":"Example"}]}]},"parent":{"modifiedTime":"2022-01-25","relativePath":"managed-rulesets/payload-logging/command-line/decrypt-payload.md"}}},"staticQueryHashes":["2814688963","32046230","338033027","598566803","811020565"]}