{"componentChunkName":"component---src-components-mdx-custom-renderer-js","path":"/tutorials/parsing-json-log-data","result":{"data":{"mdx":{"id":"4ca66cc0-829e-57e1-9771-26f1dadef1c6","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 85,\n  \"pcx-content-type\": \"interim\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Aside = makeShortcode(\"Aside\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"parse-cloudflare-logs-json-data\"\n  }, \"Parse Cloudflare Logs JSON data\"), mdx(\"h2\", {\n    \"id\": \"overview\"\n  }, \"Overview\"), mdx(\"p\", null, \"After downloading your Cloudflare Logs data, you can use different tools to parse and analyze your logs.\"), mdx(\"p\", null, \"In this tutorial, you will learn how to parse your JSON log data using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"jq\"), \".  To get started with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"jq\"), \", visit the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stedolan.github.io/jq/\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"jq\"), \" official site\"), \".\"), mdx(Aside, {\n    type: \"note\",\n    header: \"Note\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"jq\"), \" is a powerful command line for parsing JSON data and performing certain types of analysis. To perform more detailed analysis, consider a full-fledged data analysis system, such as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Kibana\"), \".\")), mdx(\"h2\", {\n    \"id\": \"aggregating-fields\"\n  }, \"Aggregating fields\"), mdx(\"p\", null, \"To aggregate a field appearing in the log, such as by IP address, URI, or referrer, you can use several \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"jq\"), \" commands. This is useful to identify any patterns in traffic; for example, to identify your most popular pages or to block an attack.\"), mdx(\"p\", null, \"The following examples match on a field name and provide a count of each field instance, sorted in ascending order by count.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ jq -r .ClientRequestURI logs.json | sort -n | uniq -c | sort -n | tail\\n2 /nginx-logo.png\\n2 /poweredby.png\\n2 /testagain\\n3 /favicon.ico\\n3 /testing\\n3 /testing123\\n6 /test\\n7 /testing1234\\n10 /cdn-cgi/nexp/dok3v=1613a3a185/cloudflare/rocket.js\\n54 /\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ jq -r .ClientRequestUserAgent logs.json | sort -n | uniq -c | sort -n | tail\\n1 python-requests/2.9.1\\n2 Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.56 Safari/537.17\\n4 Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36\\n5 curl/7.47.2-DEV\\n36 Mozilla/5.0 (X11; Linux x86_64; rv:44.0) Gecko/20100101 Firefox/44.0\\n51 curl/7.46.0-DEV\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ jq -r .ClientRequestReferer logs.json | sort -n | uniq -c | sort -n | tail\\n2 http://example.com/testagain\\n3 http://example.com/testing\\n5 http://example.com/\\n5 http://example.com/testing123\\n7 http://example.com/testing1234\\n77 null\\n\")), mdx(\"h2\", {\n    \"id\": \"filtering-fields\"\n  }, \"Filtering fields\"), mdx(\"p\", null, \"Another common use case involves filtering data for a specific field value and then aggregating after that. This helps answer questions like \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Which URLs saw the most 502 errors?\"), \" For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ jq 'select(.OriginResponseStatus == 502) | .ClientRequestURI' logs.json | sort -n | uniq -c | sort -n | tail\\n1 \\\"/favicon.ico\\\"\\n1 \\\"/testing\\\"\\n3 \\\"/testing123\\\"\\n6 \\\"/test\\\"\\n6 \\\"/testing1234\\\"\\n18 \\\"/\\\"\\n\")), mdx(\"p\", null, \"To find out the top IP addresses blocked by the Cloudflare WAF, use the following query:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ jq -r 'select(.WAFAction == \\\"drop\\\") | .ClientIP' logs.json | sort -n | uniq -c | sort -n\\n1 127.0.0.1\\n\")), mdx(\"h2\", {\n    \"id\": \"showing-cached-requests\"\n  }, \"Showing cached requests\"), mdx(\"p\", null, \"To retrieve your cache ratios, try the following query:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ jq -r '.CacheCacheStatus' logs.json | sort -n | uniq -c | sort -n\\n3 hit\\n3 null\\n3 stale\\n4 expired\\n6 miss\\n81 unknown\\n\")), mdx(\"h2\", {\n    \"id\": \"showing-tls-versions\"\n  }, \"Showing TLS versions\"), mdx(\"p\", null, \"To find out which TLS versions your visitors are using \", \"\\u2014\", \" for example, to decide if you can disable TLS versions that are older than 1.2 \", \"\\u2014\", \" use the following query:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ jq -r '.ClientSSLProtocol' logs.json | sort -n | uniq -c | sort -n\\n42 none\\n58 TLSv1.2\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"demo":null,"difficulty":null,"summary":null,"tags":null,"title":"","type":null,"updated":null}}},"pageContext":{"id":"4ca66cc0-829e-57e1-9771-26f1dadef1c6","fields":{"slug":"/tutorials/parsing-json-log-data"},"frontmatter":{"pcx_content_type":"interim","title":"","type":null,"order":85,"hidden":null,"hideChildren":null,"breadcrumbs":null},"headings":[{"value":"Parse Cloudflare Logs JSON data","depth":1}],"tableOfContents":{"items":[{"url":"#parse-cloudflare-logs-json-data","title":"Parse Cloudflare Logs JSON data","items":[{"url":"#overview","title":"Overview"},{"url":"#aggregating-fields","title":"Aggregating fields"},{"url":"#filtering-fields","title":"Filtering fields"},{"url":"#showing-cached-requests","title":"Showing cached requests"},{"url":"#showing-tls-versions","title":"Showing TLS versions"}]}]},"parent":{"modifiedTime":"2022-01-27","relativePath":"tutorials/parsing-json-log-data.md"}}},"staticQueryHashes":["2814688963","32046230","338033027","598566803","811020565"]}