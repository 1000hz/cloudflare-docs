{"data":{"mdx":{"id":"6cae0f7e-9725-5b3c-9cce-82013b728284","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 88,\n  \"pcx-content-type\": \"interim\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Aside = makeShortcode(\"Aside\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"manage-logpush-with-python\"\n  }, \"Manage Logpush with Python\"), mdx(Aside, {\n    type: \"note\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", null, \"The examples below are for zone-scoped data sets. Account-scoped data sets should use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ACCOUNT_ID>\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ZONE_ID>\"), \".\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import json\\nimport requests\\n\\nurl = \\\"https://api.cloudflare.com/client/v4/\\\"\\n\\nx_auth_email = \\\"<EMAIL>\\\"\\nx_auth_key = \\\"<API_KEY>\\\"\\n\\nzone_id = \\\"<ZONE_ID>\\\"\\ndestination_conf = \\\"s3://<BUCKET_NAME>/logs?region=us-west-1\\\"\\n\\nlogpush_url = url + \\\"/zones/%s/logpush\\\" % zone_id\\n\\nheaders = {\\n  'X-Auth-Email': <EMAIL>,\\n  'X-Auth-Key': <API_KEY>,\\n  'Content-Type': 'application/json'\\n}\\n\\n# Create job\\nr = requests.post(logpush_url + \\\"/jobs\\\", headers=headers, data=json.dumps({\\\"destination_conf\\\":destination_conf}))\\nprint(r.status_code, r.text)\\nassert r.status_code == 201\\nassert r.json()[\\\"result\\\"][\\\"enabled\\\"] == False\\n\\n# Keep id of the new job\\nid = r.json()[\\\"result\\\"][\\\"id\\\"]\\n\\n# Get job\\nr = requests.get(logpush_url + \\\"/jobs/%s\\\" % id, headers=headers)\\nprint(r.status_code, r.text)\\nassert r.status_code == 200\\n\\n# Get all jobs for a zone\\nr = requests.get(logpush_url + \\\"/jobs\\\", headers=headers)\\nprint(r.status_code, r.text)\\nassert r.status_code == 200\\nassert len(r.json()[\\\"result\\\"]) > 0\\n\\n# Update job\\nr = requests.put(logpush_url + \\\"/jobs/%s\\\" % id, headers=headers, data=json.dumps({\\\"enabled\\\":True}))\\nprint(r.status_code, r.text)\\nassert r.status_code == 200\\nassert r.json()[\\\"result\\\"][\\\"enabled\\\"] == True\\n\\n# Delete job\\nr = requests.delete(logpush_url + \\\"/jobs/%s\\\" % id, headers=headers)\\nprint(r.status_code, r.text)\\nassert r.status_code == 200\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"demo":null,"difficulty":null,"summary":null,"tags":null,"title":"","type":null,"updated":null}}},"pageContext":{"id":"6cae0f7e-9725-5b3c-9cce-82013b728284","fields":{"slug":"/reference/logpush-api-configuration/examples/example-logpush-python"},"frontmatter":{"pcx_content_type":"interim","title":"","type":null,"order":88,"hidden":null,"hideChildren":null,"breadcrumbs":null},"headings":[{"value":"Manage Logpush with Python","depth":1}],"tableOfContents":{"items":[{"url":"#manage-logpush-with-python","title":"Manage Logpush with Python"}]},"parent":{"modifiedTime":"2022-01-27","relativePath":"reference/logpush-api-configuration/examples/example-logpush-python/index.md"}}}