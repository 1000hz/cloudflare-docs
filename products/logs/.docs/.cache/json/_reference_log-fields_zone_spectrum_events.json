{"data":{"mdx":{"id":"2ffbc1f9-5e0b-50bf-9c37-13b2e3c1e0a4","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"//\": null,\n  \"title\": \"Spectrum events\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableWrap = makeShortcode(\"TableWrap\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"spectrum-events\"\n  }, \"Spectrum events\"), mdx(\"p\", null, \"The descriptions below detail the fields available for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spectrum_events\"), \".\"), mdx(TableWrap, {\n    mdxType: \"TableWrap\"\n  }, mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Field\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Value\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Application\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The unique public ID of the application on which the event occurred\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ClientAsn\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Client AS number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ClientBytes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The number of bytes read from the client by the Spectrum service\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ClientCountry\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Country of the client IP address\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ClientIP\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Client IP address\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ClientMatchedIpFirewall\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether the connection matched any IP Firewall rules. UNKNOWN = No match or Firewall not enabled for spectrum; \", mdx(\"em\", null, \"UNKNOWN\"), \" \", \"|\", \" \", mdx(\"em\", null, \"ALLOW\"), \" \", \"|\", \" \", mdx(\"em\", null, \"BLOCK_ERROR\"), \" \", \"|\", \" \", mdx(\"em\", null, \"BLOCK_IP\"), \" \", \"|\", \" \", mdx(\"em\", null, \"BLOCK_COUNTRY\"), \" \", \"|\", \" \", mdx(\"em\", null, \"BLOCK_ASN\"), \" \", \"|\", \" \", mdx(\"em\", null, \"WHITELIST_IP\"), \" \", \"|\", \" \", mdx(\"em\", null, \"WHITELIST_COUNTRY\"), \" \", \"|\", \" \", mdx(\"em\", null, \"WHITELIST_ASN\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ClientPort\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Client port\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ClientProto\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Transport protocol used by client; \", mdx(\"em\", null, \"tcp\"), \" \", \"|\", \" \", mdx(\"em\", null, \"udp\"), \" \", \"|\", \" \", mdx(\"em\", null, \"unix\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ClientTcpRtt\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The TCP round-trip time in nanoseconds between the client and Spectrum\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ClientTlsCipher\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The cipher negotiated between the client and Spectrum. In v1, an unknown cipher returned as \\\"Unknown.\\\" In v2, it's returned as \\\"UNK.\\\"\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ClientTlsClientHelloServerName\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The server name in the Client Hello message from client to Spectrum\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ClientTlsProtocol\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The TLS version negotiated between the client and Spectrum; \", mdx(\"em\", null, \"unknown\"), \" \", \"|\", \" \", mdx(\"em\", null, \"none\"), \" \", \"|\", \" \", mdx(\"em\", null, \"SSLv3\"), \" \", \"|\", \" \", mdx(\"em\", null, \"TLSv1\"), \" \", \"|\", \" \", mdx(\"em\", null, \"TLSv1.1\"), \" \", \"|\", \" \", mdx(\"em\", null, \"TLSv1.2\"), \" \", \"|\", \" \", mdx(\"em\", null, \"TLSv1.3\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ClientTlsStatus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Indicates state of TLS session from the client to Spectrum; \", mdx(\"em\", null, \"UNKNOWN\"), \" \", \"|\", \" \", mdx(\"em\", null, \"OK\"), \" \", \"|\", \" \", mdx(\"em\", null, \"INTERNAL_ERROR\"), \" \", \"|\", \" \", mdx(\"em\", null, \"INVALID_CONFIG\"), \" \", \"|\", \" \", mdx(\"em\", null, \"INVALID_SNI\"), \" \", \"|\", \" \", mdx(\"em\", null, \"HANDSHAKE_FAILED\"), \" \", \"|\", \" \", mdx(\"em\", null, \"KEYLESS_RPC\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ColoCode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"IATA airport code of data center that received the request\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ConnectTimestamp\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Timestamp at which both legs of the connection (client/edge, edge/origin or nexthop) were established\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int or string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"DisconnectTimestamp\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Timestamp at which the connection was closed\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int or string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Event\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", null, \"connect\"), \" \", \"|\", \" \", mdx(\"em\", null, \"disconnect\"), \" \", \"|\", \" \", mdx(\"em\", null, \"clientFiltered\"), \" \", \"|\", \" \", mdx(\"em\", null, \"tlsError\"), \" \", \"|\", \" \", mdx(\"em\", null, \"resolveOrigin\"), \" \", \"|\", \" \", mdx(\"em\", null, \"originError\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"IpFirewall\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether IP Firewall was enabled at time of connection\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"bool\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"OriginBytes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The number of bytes read from the origin by Spectrum\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"OriginIP\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Origin IP address\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"OriginPort\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Origin port\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"OriginProto\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Transport protocol used by origin; \", mdx(\"em\", null, \"tcp\"), \" \", \"|\", \" \", mdx(\"em\", null, \"udp\"), \" \", \"|\", \" \", mdx(\"em\", null, \"unix\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"OriginTcpRtt\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The TCP round-trip time in nanoseconds between Spectrum and the origin\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"OriginTlsCipher\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The cipher negotiated between Spectrum and the origin. In v1, an unknown cipher returned as \\\"Unknown.\\\" In v2, it's returned as \\\"UNK.\\\"\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"OriginTlsFingerprint\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"SHA256 hash of origin certificate. In v1, an unknown SHA256 hash is returned as \\\"0000000000000000000000000000000000000000000000000000000000000000.\\\" In v2, it's returned as an empty string.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"OriginTlsMode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"If and how the upstream connection is encrypted; \", mdx(\"em\", null, \"unknown\"), \" \", \"|\", \" \", mdx(\"em\", null, \"off\"), \" \", \"|\", \" \", mdx(\"em\", null, \"flexible\"), \" \", \"|\", \" \", mdx(\"em\", null, \"full\"), \" \", \"|\", \" \", mdx(\"em\", null, \"strict\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"OriginTlsProtocol\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The TLS version negotiated between Spectrum and the origin; \", mdx(\"em\", null, \"unknown\"), \" \", \"|\", \" \", mdx(\"em\", null, \"none\"), \" \", \"|\", \" \", mdx(\"em\", null, \"SSLv3\"), \" \", \"|\", \" \", mdx(\"em\", null, \"TLSv1\"), \" \", \"|\", \" \", mdx(\"em\", null, \"TLSv1.1\"), \" \", \"|\", \" \", mdx(\"em\", null, \"TLSv1.2\"), \" \", \"|\", \" \", mdx(\"em\", null, \"TLSv1.3\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"OriginTlsStatus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The state of the TLS session from Spectrum to the origin; \", mdx(\"em\", null, \"UNKNOWN\"), \" \", \"|\", \" \", mdx(\"em\", null, \"OK\"), \" \", \"|\", \" \", mdx(\"em\", null, \"INTERNAL_ERROR\"), \" \", \"|\", \" \", mdx(\"em\", null, \"INVALID_CONFIG\"), \" \", \"|\", \" \", mdx(\"em\", null, \"INVALID_SNI\"), \" \", \"|\", \" \", mdx(\"em\", null, \"HANDSHAKE_FAILED\"), \" \", \"|\", \" \", mdx(\"em\", null, \"KEYLESS_RPC\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ProxyProtocol\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Which form of proxy protocol is applied to the given connection; \", mdx(\"em\", null, \"off\"), \" \", \"|\", \" \", mdx(\"em\", null, \"v1\"), \" \", \"|\", \" \", mdx(\"em\", null, \"v2\"), \" \", \"|\", \" \", mdx(\"em\", null, \"simple\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Status\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A code indicating reason for connection closure\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Timestamp\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Timestamp at which the event took place\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int or string\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"demo":null,"difficulty":null,"summary":null,"tags":null,"title":"Spectrum events","type":null,"updated":null}}},"pageContext":{"id":"2ffbc1f9-5e0b-50bf-9c37-13b2e3c1e0a4","fields":{"slug":"/reference/log-fields/zone/spectrum_events"},"frontmatter":{"pcx_content_type":null,"title":"Spectrum events","type":null,"order":null,"hidden":null,"hideChildren":null,"breadcrumbs":null},"headings":[{"value":"Spectrum events","depth":1}],"tableOfContents":{"items":[{"url":"#spectrum-events","title":"Spectrum events"}]},"parent":{"modifiedTime":"2022-01-27","relativePath":"reference/log-fields/zone/spectrum_events.md"}}}