{"expireTime":9007200898048140000,"key":"gatsby-plugin-mdx-entire-payload-a0910e8c8c719347242448d0e51b3a59-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Manage Logpush with Python","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":29,"offset":29},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":29,"offset":29},"indent":[]}},{"type":"jsx","value":"<Aside type=\"note\">","position":{"start":{"line":4,"column":1,"offset":31},"end":{"line":4,"column":20,"offset":50},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The examples below are for zone-scoped data sets. Account-scoped data sets should use ","position":{"start":{"line":6,"column":1,"offset":52},"end":{"line":6,"column":87,"offset":138},"indent":[]}},{"type":"inlineCode","value":"<ACCOUNT_ID>","position":{"start":{"line":6,"column":87,"offset":138},"end":{"line":6,"column":101,"offset":152},"indent":[]}},{"type":"text","value":" instead of ","position":{"start":{"line":6,"column":101,"offset":152},"end":{"line":6,"column":113,"offset":164},"indent":[]}},{"type":"inlineCode","value":"<ZONE_ID>","position":{"start":{"line":6,"column":113,"offset":164},"end":{"line":6,"column":124,"offset":175},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":6,"column":124,"offset":175},"end":{"line":6,"column":125,"offset":176},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":52},"end":{"line":6,"column":125,"offset":176},"indent":[]}},{"type":"jsx","value":"</Aside>","position":{"start":{"line":8,"column":1,"offset":178},"end":{"line":8,"column":9,"offset":186},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"import json\nimport requests\n\nurl = \"https://api.cloudflare.com/client/v4/\"\n\nx_auth_email = \"<EMAIL>\"\nx_auth_key = \"<API_KEY>\"\n\nzone_id = \"<ZONE_ID>\"\ndestination_conf = \"s3://<BUCKET_NAME>/logs?region=us-west-1\"\n\nlogpush_url = url + \"/zones/%s/logpush\" % zone_id\n\nheaders = {\n  'X-Auth-Email': <EMAIL>,\n  'X-Auth-Key': <API_KEY>,\n  'Content-Type': 'application/json'\n}\n\n# Create job\nr = requests.post(logpush_url + \"/jobs\", headers=headers, data=json.dumps({\"destination_conf\":destination_conf}))\nprint(r.status_code, r.text)\nassert r.status_code == 201\nassert r.json()[\"result\"][\"enabled\"] == False\n\n# Keep id of the new job\nid = r.json()[\"result\"][\"id\"]\n\n# Get job\nr = requests.get(logpush_url + \"/jobs/%s\" % id, headers=headers)\nprint(r.status_code, r.text)\nassert r.status_code == 200\n\n# Get all jobs for a zone\nr = requests.get(logpush_url + \"/jobs\", headers=headers)\nprint(r.status_code, r.text)\nassert r.status_code == 200\nassert len(r.json()[\"result\"]) > 0\n\n# Update job\nr = requests.put(logpush_url + \"/jobs/%s\" % id, headers=headers, data=json.dumps({\"enabled\":True}))\nprint(r.status_code, r.text)\nassert r.status_code == 200\nassert r.json()[\"result\"][\"enabled\"] == True\n\n# Delete job\nr = requests.delete(logpush_url + \"/jobs/%s\" % id, headers=headers)\nprint(r.status_code, r.text)\nassert r.status_code == 200","position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":60,"column":4,"offset":1520},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"order\":88,\"pcx-content-type\":\"interim\"}","position":{"start":{"line":62,"column":1,"offset":1522},"end":{"line":62,"column":70,"offset":1591},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":62,"column":70,"offset":1591}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 88,\n  \"pcx-content-type\": \"interim\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Aside = makeShortcode(\"Aside\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"manage-logpush-with-python\"\n  }, \"Manage Logpush with Python\"), mdx(Aside, {\n    type: \"note\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", null, \"The examples below are for zone-scoped data sets. Account-scoped data sets should use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ACCOUNT_ID>\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ZONE_ID>\"), \".\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import json\\nimport requests\\n\\nurl = \\\"https://api.cloudflare.com/client/v4/\\\"\\n\\nx_auth_email = \\\"<EMAIL>\\\"\\nx_auth_key = \\\"<API_KEY>\\\"\\n\\nzone_id = \\\"<ZONE_ID>\\\"\\ndestination_conf = \\\"s3://<BUCKET_NAME>/logs?region=us-west-1\\\"\\n\\nlogpush_url = url + \\\"/zones/%s/logpush\\\" % zone_id\\n\\nheaders = {\\n  'X-Auth-Email': <EMAIL>,\\n  'X-Auth-Key': <API_KEY>,\\n  'Content-Type': 'application/json'\\n}\\n\\n# Create job\\nr = requests.post(logpush_url + \\\"/jobs\\\", headers=headers, data=json.dumps({\\\"destination_conf\\\":destination_conf}))\\nprint(r.status_code, r.text)\\nassert r.status_code == 201\\nassert r.json()[\\\"result\\\"][\\\"enabled\\\"] == False\\n\\n# Keep id of the new job\\nid = r.json()[\\\"result\\\"][\\\"id\\\"]\\n\\n# Get job\\nr = requests.get(logpush_url + \\\"/jobs/%s\\\" % id, headers=headers)\\nprint(r.status_code, r.text)\\nassert r.status_code == 200\\n\\n# Get all jobs for a zone\\nr = requests.get(logpush_url + \\\"/jobs\\\", headers=headers)\\nprint(r.status_code, r.text)\\nassert r.status_code == 200\\nassert len(r.json()[\\\"result\\\"]) > 0\\n\\n# Update job\\nr = requests.put(logpush_url + \\\"/jobs/%s\\\" % id, headers=headers, data=json.dumps({\\\"enabled\\\":True}))\\nprint(r.status_code, r.text)\\nassert r.status_code == 200\\nassert r.json()[\\\"result\\\"][\\\"enabled\\\"] == True\\n\\n# Delete job\\nr = requests.delete(logpush_url + \\\"/jobs/%s\\\" % id, headers=headers)\\nprint(r.status_code, r.text)\\nassert r.status_code == 200\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"order\": 88,\n  \"pcx-content-type\": \"interim\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Aside = makeShortcode(\"Aside\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"manage-logpush-with-python\"\n    }}>{`Manage Logpush with Python`}</h1>\n    <Aside type=\"note\" mdxType=\"Aside\">\n      <p>{`The examples below are for zone-scoped data sets. Account-scoped data sets should use `}<inlineCode parentName=\"p\">{`<ACCOUNT_ID>`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`<ZONE_ID>`}</inlineCode>{`.`}</p>\n    </Aside>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import json\nimport requests\n\nurl = \"https://api.cloudflare.com/client/v4/\"\n\nx_auth_email = \"<EMAIL>\"\nx_auth_key = \"<API_KEY>\"\n\nzone_id = \"<ZONE_ID>\"\ndestination_conf = \"s3://<BUCKET_NAME>/logs?region=us-west-1\"\n\nlogpush_url = url + \"/zones/%s/logpush\" % zone_id\n\nheaders = {\n  'X-Auth-Email': <EMAIL>,\n  'X-Auth-Key': <API_KEY>,\n  'Content-Type': 'application/json'\n}\n\n# Create job\nr = requests.post(logpush_url + \"/jobs\", headers=headers, data=json.dumps({\"destination_conf\":destination_conf}))\nprint(r.status_code, r.text)\nassert r.status_code == 201\nassert r.json()[\"result\"][\"enabled\"] == False\n\n# Keep id of the new job\nid = r.json()[\"result\"][\"id\"]\n\n# Get job\nr = requests.get(logpush_url + \"/jobs/%s\" % id, headers=headers)\nprint(r.status_code, r.text)\nassert r.status_code == 200\n\n# Get all jobs for a zone\nr = requests.get(logpush_url + \"/jobs\", headers=headers)\nprint(r.status_code, r.text)\nassert r.status_code == 200\nassert len(r.json()[\"result\"]) > 0\n\n# Update job\nr = requests.put(logpush_url + \"/jobs/%s\" % id, headers=headers, data=json.dumps({\"enabled\":True}))\nprint(r.status_code, r.text)\nassert r.status_code == 200\nassert r.json()[\"result\"][\"enabled\"] == True\n\n# Delete job\nr = requests.delete(logpush_url + \"/jobs/%s\" % id, headers=headers)\nprint(r.status_code, r.text)\nassert r.status_code == 200\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}