{"expireTime":9007200899183228000,"key":"gatsby-plugin-mdx-entire-payload-ae640a9f2891ab789c6fb4f45b93fce7-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"What is a filter?","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":20,"offset":20},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":20,"offset":20},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A filter is a way of saying:","position":{"start":{"line":4,"column":1,"offset":22},"end":{"line":4,"column":29,"offset":50},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":22},"end":{"line":4,"column":29,"offset":50},"indent":[]}},{"type":"code","lang":"txt","meta":null,"value":"if (traffic matches certain criteria) then...","position":{"start":{"line":6,"column":1,"offset":52},"end":{"line":8,"column":4,"offset":108},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A filter contains an expression that would return ","position":{"start":{"line":10,"column":1,"offset":110},"end":{"line":10,"column":51,"offset":160},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":10,"column":51,"offset":160},"end":{"line":10,"column":57,"offset":166},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":10,"column":57,"offset":166},"end":{"line":10,"column":61,"offset":170},"indent":[]}},{"type":"inlineCode","value":"false","position":{"start":{"line":10,"column":61,"offset":170},"end":{"line":10,"column":68,"offset":177},"indent":[]}},{"type":"text","value":" when evaluated against traffic passing through Cloudflare.","position":{"start":{"line":10,"column":68,"offset":177},"end":{"line":10,"column":127,"offset":236},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":110},"end":{"line":10,"column":127,"offset":236},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Filter expressions are human and machine readable, and you can compose complex logic to precisely match the traffic that you are interested in detecting and acting upon.","position":{"start":{"line":12,"column":1,"offset":238},"end":{"line":12,"column":170,"offset":407},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":238},"end":{"line":12,"column":170,"offset":407},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A filter typically looks like the following:","position":{"start":{"line":14,"column":1,"offset":409},"end":{"line":14,"column":45,"offset":453},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":409},"end":{"line":14,"column":45,"offset":453},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"{\n  \"id\": \"<FILTER_ID>\",\n  \"expression\": \"(http.request.uri.path ~ \\\"^.*wp-login.php$\\\" or http.request.uri.path ~ \\\"^.*xmlrpc.php$\\\") and ip.src ne 93.184.216.34\",\n  \"description\": \"WordPress login paths via the login page or mobile RPC endpoint\"\n}","position":{"start":{"line":16,"column":1,"offset":455},"end":{"line":22,"column":4,"offset":716},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The expression specified in this example filter is:","position":{"start":{"line":24,"column":1,"offset":718},"end":{"line":24,"column":52,"offset":769},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":718},"end":{"line":24,"column":52,"offset":769},"indent":[]}},{"type":"code","lang":"txt","meta":null,"value":"(http.request.uri.path ~ \"^.*wp-login.php$\" or http.request.uri.path ~ \"^.*xmlrpc.php$\") and ip.src ne 93.184.216.34","position":{"start":{"line":26,"column":1,"offset":771},"end":{"line":28,"column":4,"offset":898},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This filter expression has a ","position":{"start":{"line":30,"column":1,"offset":900},"end":{"line":30,"column":30,"offset":929},"indent":[]}},{"type":"inlineCode","value":"(this or that) and not this","position":{"start":{"line":30,"column":30,"offset":929},"end":{"line":30,"column":59,"offset":958},"indent":[]}},{"type":"text","value":" structure designed to:","position":{"start":{"line":30,"column":59,"offset":958},"end":{"line":30,"column":82,"offset":981},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":900},"end":{"line":30,"column":82,"offset":981},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Capture two WordPress paths that may be subject to brute force password attacks, and","position":{"start":{"line":32,"column":4,"offset":986},"end":{"line":32,"column":88,"offset":1070},"indent":[]}}],"position":{"start":{"line":32,"column":4,"offset":986},"end":{"line":32,"column":88,"offset":1070},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":983},"end":{"line":32,"column":88,"offset":1070},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Exclude traffic that comes from the IP address ","position":{"start":{"line":33,"column":4,"offset":1074},"end":{"line":33,"column":51,"offset":1121},"indent":[]}},{"type":"inlineCode","value":"93.184.216.34","position":{"start":{"line":33,"column":51,"offset":1121},"end":{"line":33,"column":66,"offset":1136},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":33,"column":66,"offset":1136},"end":{"line":33,"column":67,"offset":1137},"indent":[]}}],"position":{"start":{"line":33,"column":4,"offset":1074},"end":{"line":33,"column":67,"offset":1137},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1071},"end":{"line":33,"column":67,"offset":1137},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":983},"end":{"line":33,"column":67,"offset":1137},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Imagine that this is an IP for your office. This expression demonstrates a filter that might be used (in a Firewall Rule) to block access to the WordPress login when accessed outside the office network.","position":{"start":{"line":35,"column":1,"offset":1139},"end":{"line":35,"column":203,"offset":1341},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1139},"end":{"line":35,"column":203,"offset":1341},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For more information on rule expressions, refer to ","position":{"start":{"line":37,"column":1,"offset":1343},"end":{"line":37,"column":52,"offset":1394},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/ruleset-engine/rules-language/expressions","children":[{"type":"text","value":"Expressions","position":{"start":{"line":37,"column":53,"offset":1395},"end":{"line":37,"column":64,"offset":1406},"indent":[]}}],"position":{"start":{"line":37,"column":52,"offset":1394},"end":{"line":37,"column":142,"offset":1484},"indent":[]}},{"type":"text","value":" in the Rules language documentation.","position":{"start":{"line":37,"column":142,"offset":1484},"end":{"line":37,"column":179,"offset":1521},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1343},"end":{"line":37,"column":179,"offset":1521},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"What is a filter?\",\"pcx-content-type\":\"concept\",\"order\":445}","position":{"start":{"line":39,"column":1,"offset":1523},"end":{"line":39,"column":99,"offset":1621},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":39,"column":99,"offset":1621}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"What is a filter?\",\n  \"pcx-content-type\": \"concept\",\n  \"order\": 445\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"what-is-a-filter\"\n  }, \"What is a filter?\"), mdx(\"p\", null, \"A filter is a way of saying:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"if (traffic matches certain criteria) then...\\n\")), mdx(\"p\", null, \"A filter contains an expression that would return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" when evaluated against traffic passing through Cloudflare.\"), mdx(\"p\", null, \"Filter expressions are human and machine readable, and you can compose complex logic to precisely match the traffic that you are interested in detecting and acting upon.\"), mdx(\"p\", null, \"A filter typically looks like the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"id\\\": \\\"<FILTER_ID>\\\",\\n  \\\"expression\\\": \\\"(http.request.uri.path ~ \\\\\\\"^.*wp-login.php$\\\\\\\" or http.request.uri.path ~ \\\\\\\"^.*xmlrpc.php$\\\\\\\") and ip.src ne 93.184.216.34\\\",\\n  \\\"description\\\": \\\"WordPress login paths via the login page or mobile RPC endpoint\\\"\\n}\\n\")), mdx(\"p\", null, \"The expression specified in this example filter is:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"(http.request.uri.path ~ \\\"^.*wp-login.php$\\\" or http.request.uri.path ~ \\\"^.*xmlrpc.php$\\\") and ip.src ne 93.184.216.34\\n\")), mdx(\"p\", null, \"This filter expression has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(this or that) and not this\"), \" structure designed to:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Capture two WordPress paths that may be subject to brute force password attacks, and\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Exclude traffic that comes from the IP address \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"93.184.216.34\"), \".\")), mdx(\"p\", null, \"Imagine that this is an IP for your office. This expression demonstrates a filter that might be used (in a Firewall Rule) to block access to the WordPress login when accessed outside the office network.\"), mdx(\"p\", null, \"For more information on rule expressions, refer to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/ruleset-engine/rules-language/expressions\"\n  }, \"Expressions\"), \" in the Rules language documentation.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"What is a filter?\",\n  \"pcx-content-type\": \"concept\",\n  \"order\": 445\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"what-is-a-filter\"\n    }}>{`What is a filter?`}</h1>\n    <p>{`A filter is a way of saying:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-txt\"\n      }}>{`if (traffic matches certain criteria) then...\n`}</code></pre>\n    <p>{`A filter contains an expression that would return `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` when evaluated against traffic passing through Cloudflare.`}</p>\n    <p>{`Filter expressions are human and machine readable, and you can compose complex logic to precisely match the traffic that you are interested in detecting and acting upon.`}</p>\n    <p>{`A filter typically looks like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"id\": \"<FILTER_ID>\",\n  \"expression\": \"(http.request.uri.path ~ \\\\\"^.*wp-login.php$\\\\\" or http.request.uri.path ~ \\\\\"^.*xmlrpc.php$\\\\\") and ip.src ne 93.184.216.34\",\n  \"description\": \"WordPress login paths via the login page or mobile RPC endpoint\"\n}\n`}</code></pre>\n    <p>{`The expression specified in this example filter is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-txt\"\n      }}>{`(http.request.uri.path ~ \"^.*wp-login.php$\" or http.request.uri.path ~ \"^.*xmlrpc.php$\") and ip.src ne 93.184.216.34\n`}</code></pre>\n    <p>{`This filter expression has a `}<inlineCode parentName=\"p\">{`(this or that) and not this`}</inlineCode>{` structure designed to:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Capture two WordPress paths that may be subject to brute force password attacks, and`}</li>\n      <li parentName=\"ol\">{`Exclude traffic that comes from the IP address `}<inlineCode parentName=\"li\">{`93.184.216.34`}</inlineCode>{`.`}</li>\n    </ol>\n    <p>{`Imagine that this is an IP for your office. This expression demonstrates a filter that might be used (in a Firewall Rule) to block access to the WordPress login when accessed outside the office network.`}</p>\n    <p>{`For more information on rule expressions, refer to `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.cloudflare.com/ruleset-engine/rules-language/expressions\"\n      }}>{`Expressions`}</a>{` in the Rules language documentation.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}