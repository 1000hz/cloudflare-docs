{"expireTime":9007200899183226000,"key":"gatsby-plugin-mdx-entire-payload-53d3708cacc8b510e1b14991c6636583-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Block Microsoft Exchange Autodiscover requests","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":49,"offset":49},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":49,"offset":49},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In some cases, Microsoft Exchange Autodiscover service requests can be “noisy,” triggering large numbers of HTTP 404 (Page Not Found) errors.","position":{"start":{"line":4,"column":1,"offset":51},"end":{"line":4,"column":142,"offset":192},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":51},"end":{"line":4,"column":142,"offset":192},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This example uses the ","position":{"start":{"line":6,"column":1,"offset":194},"end":{"line":6,"column":23,"offset":216},"indent":[]}},{"type":"inlineCode","value":"matches","position":{"start":{"line":6,"column":23,"offset":216},"end":{"line":6,"column":32,"offset":225},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":6,"column":32,"offset":225},"end":{"line":6,"column":33,"offset":226},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/ruleset-engine/rules-language/operators/#comparison-operators","children":[{"type":"text","value":"comparison operator","position":{"start":{"line":6,"column":34,"offset":227},"end":{"line":6,"column":53,"offset":246},"indent":[]}}],"position":{"start":{"line":6,"column":33,"offset":226},"end":{"line":6,"column":151,"offset":344},"indent":[]}},{"type":"text","value":" and a regular expression to block ","position":{"start":{"line":6,"column":151,"offset":344},"end":{"line":6,"column":186,"offset":379},"indent":[]}},{"type":"inlineCode","value":"autodiscover.xml","position":{"start":{"line":6,"column":186,"offset":379},"end":{"line":6,"column":204,"offset":397},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":6,"column":204,"offset":397},"end":{"line":6,"column":209,"offset":402},"indent":[]}},{"type":"inlineCode","value":"autodiscover.src","position":{"start":{"line":6,"column":209,"offset":402},"end":{"line":6,"column":227,"offset":420},"indent":[]}},{"type":"text","value":" requests:","position":{"start":{"line":6,"column":227,"offset":420},"end":{"line":6,"column":237,"offset":430},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":194},"end":{"line":6,"column":237,"offset":430},"indent":[]}},{"type":"jsx","value":"<table>\n  <thead>\n  <tr>\n    <th>Expression</th>\n    <th>Action</th>\n  </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>http.request.uri.path matches \"/autodiscover.(xml|src)$\"</code></td>\n      <td><em>Block</em></td>\n    </tr>\n  </tbody>\n</table>","position":{"start":{"line":8,"column":1,"offset":432},"end":{"line":21,"column":9,"offset":683},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"pcx-content-type\":\"configuration\"}","position":{"start":{"line":24,"column":1,"offset":686},"end":{"line":24,"column":65,"offset":750},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":24,"column":65,"offset":750}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"pcx-content-type\": \"configuration\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"block-microsoft-exchange-autodiscover-requests\"\n  }, \"Block Microsoft Exchange Autodiscover requests\"), mdx(\"p\", null, \"In some cases, Microsoft Exchange Autodiscover service requests can be \\u201Cnoisy,\\u201D triggering large numbers of HTTP 404 (Page Not Found) errors.\"), mdx(\"p\", null, \"This example uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matches\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/ruleset-engine/rules-language/operators/#comparison-operators\"\n  }, \"comparison operator\"), \" and a regular expression to block \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"autodiscover.xml\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"autodiscover.src\"), \" requests:\"), mdx(\"table\", null, mdx(\"thead\", null, mdx(\"tr\", null, mdx(\"th\", null, \"Expression\"), mdx(\"th\", null, \"Action\"))), mdx(\"tbody\", null, mdx(\"tr\", null, mdx(\"td\", null, mdx(\"code\", null, \"http.request.uri.path matches \\\"/autodiscover.(xml|src)$\\\"\")), mdx(\"td\", null, mdx(\"em\", null, \"Block\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"pcx-content-type\": \"configuration\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"block-microsoft-exchange-autodiscover-requests\"\n    }}>{`Block Microsoft Exchange Autodiscover requests`}</h1>\n    <p>{`In some cases, Microsoft Exchange Autodiscover service requests can be “noisy,” triggering large numbers of HTTP 404 (Page Not Found) errors.`}</p>\n    <p>{`This example uses the `}<inlineCode parentName=\"p\">{`matches`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.cloudflare.com/ruleset-engine/rules-language/operators/#comparison-operators\"\n      }}>{`comparison operator`}</a>{` and a regular expression to block `}<inlineCode parentName=\"p\">{`autodiscover.xml`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`autodiscover.src`}</inlineCode>{` requests:`}</p>\n    <table>\n  <thead>\n  <tr>\n    <th>Expression</th>\n    <th>Action</th>\n  </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>http.request.uri.path matches \"/autodiscover.(xml|src)$\"</code></td>\n      <td><em>Block</em></td>\n    </tr>\n  </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}