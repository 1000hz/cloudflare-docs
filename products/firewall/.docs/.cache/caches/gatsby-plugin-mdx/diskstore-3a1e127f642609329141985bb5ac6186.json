{"expireTime":9007200899183226000,"key":"gatsby-plugin-mdx-entire-payload-35769758a7fb5e72bc0cde6b711aa223-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Stop R-U-Dead-Yet? (R.U.D.Y.) attacks","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":40,"offset":40},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":40,"offset":40},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"R-U-Dead-Yet (R.U.D.Y.) attacks accomplish denial of service (DoS) by submitting long form fields. Use Firewall Rules to stop these attacks by blocking requests that do not have a legitimate session cookie.","position":{"start":{"line":4,"column":1,"offset":42},"end":{"line":4,"column":207,"offset":248},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":42},"end":{"line":4,"column":207,"offset":248},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This example combines three expressions to target HTTP POST requests that do not contain a legitimate authenticated session cookie.","position":{"start":{"line":6,"column":1,"offset":250},"end":{"line":6,"column":132,"offset":381},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":250},"end":{"line":6,"column":132,"offset":381},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first expression uses the ","position":{"start":{"line":8,"column":1,"offset":383},"end":{"line":8,"column":31,"offset":413},"indent":[]}},{"type":"inlineCode","value":"http.request.uri.path","position":{"start":{"line":8,"column":31,"offset":413},"end":{"line":8,"column":54,"offset":436},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":8,"column":54,"offset":436},"end":{"line":8,"column":55,"offset":437},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/ruleset-engine/rules-language/fields#standard-fields","children":[{"type":"text","value":"field","position":{"start":{"line":8,"column":56,"offset":438},"end":{"line":8,"column":61,"offset":443},"indent":[]}}],"position":{"start":{"line":8,"column":55,"offset":437},"end":{"line":8,"column":150,"offset":532},"indent":[]}},{"type":"text","value":" to target the paths to secure from R.U.D.Y.:","position":{"start":{"line":8,"column":150,"offset":532},"end":{"line":8,"column":195,"offset":577},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":383},"end":{"line":8,"column":195,"offset":577},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"http.request.uri.path matches \"(comment|conversation|event|poll)/create\"","position":{"start":{"line":10,"column":1,"offset":579},"end":{"line":12,"column":4,"offset":663},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The second uses a regular expression to match the format of a legitimate ","position":{"start":{"line":14,"column":1,"offset":665},"end":{"line":14,"column":74,"offset":738},"indent":[]}},{"type":"inlineCode","value":"auth_session","position":{"start":{"line":14,"column":74,"offset":738},"end":{"line":14,"column":88,"offset":752},"indent":[]}},{"type":"text","value":" cookie. The ","position":{"start":{"line":14,"column":88,"offset":752},"end":{"line":14,"column":101,"offset":765},"indent":[]}},{"type":"inlineCode","value":"not","position":{"start":{"line":14,"column":101,"offset":765},"end":{"line":14,"column":106,"offset":770},"indent":[]}},{"type":"text","value":" operator targets requests where that cookie is not formatted correctly:","position":{"start":{"line":14,"column":106,"offset":770},"end":{"line":14,"column":178,"offset":842},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":665},"end":{"line":14,"column":178,"offset":842},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"not http.cookie matches \"auth_session=[0-9a-zA-Z]{32}-[0-9]{10}-[0-9a-z]{6}\"","position":{"start":{"line":16,"column":1,"offset":844},"end":{"line":18,"column":4,"offset":932},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The third expression targets HTTP POST requests:","position":{"start":{"line":20,"column":1,"offset":934},"end":{"line":20,"column":49,"offset":982},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":934},"end":{"line":20,"column":49,"offset":982},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"http.request.method eq \"POST\"","position":{"start":{"line":22,"column":1,"offset":984},"end":{"line":24,"column":4,"offset":1025},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The expressions are combined using the ","position":{"start":{"line":26,"column":1,"offset":1027},"end":{"line":26,"column":40,"offset":1066},"indent":[]}},{"type":"inlineCode","value":"and","position":{"start":{"line":26,"column":40,"offset":1066},"end":{"line":26,"column":45,"offset":1071},"indent":[]}},{"type":"text","value":" operator. When an HTTP POST request to any of the specified URIs does not contain a properly formatted ","position":{"start":{"line":26,"column":45,"offset":1071},"end":{"line":26,"column":149,"offset":1175},"indent":[]}},{"type":"inlineCode","value":"auth_session","position":{"start":{"line":26,"column":149,"offset":1175},"end":{"line":26,"column":163,"offset":1189},"indent":[]}},{"type":"text","value":" cookie, Cloudflare blocks the request:","position":{"start":{"line":26,"column":163,"offset":1189},"end":{"line":26,"column":202,"offset":1228},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1027},"end":{"line":26,"column":202,"offset":1228},"indent":[]}},{"type":"jsx","value":"<table>\n  <thead>\n  <tr>\n    <th>Expression</th>\n    <th>Action</th>\n  </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>http.request.method eq \"POST\" and http.request.uri.path matches \"(comment|conversation|event poll)create\" and not http.cookie matches \"auth_session=[0-9a-zA-Z]{32}-[0-9]{10}-[0-9a-z]{6}\"</code></td>\n      <td><em>Block</em></td>\n    </tr>\n  </tbody>\n</table>","position":{"start":{"line":28,"column":1,"offset":1230},"end":{"line":41,"column":9,"offset":1611},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"pcx-content-type\":\"configuration\"}","position":{"start":{"line":44,"column":1,"offset":1614},"end":{"line":44,"column":65,"offset":1678},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":44,"column":65,"offset":1678}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"pcx-content-type\": \"configuration\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"stop-r-u-dead-yet-rudy-attacks\"\n  }, \"Stop R-U-Dead-Yet? (R.U.D.Y.) attacks\"), mdx(\"p\", null, \"R-U-Dead-Yet (R.U.D.Y.) attacks accomplish denial of service (DoS) by submitting long form fields. Use Firewall Rules to stop these attacks by blocking requests that do not have a legitimate session cookie.\"), mdx(\"p\", null, \"This example combines three expressions to target HTTP POST requests that do not contain a legitimate authenticated session cookie.\"), mdx(\"p\", null, \"The first expression uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.request.uri.path\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/ruleset-engine/rules-language/fields#standard-fields\"\n  }, \"field\"), \" to target the paths to secure from R.U.D.Y.:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"http.request.uri.path matches \\\"(comment|conversation|event|poll)/create\\\"\\n\")), mdx(\"p\", null, \"The second uses a regular expression to match the format of a legitimate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auth_session\"), \" cookie. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"not\"), \" operator targets requests where that cookie is not formatted correctly:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"not http.cookie matches \\\"auth_session=[0-9a-zA-Z]{32}-[0-9]{10}-[0-9a-z]{6}\\\"\\n\")), mdx(\"p\", null, \"The third expression targets HTTP POST requests:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"http.request.method eq \\\"POST\\\"\\n\")), mdx(\"p\", null, \"The expressions are combined using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"and\"), \" operator. When an HTTP POST request to any of the specified URIs does not contain a properly formatted \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auth_session\"), \" cookie, Cloudflare blocks the request:\"), mdx(\"table\", null, mdx(\"thead\", null, mdx(\"tr\", null, mdx(\"th\", null, \"Expression\"), mdx(\"th\", null, \"Action\"))), mdx(\"tbody\", null, mdx(\"tr\", null, mdx(\"td\", null, mdx(\"code\", null, \"http.request.method eq \\\"POST\\\" and http.request.uri.path matches \\\"(comment|conversation|event poll)create\\\" and not http.cookie matches \\\"auth_session=[0-9a-zA-Z]\", 32, \"-[0-9]\", 10, \"-[0-9a-z]\", 6, \"\\\"\")), mdx(\"td\", null, mdx(\"em\", null, \"Block\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"pcx-content-type\": \"configuration\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"stop-r-u-dead-yet-rudy-attacks\"\n    }}>{`Stop R-U-Dead-Yet? (R.U.D.Y.) attacks`}</h1>\n    <p>{`R-U-Dead-Yet (R.U.D.Y.) attacks accomplish denial of service (DoS) by submitting long form fields. Use Firewall Rules to stop these attacks by blocking requests that do not have a legitimate session cookie.`}</p>\n    <p>{`This example combines three expressions to target HTTP POST requests that do not contain a legitimate authenticated session cookie.`}</p>\n    <p>{`The first expression uses the `}<inlineCode parentName=\"p\">{`http.request.uri.path`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.cloudflare.com/ruleset-engine/rules-language/fields#standard-fields\"\n      }}>{`field`}</a>{` to target the paths to secure from R.U.D.Y.:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`http.request.uri.path matches \"(comment|conversation|event|poll)/create\"\n`}</code></pre>\n    <p>{`The second uses a regular expression to match the format of a legitimate `}<inlineCode parentName=\"p\">{`auth_session`}</inlineCode>{` cookie. The `}<inlineCode parentName=\"p\">{`not`}</inlineCode>{` operator targets requests where that cookie is not formatted correctly:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`not http.cookie matches \"auth_session=[0-9a-zA-Z]{32}-[0-9]{10}-[0-9a-z]{6}\"\n`}</code></pre>\n    <p>{`The third expression targets HTTP POST requests:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`http.request.method eq \"POST\"\n`}</code></pre>\n    <p>{`The expressions are combined using the `}<inlineCode parentName=\"p\">{`and`}</inlineCode>{` operator. When an HTTP POST request to any of the specified URIs does not contain a properly formatted `}<inlineCode parentName=\"p\">{`auth_session`}</inlineCode>{` cookie, Cloudflare blocks the request:`}</p>\n    <table>\n  <thead>\n  <tr>\n    <th>Expression</th>\n    <th>Action</th>\n  </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>http.request.method eq \"POST\" and http.request.uri.path matches \"(comment|conversation|event poll)create\" and not http.cookie matches \"auth_session=[0-9a-zA-Z]{32}-[0-9]{10}-[0-9a-z]{6}\"</code></td>\n      <td><em>Block</em></td>\n    </tr>\n  </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}