{"expireTime":9007200899183226000,"key":"gatsby-plugin-mdx-entire-payload-1cf2fc6e788ac78d167aef2d65f6aa18-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Firewall Rules language","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":26,"offset":26},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":26,"offset":26},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Cloudflare Firewall Rules language is a flexible and intuitive specification for building Firewall Rules expressions. Based on the widely known ","position":{"start":{"line":4,"column":1,"offset":28},"end":{"line":4,"column":149,"offset":176},"indent":[]}},{"type":"link","title":null,"url":"https://www.wireshark.org/docs/wsug_html_chunked/ChWorkBuildDisplayFilterSection.html","children":[{"type":"text","value":"Wireshark display filters","position":{"start":{"line":4,"column":150,"offset":177},"end":{"line":4,"column":175,"offset":202},"indent":[]}}],"position":{"start":{"line":4,"column":149,"offset":176},"end":{"line":4,"column":263,"offset":290},"indent":[]}},{"type":"text","value":", the Firewall Rules language allows you to precisely target HTTP requests with a syntax and semantics familiar to security engineers.","position":{"start":{"line":4,"column":263,"offset":290},"end":{"line":4,"column":397,"offset":424},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":28},"end":{"line":4,"column":397,"offset":424},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When evaluating a firewall rule, Cloudflare compares values associated with an HTTP request to those defined in the firewall rule's ","position":{"start":{"line":6,"column":1,"offset":426},"end":{"line":6,"column":133,"offset":558},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/firewall/cf-firewall-rules/fields-and-expressions/","children":[{"type":"text","value":"expression","position":{"start":{"line":6,"column":134,"offset":559},"end":{"line":6,"column":144,"offset":569},"indent":[]}}],"position":{"start":{"line":6,"column":133,"offset":558},"end":{"line":6,"column":231,"offset":656},"indent":[]}},{"type":"text","value":". If the expression evaluates ","position":{"start":{"line":6,"column":231,"offset":656},"end":{"line":6,"column":261,"offset":686},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":6,"column":261,"offset":686},"end":{"line":6,"column":267,"offset":692},"indent":[]}},{"type":"text","value":", Cloudflare triggers the ","position":{"start":{"line":6,"column":267,"offset":692},"end":{"line":6,"column":293,"offset":718},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/firewall/cf-firewall-rules/actions/","children":[{"type":"text","value":"action","position":{"start":{"line":6,"column":294,"offset":719},"end":{"line":6,"column":300,"offset":725},"indent":[]}}],"position":{"start":{"line":6,"column":293,"offset":718},"end":{"line":6,"column":372,"offset":797},"indent":[]}},{"type":"text","value":" for that rule.","position":{"start":{"line":6,"column":372,"offset":797},"end":{"line":6,"column":387,"offset":812},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":426},"end":{"line":6,"column":387,"offset":812},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Firewall Rules language supports two kinds of expressionâ€”simple and compound.","position":{"start":{"line":8,"column":1,"offset":814},"end":{"line":8,"column":82,"offset":895},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":814},"end":{"line":8,"column":82,"offset":895},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Simple expressions","position":{"start":{"line":10,"column":4,"offset":900},"end":{"line":10,"column":22,"offset":918},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":897},"end":{"line":10,"column":22,"offset":918},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Simple expressions","position":{"start":{"line":12,"column":3,"offset":922},"end":{"line":12,"column":21,"offset":940},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":920},"end":{"line":12,"column":23,"offset":942},"indent":[]}},{"type":"text","value":" compare a value from an HTTP request to a value defined in the expression. For example, this simple expression matches Microsoft Exchange Autodiscover requests:","position":{"start":{"line":12,"column":23,"offset":942},"end":{"line":12,"column":184,"offset":1103},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":920},"end":{"line":12,"column":184,"offset":1103},"indent":[]}},{"type":"code","lang":"txt","meta":null,"value":"http.request.uri.path matches \"/autodiscover\\.(xml|src)$\"","position":{"start":{"line":14,"column":1,"offset":1105},"end":{"line":16,"column":4,"offset":1173},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Simple expressions have the syntax","position":{"start":{"line":18,"column":1,"offset":1175},"end":{"line":18,"column":35,"offset":1209},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1175},"end":{"line":18,"column":35,"offset":1209},"indent":[]}},{"type":"code","lang":"txt","meta":null,"value":"<field> <comparison-operator> <value>","position":{"start":{"line":20,"column":1,"offset":1211},"end":{"line":22,"column":4,"offset":1259},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"where","position":{"start":{"line":24,"column":1,"offset":1261},"end":{"line":24,"column":6,"offset":1266},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1261},"end":{"line":24,"column":6,"offset":1266},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developers.cloudflare.com/firewall/cf-firewall-language/fields/#fields","children":[{"type":"text","value":"Fields","position":{"start":{"line":26,"column":4,"offset":1271},"end":{"line":26,"column":10,"offset":1277},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":1270},"end":{"line":26,"column":91,"offset":1358},"indent":[]}},{"type":"text","value":" specify properties associated with an HTTP request.","position":{"start":{"line":26,"column":91,"offset":1358},"end":{"line":26,"column":143,"offset":1410},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":1270},"end":{"line":26,"column":143,"offset":1410},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1268},"end":{"line":27,"column":1,"offset":1411},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developers.cloudflare.com/firewall/cf-firewall-language/operators/#comparison-operators","children":[{"type":"text","value":"Comparison operators","position":{"start":{"line":28,"column":4,"offset":1415},"end":{"line":28,"column":24,"offset":1435},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1414},"end":{"line":28,"column":122,"offset":1533},"indent":[]}},{"type":"text","value":" define how values must relate to actual request data for an expression to return ","position":{"start":{"line":28,"column":122,"offset":1533},"end":{"line":28,"column":204,"offset":1615},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":28,"column":204,"offset":1615},"end":{"line":28,"column":210,"offset":1621},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":28,"column":210,"offset":1621},"end":{"line":28,"column":211,"offset":1622},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1414},"end":{"line":28,"column":211,"offset":1622},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1412},"end":{"line":29,"column":1,"offset":1623},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developers.cloudflare.com/firewall/cf-firewall-language/values/#values","children":[{"type":"text","value":"Values","position":{"start":{"line":30,"column":4,"offset":1627},"end":{"line":30,"column":10,"offset":1633},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":1626},"end":{"line":30,"column":91,"offset":1714},"indent":[]}},{"type":"text","value":" represent the data associated with fields. When evaluating a firewall rule, Cloudflare compares these values with the actual data obtained from the request.","position":{"start":{"line":30,"column":91,"offset":1714},"end":{"line":30,"column":248,"offset":1871},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":1626},"end":{"line":30,"column":248,"offset":1871},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1624},"end":{"line":30,"column":248,"offset":1871},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1268},"end":{"line":30,"column":248,"offset":1871},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Compound expressions","position":{"start":{"line":32,"column":4,"offset":1876},"end":{"line":32,"column":24,"offset":1896},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1873},"end":{"line":32,"column":24,"offset":1896},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Compound expressions","position":{"start":{"line":34,"column":3,"offset":1900},"end":{"line":34,"column":23,"offset":1920},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1898},"end":{"line":34,"column":25,"offset":1922},"indent":[]}},{"type":"text","value":" use ","position":{"start":{"line":34,"column":25,"offset":1922},"end":{"line":34,"column":30,"offset":1927},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/firewall/cf-firewall-language/operators/#logical-operators","children":[{"type":"text","value":"logical operators","position":{"start":{"line":34,"column":31,"offset":1928},"end":{"line":34,"column":48,"offset":1945},"indent":[]}}],"position":{"start":{"line":34,"column":30,"offset":1927},"end":{"line":34,"column":143,"offset":2040},"indent":[]}},{"type":"text","value":" such as ","position":{"start":{"line":34,"column":143,"offset":2040},"end":{"line":34,"column":152,"offset":2049},"indent":[]}},{"type":"inlineCode","value":"and","position":{"start":{"line":34,"column":152,"offset":2049},"end":{"line":34,"column":157,"offset":2054},"indent":[]}},{"type":"text","value":" to combine two or more expressions into a single expression.","position":{"start":{"line":34,"column":157,"offset":2054},"end":{"line":34,"column":218,"offset":2115},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1898},"end":{"line":34,"column":218,"offset":2115},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, this expression uses the ","position":{"start":{"line":36,"column":1,"offset":2117},"end":{"line":36,"column":39,"offset":2155},"indent":[]}},{"type":"inlineCode","value":"and","position":{"start":{"line":36,"column":39,"offset":2155},"end":{"line":36,"column":44,"offset":2160},"indent":[]}},{"type":"text","value":" operator to target requests to ","position":{"start":{"line":36,"column":44,"offset":2160},"end":{"line":36,"column":76,"offset":2192},"indent":[]}},{"type":"inlineCode","value":"www.example.com","position":{"start":{"line":36,"column":76,"offset":2192},"end":{"line":36,"column":93,"offset":2209},"indent":[]}},{"type":"text","value":" that are not on ports 80 or 443:","position":{"start":{"line":36,"column":93,"offset":2209},"end":{"line":36,"column":126,"offset":2242},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2117},"end":{"line":36,"column":126,"offset":2242},"indent":[]}},{"type":"code","lang":"txt","meta":null,"value":"host eq www.example.com and not cf.edge.server_port in {80 443}","position":{"start":{"line":38,"column":1,"offset":2244},"end":{"line":40,"column":4,"offset":2318},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Compound expressions have the following general syntax:","position":{"start":{"line":42,"column":1,"offset":2320},"end":{"line":42,"column":56,"offset":2375},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2320},"end":{"line":42,"column":56,"offset":2375},"indent":[]}},{"type":"code","lang":"txt","meta":null,"value":"<expression> <logical-operator> <expression>","position":{"start":{"line":44,"column":1,"offset":2377},"end":{"line":46,"column":4,"offset":2432},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Compound expressions allow you to generate sophisticated, highly targeted firewall rules.","position":{"start":{"line":48,"column":1,"offset":2434},"end":{"line":48,"column":90,"offset":2523},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2434},"end":{"line":48,"column":90,"offset":2523},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Grouping symbols and functions","position":{"start":{"line":50,"column":4,"offset":2528},"end":{"line":50,"column":34,"offset":2558},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2525},"end":{"line":50,"column":34,"offset":2558},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Firewall Rules language includes support for grouping symbols and functions. Each of these expand the power and flexibility of the language:","position":{"start":{"line":52,"column":1,"offset":2560},"end":{"line":52,"column":145,"offset":2704},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2560},"end":{"line":52,"column":145,"offset":2704},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developers.cloudflare.com/firewall/cf-firewall-language/operators/#grouping-symbols","children":[{"type":"text","value":"Grouping symbols","position":{"start":{"line":54,"column":4,"offset":2709},"end":{"line":54,"column":20,"offset":2725},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":2708},"end":{"line":54,"column":114,"offset":2819},"indent":[]}},{"type":"text","value":" allow you to explicitly group expressions that should be evaluated together.","position":{"start":{"line":54,"column":114,"offset":2819},"end":{"line":54,"column":191,"offset":2896},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":2708},"end":{"line":54,"column":191,"offset":2896},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2706},"end":{"line":55,"column":1,"offset":2897},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developers.cloudflare.com/firewall/cf-firewall-language/functions/#functions","children":[{"type":"text","value":"Functions","position":{"start":{"line":56,"column":4,"offset":2901},"end":{"line":56,"column":13,"offset":2910},"indent":[]}}],"position":{"start":{"line":56,"column":3,"offset":2900},"end":{"line":56,"column":100,"offset":2997},"indent":[]}},{"type":"text","value":" allow you to manipulate and validate values in expressions.","position":{"start":{"line":56,"column":100,"offset":2997},"end":{"line":56,"column":160,"offset":3057},"indent":[]}}],"position":{"start":{"line":56,"column":3,"offset":2900},"end":{"line":56,"column":160,"offset":3057},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":2898},"end":{"line":56,"column":160,"offset":3057},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2706},"end":{"line":56,"column":160,"offset":3057},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"pcx-content-type\":\"reference\",\"order\":600}","position":{"start":{"line":59,"column":1,"offset":3060},"end":{"line":59,"column":73,"offset":3132},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":59,"column":73,"offset":3132}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"pcx-content-type\": \"reference\",\n  \"order\": 600\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"firewall-rules-language\"\n  }, \"Firewall Rules language\"), mdx(\"p\", null, \"The Cloudflare Firewall Rules language is a flexible and intuitive specification for building Firewall Rules expressions. Based on the widely known \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.wireshark.org/docs/wsug_html_chunked/ChWorkBuildDisplayFilterSection.html\"\n  }, \"Wireshark display filters\"), \", the Firewall Rules language allows you to precisely target HTTP requests with a syntax and semantics familiar to security engineers.\"), mdx(\"p\", null, \"When evaluating a firewall rule, Cloudflare compares values associated with an HTTP request to those defined in the firewall rule's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-rules/fields-and-expressions/\"\n  }, \"expression\"), \". If the expression evaluates \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", Cloudflare triggers the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-rules/actions/\"\n  }, \"action\"), \" for that rule.\"), mdx(\"p\", null, \"The Firewall Rules language supports two kinds of expression\\u2014simple and compound.\"), mdx(\"h2\", {\n    \"id\": \"simple-expressions\"\n  }, \"Simple expressions\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Simple expressions\"), \" compare a value from an HTTP request to a value defined in the expression. For example, this simple expression matches Microsoft Exchange Autodiscover requests:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"http.request.uri.path matches \\\"/autodiscover\\\\.(xml|src)$\\\"\\n\")), mdx(\"p\", null, \"Simple expressions have the syntax\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"<field> <comparison-operator> <value>\\n\")), mdx(\"p\", null, \"where\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-language/fields/#fields\"\n  }, \"Fields\"), \" specify properties associated with an HTTP request.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-language/operators/#comparison-operators\"\n  }, \"Comparison operators\"), \" define how values must relate to actual request data for an expression to return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-language/values/#values\"\n  }, \"Values\"), \" represent the data associated with fields. When evaluating a firewall rule, Cloudflare compares these values with the actual data obtained from the request.\"))), mdx(\"h2\", {\n    \"id\": \"compound-expressions\"\n  }, \"Compound expressions\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Compound expressions\"), \" use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-language/operators/#logical-operators\"\n  }, \"logical operators\"), \" such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"and\"), \" to combine two or more expressions into a single expression.\"), mdx(\"p\", null, \"For example, this expression uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"and\"), \" operator to target requests to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"www.example.com\"), \" that are not on ports 80 or 443:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"host eq www.example.com and not cf.edge.server_port in {80 443}\\n\")), mdx(\"p\", null, \"Compound expressions have the following general syntax:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"<expression> <logical-operator> <expression>\\n\")), mdx(\"p\", null, \"Compound expressions allow you to generate sophisticated, highly targeted firewall rules.\"), mdx(\"h2\", {\n    \"id\": \"grouping-symbols-and-functions\"\n  }, \"Grouping symbols and functions\"), mdx(\"p\", null, \"The Firewall Rules language includes support for grouping symbols and functions. Each of these expand the power and flexibility of the language:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-language/operators/#grouping-symbols\"\n  }, \"Grouping symbols\"), \" allow you to explicitly group expressions that should be evaluated together.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-language/functions/#functions\"\n  }, \"Functions\"), \" allow you to manipulate and validate values in expressions.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"pcx-content-type\": \"reference\",\n  \"order\": 600\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"firewall-rules-language\"\n    }}>{`Firewall Rules language`}</h1>\n    <p>{`The Cloudflare Firewall Rules language is a flexible and intuitive specification for building Firewall Rules expressions. Based on the widely known `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.wireshark.org/docs/wsug_html_chunked/ChWorkBuildDisplayFilterSection.html\"\n      }}>{`Wireshark display filters`}</a>{`, the Firewall Rules language allows you to precisely target HTTP requests with a syntax and semantics familiar to security engineers.`}</p>\n    <p>{`When evaluating a firewall rule, Cloudflare compares values associated with an HTTP request to those defined in the firewall rule's `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-rules/fields-and-expressions/\"\n      }}>{`expression`}</a>{`. If the expression evaluates `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`, Cloudflare triggers the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-rules/actions/\"\n      }}>{`action`}</a>{` for that rule.`}</p>\n    <p>{`The Firewall Rules language supports two kinds of expressionâ€”simple and compound.`}</p>\n    <h2 {...{\n      \"id\": \"simple-expressions\"\n    }}>{`Simple expressions`}</h2>\n    <p><strong parentName=\"p\">{`Simple expressions`}</strong>{` compare a value from an HTTP request to a value defined in the expression. For example, this simple expression matches Microsoft Exchange Autodiscover requests:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-txt\"\n      }}>{`http.request.uri.path matches \"/autodiscover\\\\.(xml|src)$\"\n`}</code></pre>\n    <p>{`Simple expressions have the syntax`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-txt\"\n      }}>{`<field> <comparison-operator> <value>\n`}</code></pre>\n    <p>{`where`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-language/fields/#fields\"\n          }}>{`Fields`}</a>{` specify properties associated with an HTTP request.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-language/operators/#comparison-operators\"\n          }}>{`Comparison operators`}</a>{` define how values must relate to actual request data for an expression to return `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-language/values/#values\"\n          }}>{`Values`}</a>{` represent the data associated with fields. When evaluating a firewall rule, Cloudflare compares these values with the actual data obtained from the request.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"compound-expressions\"\n    }}>{`Compound expressions`}</h2>\n    <p><strong parentName=\"p\">{`Compound expressions`}</strong>{` use `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-language/operators/#logical-operators\"\n      }}>{`logical operators`}</a>{` such as `}<inlineCode parentName=\"p\">{`and`}</inlineCode>{` to combine two or more expressions into a single expression.`}</p>\n    <p>{`For example, this expression uses the `}<inlineCode parentName=\"p\">{`and`}</inlineCode>{` operator to target requests to `}<inlineCode parentName=\"p\">{`www.example.com`}</inlineCode>{` that are not on ports 80 or 443:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-txt\"\n      }}>{`host eq www.example.com and not cf.edge.server_port in {80 443}\n`}</code></pre>\n    <p>{`Compound expressions have the following general syntax:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-txt\"\n      }}>{`<expression> <logical-operator> <expression>\n`}</code></pre>\n    <p>{`Compound expressions allow you to generate sophisticated, highly targeted firewall rules.`}</p>\n    <h2 {...{\n      \"id\": \"grouping-symbols-and-functions\"\n    }}>{`Grouping symbols and functions`}</h2>\n    <p>{`The Firewall Rules language includes support for grouping symbols and functions. Each of these expand the power and flexibility of the language:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-language/operators/#grouping-symbols\"\n          }}>{`Grouping symbols`}</a>{` allow you to explicitly group expressions that should be evaluated together.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-language/functions/#functions\"\n          }}>{`Functions`}</a>{` allow you to manipulate and validate values in expressions.`}</p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}