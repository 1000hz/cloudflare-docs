{"expireTime":9007200899183228000,"key":"gatsby-plugin-mdx-entire-payload-eb1fbbd733fb785f7ad02cd65af6fa64-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Expression validation","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":24,"offset":24},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":24,"offset":24},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Cloudflare Filters API supports an endpoint for validating expressions.","position":{"start":{"line":4,"column":1,"offset":26},"end":{"line":4,"column":76,"offset":101},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":26},"end":{"line":4,"column":76,"offset":101},"indent":[]}},{"type":"jsx","value":"<TableWrap>\n  <table style=\"width: 100%;\">\n    <thead>\n        <tr>\n            <th>\n                Operation\n            </th>\n            <th>\n                Method + Endpoint\n            </th>\n            <th>\n                Notes\n            </th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td style='width:25%; word-wrap:break-word; white-space:normal'>Validate expression via query string (<em>?expression=</em>) </td>\n            <td><code class='InlineCode'>GET /filters/validate-expr</code></td>\n            <td>Allows testing and validating expressions without changing anything</td>\n        </tr>\n        <tr>\n            <td style='width:25%; word-wrap:break-word; white-space:normal'>Validate expression via JSON object</td>\n            <td><code class='InlineCode'>POST /filters/validate-expr</code></td>\n            <td>Allows testing and validating expressions without changing anything</td>\n        </tr>\n    </tbody>\n  </table>\n</TableWrap>","position":{"start":{"line":6,"column":1,"offset":103},"end":{"line":34,"column":13,"offset":1086},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Examples","position":{"start":{"line":36,"column":4,"offset":1091},"end":{"line":36,"column":12,"offset":1099},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1088},"end":{"line":36,"column":12,"offset":1099},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Validate expression via query string","position":{"start":{"line":38,"column":5,"offset":1105},"end":{"line":38,"column":41,"offset":1141},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1101},"end":{"line":38,"column":41,"offset":1141},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"---\nheader: Request\n---\ncurl -X GET \\\n'https://api.cloudflare.com/client/v4/filters/validate-expr?expression=ip.src==34' \\\n-H \"X-Auth-Email: <EMAIL>\" \\\n-H \"X-Auth-Key: <API_KEY>\"","position":{"start":{"line":40,"column":1,"offset":1143},"end":{"line":48,"column":4,"offset":1333},"indent":[1,1,1,1,1,1,1,1]}},{"type":"code","lang":"json","meta":null,"value":"---\nheader: Response\n---\n{\n  \"result\": null,\n  \"success\": false,\n  \"errors\": [\n    {\n      \"message\": \"Filter parsing error:\\n`ip.src==34`\\n          ^^ couldn't parse address in network: invalid IP address syntax\\n\"\n    }\n  ],\n  \"messages\": null\n}","position":{"start":{"line":50,"column":1,"offset":1335},"end":{"line":64,"column":4,"offset":1595},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note the validation error in the response. In this example, the error is due to an invalid IP address format:","position":{"start":{"line":66,"column":1,"offset":1597},"end":{"line":66,"column":110,"offset":1706},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1597},"end":{"line":66,"column":110,"offset":1706},"indent":[]}},{"type":"code","lang":"txt","meta":null,"value":"Filter parsing error:\n`ip.src==34`\n          ^^ couldn't parse address in network: invalid IP address syntax","position":{"start":{"line":68,"column":1,"offset":1708},"end":{"line":72,"column":4,"offset":1827},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Validate expression via JSON object","position":{"start":{"line":74,"column":5,"offset":1833},"end":{"line":74,"column":40,"offset":1868},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1829},"end":{"line":74,"column":40,"offset":1868},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"---\nheader: Request\n---\ncurl -X POST \\\n\"https://api.cloudflare.com/client/v4/filters/validate-expr\" \\\n-H \"X-Auth-Email: <EMAIL>\" \\\n-H \"X-Auth-Key: <API_KEY>\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"expression\": \"ip.src in {2400:cb00::/32 2405:8100::/2000 2c0f:f248::/32 2a06:98c0::/29}\"\n}' ","position":{"start":{"line":76,"column":1,"offset":1870},"end":{"line":88,"column":4,"offset":2181},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"json","meta":null,"value":"---\nheader: Response\n---\n{\n  \"result\": null,\n  \"success\": false,\n  \"errors\": [\n    {\n      \"message\": \"Filter parsing error:\\n`ip.src in {2400:cb00::/32 2405:8100::/2000 2c0f:f248::/32 2a06:98c0::/29}`\\n                                        ^^^^ number too large to fit in target type while parsing with radix 10\\n\"\n    }\n  ],\n  \"messages\": null\n}","position":{"start":{"line":90,"column":1,"offset":2183},"end":{"line":104,"column":4,"offset":2544},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note the validation error in the response. In this example, the value for the subnet mask, ","position":{"start":{"line":106,"column":1,"offset":2546},"end":{"line":106,"column":92,"offset":2637},"indent":[]}},{"type":"inlineCode","value":"/2000","position":{"start":{"line":106,"column":92,"offset":2637},"end":{"line":106,"column":99,"offset":2644},"indent":[]}},{"type":"text","value":", is not a valid IPv6 CIDR mask:","position":{"start":{"line":106,"column":99,"offset":2644},"end":{"line":106,"column":131,"offset":2676},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":2546},"end":{"line":106,"column":131,"offset":2676},"indent":[]}},{"type":"code","lang":"txt","meta":null,"value":"Filter parsing error:\n`ip.src in {2400:cb00::/32 2405:8100::/2000 2c0f:f248::/32 2a06:98c0::/29}`\n                                        ^^^^ number too large to fit in target type while parsing with radix 10","position":{"start":{"line":108,"column":1,"offset":2678},"end":{"line":112,"column":4,"offset":2898},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"pcx-content-type\":\"reference\",\"order\":480,\"type\":\"table\"}","position":{"start":{"line":115,"column":1,"offset":2901},"end":{"line":115,"column":88,"offset":2988},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":115,"column":88,"offset":2988}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"pcx-content-type\": \"reference\",\n  \"order\": 480,\n  \"type\": \"table\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableWrap = makeShortcode(\"TableWrap\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"expression-validation\"\n  }, \"Expression validation\"), mdx(\"p\", null, \"The Cloudflare Filters API supports an endpoint for validating expressions.\"), mdx(TableWrap, {\n    mdxType: \"TableWrap\"\n  }, mdx(\"table\", {\n    style: {\n      \"width\": \"100%\"\n    }\n  }, mdx(\"thead\", null, mdx(\"tr\", null, mdx(\"th\", null, \"Operation\"), mdx(\"th\", null, \"Method + Endpoint\"), mdx(\"th\", null, \"Notes\"))), mdx(\"tbody\", null, mdx(\"tr\", null, mdx(\"td\", {\n    style: {\n      \"width\": \"25%\",\n      \"wordWrap\": \"break-word\",\n      \"whiteSpace\": \"normal\"\n    }\n  }, \"Validate expression via query string (\", mdx(\"em\", null, \"?expression=\"), \") \"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"GET /filters/validate-expr\")), mdx(\"td\", null, \"Allows testing and validating expressions without changing anything\")), mdx(\"tr\", null, mdx(\"td\", {\n    style: {\n      \"width\": \"25%\",\n      \"wordWrap\": \"break-word\",\n      \"whiteSpace\": \"normal\"\n    }\n  }, \"Validate expression via JSON object\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"POST /filters/validate-expr\")), mdx(\"td\", null, \"Allows testing and validating expressions without changing anything\"))))), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"validate-expression-via-query-string\"\n  }, \"Validate expression via query string\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"---\\nheader: Request\\n---\\ncurl -X GET \\\\\\n'https://api.cloudflare.com/client/v4/filters/validate-expr?expression=ip.src==34' \\\\\\n-H \\\"X-Auth-Email: <EMAIL>\\\" \\\\\\n-H \\\"X-Auth-Key: <API_KEY>\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"---\\nheader: Response\\n---\\n{\\n  \\\"result\\\": null,\\n  \\\"success\\\": false,\\n  \\\"errors\\\": [\\n    {\\n      \\\"message\\\": \\\"Filter parsing error:\\\\n`ip.src==34`\\\\n          ^^ couldn't parse address in network: invalid IP address syntax\\\\n\\\"\\n    }\\n  ],\\n  \\\"messages\\\": null\\n}\\n\")), mdx(\"p\", null, \"Note the validation error in the response. In this example, the error is due to an invalid IP address format:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"Filter parsing error:\\n`ip.src==34`\\n          ^^ couldn't parse address in network: invalid IP address syntax\\n\")), mdx(\"h3\", {\n    \"id\": \"validate-expression-via-json-object\"\n  }, \"Validate expression via JSON object\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"---\\nheader: Request\\n---\\ncurl -X POST \\\\\\n\\\"https://api.cloudflare.com/client/v4/filters/validate-expr\\\" \\\\\\n-H \\\"X-Auth-Email: <EMAIL>\\\" \\\\\\n-H \\\"X-Auth-Key: <API_KEY>\\\" \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-d '{\\n  \\\"expression\\\": \\\"ip.src in {2400:cb00::/32 2405:8100::/2000 2c0f:f248::/32 2a06:98c0::/29}\\\"\\n}' \\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"---\\nheader: Response\\n---\\n{\\n  \\\"result\\\": null,\\n  \\\"success\\\": false,\\n  \\\"errors\\\": [\\n    {\\n      \\\"message\\\": \\\"Filter parsing error:\\\\n`ip.src in {2400:cb00::/32 2405:8100::/2000 2c0f:f248::/32 2a06:98c0::/29}`\\\\n                                        ^^^^ number too large to fit in target type while parsing with radix 10\\\\n\\\"\\n    }\\n  ],\\n  \\\"messages\\\": null\\n}\\n\")), mdx(\"p\", null, \"Note the validation error in the response. In this example, the value for the subnet mask, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/2000\"), \", is not a valid IPv6 CIDR mask:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"Filter parsing error:\\n`ip.src in {2400:cb00::/32 2405:8100::/2000 2c0f:f248::/32 2a06:98c0::/29}`\\n                                        ^^^^ number too large to fit in target type while parsing with radix 10\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"pcx-content-type\": \"reference\",\n  \"order\": 480,\n  \"type\": \"table\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst TableWrap = makeShortcode(\"TableWrap\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"expression-validation\"\n    }}>{`Expression validation`}</h1>\n    <p>{`The Cloudflare Filters API supports an endpoint for validating expressions.`}</p>\n    <TableWrap mdxType=\"TableWrap\">\n  <table style=\"width: 100%;\">\n    <thead>\n        <tr>\n            <th>\n                Operation\n            </th>\n            <th>\n                Method + Endpoint\n            </th>\n            <th>\n                Notes\n            </th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td style='width:25%; word-wrap:break-word; white-space:normal'>Validate expression via query string (<em>?expression=</em>) </td>\n            <td><code class='InlineCode'>GET /filters/validate-expr</code></td>\n            <td>Allows testing and validating expressions without changing anything</td>\n        </tr>\n        <tr>\n            <td style='width:25%; word-wrap:break-word; white-space:normal'>Validate expression via JSON object</td>\n            <td><code class='InlineCode'>POST /filters/validate-expr</code></td>\n            <td>Allows testing and validating expressions without changing anything</td>\n        </tr>\n    </tbody>\n  </table>\n    </TableWrap>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"validate-expression-via-query-string\"\n    }}>{`Validate expression via query string`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`---\nheader: Request\n---\ncurl -X GET \\\\\n'https://api.cloudflare.com/client/v4/filters/validate-expr?expression=ip.src==34' \\\\\n-H \"X-Auth-Email: <EMAIL>\" \\\\\n-H \"X-Auth-Key: <API_KEY>\"\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`---\nheader: Response\n---\n{\n  \"result\": null,\n  \"success\": false,\n  \"errors\": [\n    {\n      \"message\": \"Filter parsing error:\\\\n\\`ip.src==34\\`\\\\n          ^^ couldn't parse address in network: invalid IP address syntax\\\\n\"\n    }\n  ],\n  \"messages\": null\n}\n`}</code></pre>\n    <p>{`Note the validation error in the response. In this example, the error is due to an invalid IP address format:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-txt\"\n      }}>{`Filter parsing error:\n\\`ip.src==34\\`\n          ^^ couldn't parse address in network: invalid IP address syntax\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"validate-expression-via-json-object\"\n    }}>{`Validate expression via JSON object`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`---\nheader: Request\n---\ncurl -X POST \\\\\n\"https://api.cloudflare.com/client/v4/filters/validate-expr\" \\\\\n-H \"X-Auth-Email: <EMAIL>\" \\\\\n-H \"X-Auth-Key: <API_KEY>\" \\\\\n-H \"Content-Type: application/json\" \\\\\n-d '{\n  \"expression\": \"ip.src in {2400:cb00::/32 2405:8100::/2000 2c0f:f248::/32 2a06:98c0::/29}\"\n}' \n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`---\nheader: Response\n---\n{\n  \"result\": null,\n  \"success\": false,\n  \"errors\": [\n    {\n      \"message\": \"Filter parsing error:\\\\n\\`ip.src in {2400:cb00::/32 2405:8100::/2000 2c0f:f248::/32 2a06:98c0::/29}\\`\\\\n                                        ^^^^ number too large to fit in target type while parsing with radix 10\\\\n\"\n    }\n  ],\n  \"messages\": null\n}\n`}</code></pre>\n    <p>{`Note the validation error in the response. In this example, the value for the subnet mask, `}<inlineCode parentName=\"p\">{`/2000`}</inlineCode>{`, is not a valid IPv6 CIDR mask:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-txt\"\n      }}>{`Filter parsing error:\n\\`ip.src in {2400:cb00::/32 2405:8100::/2000 2c0f:f248::/32 2a06:98c0::/29}\\`\n                                        ^^^^ number too large to fit in target type while parsing with radix 10\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}