{"expireTime":9007200899183227000,"key":"gatsby-plugin-mdx-entire-payload-d6404259a632d5e5efebf569a37db284-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Functions","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":12,"offset":12},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":12,"offset":12},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Cloudflare Firewall Rules language provides functions for manipulating and validating values in an expression:","position":{"start":{"line":4,"column":1,"offset":14},"end":{"line":4,"column":115,"offset":128},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":14},"end":{"line":4,"column":115,"offset":128},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#transformation-functions","children":[{"type":"text","value":"Transformation functions","position":{"start":{"line":6,"column":4,"offset":133},"end":{"line":6,"column":28,"offset":157},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":132},"end":{"line":6,"column":56,"offset":185},"indent":[]}},{"type":"text","value":" manipulate values extracted from an HTTP request.","position":{"start":{"line":6,"column":56,"offset":185},"end":{"line":6,"column":106,"offset":235},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":132},"end":{"line":6,"column":106,"offset":235},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":130},"end":{"line":6,"column":106,"offset":235},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":7,"column":3,"offset":238},"end":{"line":7,"column":7,"offset":242},"indent":[]}},{"type":"link","title":null,"url":"#hmac-validation","children":[{"type":"text","value":"HMAC Validation function","position":{"start":{"line":7,"column":8,"offset":243},"end":{"line":7,"column":32,"offset":267},"indent":[]}}],"position":{"start":{"line":7,"column":7,"offset":242},"end":{"line":7,"column":51,"offset":286},"indent":[]}},{"type":"text","value":" tests the validity of an HMAC token. Use it to write expressions that target requests based on the presence of a valid HMAC token.","position":{"start":{"line":7,"column":51,"offset":286},"end":{"line":7,"column":182,"offset":417},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":238},"end":{"line":7,"column":182,"offset":417},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":236},"end":{"line":7,"column":182,"offset":417},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":130},"end":{"line":7,"column":182,"offset":417},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Transformation functions","position":{"start":{"line":9,"column":4,"offset":422},"end":{"line":9,"column":28,"offset":446},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":419},"end":{"line":9,"column":28,"offset":446},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Cloudflare Firewall Rules language supports several functions that transform values extracted from HTTP requests. A common use case for transformation functions is the conversion of a string of characters to uppercase or lowercase, since by default, string evaluation is case sensitive.","position":{"start":{"line":11,"column":1,"offset":448},"end":{"line":11,"column":291,"offset":738},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":448},"end":{"line":11,"column":291,"offset":738},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, the ","position":{"start":{"line":13,"column":1,"offset":740},"end":{"line":13,"column":18,"offset":757},"indent":[]}},{"type":"inlineCode","value":"lower()","position":{"start":{"line":13,"column":18,"offset":757},"end":{"line":13,"column":27,"offset":766},"indent":[]}},{"type":"text","value":" function converts all uppercase characters in a string to lowercase.","position":{"start":{"line":13,"column":27,"offset":766},"end":{"line":13,"column":96,"offset":835},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":740},"end":{"line":13,"column":96,"offset":835},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the expression below, the","position":{"start":{"line":15,"column":1,"offset":837},"end":{"line":15,"column":29,"offset":865},"indent":[]}},{"type":"inlineCode","value":"lower()","position":{"start":{"line":15,"column":29,"offset":865},"end":{"line":15,"column":38,"offset":874},"indent":[]}},{"type":"text","value":" function transforms ","position":{"start":{"line":15,"column":38,"offset":874},"end":{"line":15,"column":59,"offset":895},"indent":[]}},{"type":"inlineCode","value":"http.host","position":{"start":{"line":15,"column":59,"offset":895},"end":{"line":15,"column":70,"offset":906},"indent":[]}},{"type":"text","value":" values to lowercase so that they match the target value ","position":{"start":{"line":15,"column":70,"offset":906},"end":{"line":15,"column":127,"offset":963},"indent":[]}},{"type":"inlineCode","value":"\"www.cloudflare.com\"","position":{"start":{"line":15,"column":127,"offset":963},"end":{"line":15,"column":149,"offset":985},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":15,"column":149,"offset":985},"end":{"line":15,"column":150,"offset":986},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":837},"end":{"line":15,"column":150,"offset":986},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":"lower(http.host) == \"www.cloudflare.com\"","position":{"start":{"line":17,"column":1,"offset":988},"end":{"line":19,"column":4,"offset":1039},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Transformation functions that do not take arrays as an argument type require the ","position":{"start":{"line":21,"column":1,"offset":1041},"end":{"line":21,"column":82,"offset":1122},"indent":[]}},{"type":"inlineCode","value":"[*]","position":{"start":{"line":21,"column":82,"offset":1122},"end":{"line":21,"column":87,"offset":1127},"indent":[]}},{"type":"text","value":" special index notation. Refer to ","position":{"start":{"line":21,"column":87,"offset":1127},"end":{"line":21,"column":121,"offset":1161},"indent":[]}},{"type":"link","title":null,"url":"/cf-firewall-language/values#arrays","children":[{"type":"text","value":"Arrays","position":{"start":{"line":21,"column":122,"offset":1162},"end":{"line":21,"column":128,"offset":1168},"indent":[]}}],"position":{"start":{"line":21,"column":121,"offset":1161},"end":{"line":21,"column":166,"offset":1206},"indent":[]}},{"type":"text","value":" for more information.","position":{"start":{"line":21,"column":166,"offset":1206},"end":{"line":21,"column":188,"offset":1228},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1041},"end":{"line":21,"column":188,"offset":1228},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Cloudflare Firewall Rules language supports these transformation functions:","position":{"start":{"line":23,"column":1,"offset":1230},"end":{"line":23,"column":80,"offset":1309},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1230},"end":{"line":23,"column":80,"offset":1309},"indent":[]}},{"type":"jsx","value":"<Definitions>","position":{"start":{"line":25,"column":1,"offset":1311},"end":{"line":25,"column":14,"offset":1324},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<code>any(<Type>Array</Type>{'<'}<ParamType>Boolean</ParamType>{'>'})</code> <Type>Boolean</Type>","position":{"start":{"line":27,"column":3,"offset":1328},"end":{"line":27,"column":100,"offset":1425},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Returns ","position":{"start":{"line":29,"column":5,"offset":1431},"end":{"line":29,"column":13,"offset":1439},"indent":[]}},{"type":"jsx","value":"<code class=\"InlineCode\">","position":{"start":{"line":29,"column":13,"offset":1439},"end":{"line":29,"column":38,"offset":1464},"indent":[]}},{"type":"text","value":"true","position":{"start":{"line":29,"column":38,"offset":1464},"end":{"line":29,"column":42,"offset":1468},"indent":[]}},{"type":"jsx","value":"</code>","position":{"start":{"line":29,"column":42,"offset":1468},"end":{"line":29,"column":49,"offset":1475},"indent":[]}},{"type":"text","value":" when the comparison operator in the argument returns ","position":{"start":{"line":29,"column":49,"offset":1475},"end":{"line":29,"column":103,"offset":1529},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":29,"column":103,"offset":1529},"end":{"line":29,"column":109,"offset":1535},"indent":[]}},{"type":"text","value":" for ","position":{"start":{"line":29,"column":109,"offset":1535},"end":{"line":29,"column":114,"offset":1540},"indent":[]}},{"type":"jsx","value":"<em>","position":{"start":{"line":29,"column":114,"offset":1540},"end":{"line":29,"column":118,"offset":1544},"indent":[]}},{"type":"text","value":"any","position":{"start":{"line":29,"column":118,"offset":1544},"end":{"line":29,"column":121,"offset":1547},"indent":[]}},{"type":"jsx","value":"</em>","position":{"start":{"line":29,"column":121,"offset":1547},"end":{"line":29,"column":126,"offset":1552},"indent":[]}},{"type":"text","value":" of the values in the argument array. Returns ","position":{"start":{"line":29,"column":126,"offset":1552},"end":{"line":29,"column":172,"offset":1598},"indent":[]}},{"type":"jsx","value":"<code class=\"InlineCode\">","position":{"start":{"line":29,"column":172,"offset":1598},"end":{"line":29,"column":197,"offset":1623},"indent":[]}},{"type":"text","value":"false","position":{"start":{"line":29,"column":197,"offset":1623},"end":{"line":29,"column":202,"offset":1628},"indent":[]}},{"type":"jsx","value":"</code>","position":{"start":{"line":29,"column":202,"offset":1628},"end":{"line":29,"column":209,"offset":1635},"indent":[]}},{"type":"text","value":" otherwise.","position":{"start":{"line":29,"column":209,"offset":1635},"end":{"line":29,"column":220,"offset":1646},"indent":[]}}],"position":{"start":{"line":29,"column":5,"offset":1431},"end":{"line":29,"column":220,"offset":1646},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":1429},"end":{"line":30,"column":3,"offset":1649},"indent":[3]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<em>Example:</em><br />","position":{"start":{"line":31,"column":5,"offset":1654},"end":{"line":31,"column":28,"offset":1677},"indent":[]}},{"type":"jsx","value":"<code class='InlineCode' style='width:100%'>\nany(url_decode(http.request.body.form.values[*])[*] contains \"an xss attack\")\n</code>","position":{"start":{"line":33,"column":5,"offset":1683},"end":{"line":35,"column":12,"offset":1821},"indent":[5,5]}}],"position":{"start":{"line":31,"column":3,"offset":1652},"end":{"line":35,"column":12,"offset":1821},"indent":[1,3,3,3]}}],"position":{"start":{"line":29,"column":3,"offset":1429},"end":{"line":35,"column":12,"offset":1821},"indent":[3,3,1,3,3,3]}}],"position":{"start":{"line":27,"column":1,"offset":1326},"end":{"line":36,"column":1,"offset":1822},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<code>all(<Type>Array</Type>{'<'}<ParamType>Boolean</ParamType>{'>'})</code> <Type>Boolean</Type>","position":{"start":{"line":37,"column":3,"offset":1825},"end":{"line":37,"column":100,"offset":1922},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Returns ","position":{"start":{"line":39,"column":5,"offset":1928},"end":{"line":39,"column":13,"offset":1936},"indent":[]}},{"type":"jsx","value":"<code class=\"InlineCode\">","position":{"start":{"line":39,"column":13,"offset":1936},"end":{"line":39,"column":38,"offset":1961},"indent":[]}},{"type":"text","value":"true","position":{"start":{"line":39,"column":38,"offset":1961},"end":{"line":39,"column":42,"offset":1965},"indent":[]}},{"type":"jsx","value":"</code>","position":{"start":{"line":39,"column":42,"offset":1965},"end":{"line":39,"column":49,"offset":1972},"indent":[]}},{"type":"text","value":" when the comparison operator in the argument returns ","position":{"start":{"line":39,"column":49,"offset":1972},"end":{"line":39,"column":103,"offset":2026},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":39,"column":103,"offset":2026},"end":{"line":39,"column":109,"offset":2032},"indent":[]}},{"type":"text","value":" for ","position":{"start":{"line":39,"column":109,"offset":2032},"end":{"line":39,"column":114,"offset":2037},"indent":[]}},{"type":"jsx","value":"<em>","position":{"start":{"line":39,"column":114,"offset":2037},"end":{"line":39,"column":118,"offset":2041},"indent":[]}},{"type":"text","value":"all","position":{"start":{"line":39,"column":118,"offset":2041},"end":{"line":39,"column":121,"offset":2044},"indent":[]}},{"type":"jsx","value":"</em>","position":{"start":{"line":39,"column":121,"offset":2044},"end":{"line":39,"column":126,"offset":2049},"indent":[]}},{"type":"text","value":" values in the argument array. Returns ","position":{"start":{"line":39,"column":126,"offset":2049},"end":{"line":39,"column":165,"offset":2088},"indent":[]}},{"type":"jsx","value":"<code class=\"InlineCode\">","position":{"start":{"line":39,"column":165,"offset":2088},"end":{"line":39,"column":190,"offset":2113},"indent":[]}},{"type":"text","value":"false","position":{"start":{"line":39,"column":190,"offset":2113},"end":{"line":39,"column":195,"offset":2118},"indent":[]}},{"type":"jsx","value":"</code>","position":{"start":{"line":39,"column":195,"offset":2118},"end":{"line":39,"column":202,"offset":2125},"indent":[]}},{"type":"text","value":" otherwise.","position":{"start":{"line":39,"column":202,"offset":2125},"end":{"line":39,"column":213,"offset":2136},"indent":[]}}],"position":{"start":{"line":39,"column":5,"offset":1928},"end":{"line":39,"column":213,"offset":2136},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":1926},"end":{"line":40,"column":1,"offset":2137},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<em>Example:</em><br />","position":{"start":{"line":41,"column":5,"offset":2142},"end":{"line":41,"column":28,"offset":2165},"indent":[]}},{"type":"jsx","value":"<code class=\"InlineCode\">all(http.request.headers['content-type'][*] == \"application/json\")</code>","position":{"start":{"line":43,"column":5,"offset":2171},"end":{"line":43,"column":103,"offset":2269},"indent":[]}}],"position":{"start":{"line":41,"column":3,"offset":2140},"end":{"line":43,"column":103,"offset":2269},"indent":[1,3]}}],"position":{"start":{"line":39,"column":3,"offset":1926},"end":{"line":43,"column":103,"offset":2269},"indent":[1,3,1,3]}}],"position":{"start":{"line":37,"column":1,"offset":1823},"end":{"line":44,"column":1,"offset":2270},"indent":[1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<code>concat(<Type>String | Integer | bytes | Array elements</Type>)</code> <Type>String</Type>","position":{"start":{"line":45,"column":3,"offset":2273},"end":{"line":45,"column":98,"offset":2368},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Takes a comma-separated list of values. Concatenates the argument values into a single String.","position":{"start":{"line":47,"column":5,"offset":2374},"end":{"line":47,"column":99,"offset":2468},"indent":[]}}],"position":{"start":{"line":47,"column":5,"offset":2374},"end":{"line":47,"column":99,"offset":2468},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":2372},"end":{"line":48,"column":1,"offset":2469},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<em>Example:</em><br />","position":{"start":{"line":49,"column":5,"offset":2474},"end":{"line":49,"column":28,"offset":2497},"indent":[]}},{"type":"jsx","value":"<code class=\"InlineCode\">concat(\"String1\",\" \",\"String\",2) == \"String1 String2\"</code>","position":{"start":{"line":51,"column":5,"offset":2503},"end":{"line":51,"column":90,"offset":2588},"indent":[]}}],"position":{"start":{"line":49,"column":3,"offset":2472},"end":{"line":51,"column":90,"offset":2588},"indent":[1,3]}}],"position":{"start":{"line":47,"column":3,"offset":2372},"end":{"line":51,"column":90,"offset":2588},"indent":[1,3,1,3]}}],"position":{"start":{"line":45,"column":1,"offset":2271},"end":{"line":52,"column":1,"offset":2589},"indent":[1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<code>ends_with(source<ParamType>String</ParamType>, substring<ParamType>String</ParamType>)</code> <Type>Boolean</Type>","position":{"start":{"line":53,"column":3,"offset":2592},"end":{"line":53,"column":123,"offset":2712},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Returns ","position":{"start":{"line":55,"column":5,"offset":2718},"end":{"line":55,"column":13,"offset":2726},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":55,"column":13,"offset":2726},"end":{"line":55,"column":19,"offset":2732},"indent":[]}},{"type":"text","value":" when the source ends with a given substring. Returns ","position":{"start":{"line":55,"column":19,"offset":2732},"end":{"line":55,"column":73,"offset":2786},"indent":[]}},{"type":"inlineCode","value":"false","position":{"start":{"line":55,"column":73,"offset":2786},"end":{"line":55,"column":80,"offset":2793},"indent":[]}},{"type":"text","value":" otherwise. The source cannot be a literal value (for example, ","position":{"start":{"line":55,"column":80,"offset":2793},"end":{"line":55,"column":143,"offset":2856},"indent":[]}},{"type":"inlineCode","value":"\"foo\"","position":{"start":{"line":55,"column":143,"offset":2856},"end":{"line":55,"column":150,"offset":2863},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":55,"column":150,"offset":2863},"end":{"line":55,"column":152,"offset":2865},"indent":[]}}],"position":{"start":{"line":55,"column":5,"offset":2718},"end":{"line":55,"column":152,"offset":2865},"indent":[]}}],"position":{"start":{"line":55,"column":3,"offset":2716},"end":{"line":56,"column":1,"offset":2866},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Example:","position":{"start":{"line":57,"column":6,"offset":2872},"end":{"line":57,"column":14,"offset":2880},"indent":[]}}],"position":{"start":{"line":57,"column":5,"offset":2871},"end":{"line":57,"column":15,"offset":2881},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":57,"column":15,"offset":2881},"end":{"line":57,"column":21,"offset":2887},"indent":[]}},{"type":"text","value":"\nIf ","position":{"start":{"line":57,"column":21,"offset":2887},"end":{"line":58,"column":8,"offset":2895},"indent":[5]}},{"type":"inlineCode","value":"http.request.uri.path","position":{"start":{"line":58,"column":8,"offset":2895},"end":{"line":58,"column":31,"offset":2918},"indent":[]}},{"type":"text","value":" is ","position":{"start":{"line":58,"column":31,"offset":2918},"end":{"line":58,"column":35,"offset":2922},"indent":[]}},{"type":"inlineCode","value":"\"/welcome.html\"","position":{"start":{"line":58,"column":35,"offset":2922},"end":{"line":58,"column":52,"offset":2939},"indent":[]}},{"type":"text","value":", then ","position":{"start":{"line":58,"column":52,"offset":2939},"end":{"line":58,"column":59,"offset":2946},"indent":[]}},{"type":"inlineCode","value":"ends_with(http.request.uri.path, \".html\")","position":{"start":{"line":58,"column":59,"offset":2946},"end":{"line":58,"column":102,"offset":2989},"indent":[]}},{"type":"text","value":" will return ","position":{"start":{"line":58,"column":102,"offset":2989},"end":{"line":58,"column":115,"offset":3002},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":58,"column":115,"offset":3002},"end":{"line":58,"column":121,"offset":3008},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":58,"column":121,"offset":3008},"end":{"line":58,"column":122,"offset":3009},"indent":[]}}],"position":{"start":{"line":57,"column":5,"offset":2871},"end":{"line":58,"column":122,"offset":3009},"indent":[5]}},{"type":"jsx","value":"<Aside type='warning'>","position":{"start":{"line":60,"column":5,"offset":3015},"end":{"line":60,"column":27,"offset":3037},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Warning:","position":{"start":{"line":62,"column":7,"offset":3045},"end":{"line":62,"column":15,"offset":3053},"indent":[]}}],"position":{"start":{"line":62,"column":5,"offset":3043},"end":{"line":62,"column":17,"offset":3055},"indent":[]}},{"type":"text","value":" You can only use the ","position":{"start":{"line":62,"column":17,"offset":3055},"end":{"line":62,"column":39,"offset":3077},"indent":[]}},{"type":"inlineCode","value":"ends_with()","position":{"start":{"line":62,"column":39,"offset":3077},"end":{"line":62,"column":52,"offset":3090},"indent":[]}},{"type":"text","value":" function in ","position":{"start":{"line":62,"column":52,"offset":3090},"end":{"line":62,"column":65,"offset":3103},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/ruleset-engine/","children":[{"type":"text","value":"rulesets","position":{"start":{"line":62,"column":66,"offset":3104},"end":{"line":62,"column":74,"offset":3112},"indent":[]}}],"position":{"start":{"line":62,"column":65,"offset":3103},"end":{"line":62,"column":126,"offset":3164},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":62,"column":126,"offset":3164},"end":{"line":62,"column":131,"offset":3169},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/rules/transform","children":[{"type":"text","value":"Transform Rules","position":{"start":{"line":62,"column":132,"offset":3170},"end":{"line":62,"column":147,"offset":3185},"indent":[]}}],"position":{"start":{"line":62,"column":131,"offset":3169},"end":{"line":62,"column":199,"offset":3237},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":62,"column":199,"offset":3237},"end":{"line":62,"column":200,"offset":3238},"indent":[]}}],"position":{"start":{"line":62,"column":5,"offset":3043},"end":{"line":62,"column":200,"offset":3238},"indent":[]}},{"type":"jsx","value":"</Aside>","position":{"start":{"line":64,"column":5,"offset":3244},"end":{"line":64,"column":13,"offset":3252},"indent":[]}}],"position":{"start":{"line":57,"column":3,"offset":2869},"end":{"line":64,"column":13,"offset":3252},"indent":[3,1,3,1,3,1,3]}}],"position":{"start":{"line":55,"column":3,"offset":2716},"end":{"line":64,"column":13,"offset":3252},"indent":[1,3,3,1,3,1,3,1,3]}}],"position":{"start":{"line":53,"column":1,"offset":2590},"end":{"line":65,"column":1,"offset":3253},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<code>len(<Type>String | bytes</Type>)</code> <Type>Integer</Type>","position":{"start":{"line":66,"column":3,"offset":3256},"end":{"line":66,"column":69,"offset":3322},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Returns the byte length of a String or Bytes field.","position":{"start":{"line":68,"column":5,"offset":3328},"end":{"line":68,"column":56,"offset":3379},"indent":[]}}],"position":{"start":{"line":68,"column":5,"offset":3328},"end":{"line":68,"column":56,"offset":3379},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":3326},"end":{"line":69,"column":1,"offset":3380},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<em>Example:</em><br />","position":{"start":{"line":70,"column":5,"offset":3385},"end":{"line":70,"column":28,"offset":3408},"indent":[]}},{"type":"jsx","value":"<code class=\"InlineCode\">len(http.host)</code>","position":{"start":{"line":72,"column":5,"offset":3414},"end":{"line":72,"column":51,"offset":3460},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":3383},"end":{"line":72,"column":51,"offset":3460},"indent":[1,3]}}],"position":{"start":{"line":68,"column":3,"offset":3326},"end":{"line":72,"column":51,"offset":3460},"indent":[1,3,1,3]}}],"position":{"start":{"line":66,"column":1,"offset":3254},"end":{"line":73,"column":1,"offset":3461},"indent":[1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<code>lower(<Type>String</Type>)</code> <Type>String</Type>","position":{"start":{"line":74,"column":3,"offset":3464},"end":{"line":74,"column":62,"offset":3523},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Converts a string field to lowercase. Only uppercase ASCII bytes are converted. All other bytes are unaffected.","position":{"start":{"line":76,"column":5,"offset":3529},"end":{"line":76,"column":116,"offset":3640},"indent":[]}}],"position":{"start":{"line":76,"column":5,"offset":3529},"end":{"line":76,"column":116,"offset":3640},"indent":[]}}],"position":{"start":{"line":76,"column":3,"offset":3527},"end":{"line":77,"column":1,"offset":3641},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<em>Example:</em><br />","position":{"start":{"line":78,"column":5,"offset":3646},"end":{"line":78,"column":28,"offset":3669},"indent":[]}},{"type":"jsx","value":"<code class=\"InlineCode\">lower(http.host) == \"www.cloudflare.com\"</code>","position":{"start":{"line":80,"column":5,"offset":3675},"end":{"line":80,"column":77,"offset":3747},"indent":[]}}],"position":{"start":{"line":78,"column":3,"offset":3644},"end":{"line":80,"column":77,"offset":3747},"indent":[1,3]}}],"position":{"start":{"line":76,"column":3,"offset":3527},"end":{"line":80,"column":77,"offset":3747},"indent":[1,3,1,3]}}],"position":{"start":{"line":74,"column":1,"offset":3462},"end":{"line":81,"column":1,"offset":3748},"indent":[1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<code>regex_replace(source<ParamType>String</ParamType>, regular_expression<ParamType>String</ParamType>, replacement<ParamType>String</ParamType>)</code> <Type>String</Type>","position":{"start":{"line":82,"column":3,"offset":3751},"end":{"line":82,"column":177,"offset":3925},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Replaces a part of a source string matched by a regular expression with a replacement string, returning the result. The replacement string can contain references to regular expression capture groups.","position":{"start":{"line":84,"column":5,"offset":3931},"end":{"line":84,"column":204,"offset":4130},"indent":[]}}],"position":{"start":{"line":84,"column":5,"offset":3931},"end":{"line":84,"column":204,"offset":4130},"indent":[]}}],"position":{"start":{"line":84,"column":3,"offset":3929},"end":{"line":85,"column":1,"offset":4131},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Examples:","position":{"start":{"line":86,"column":6,"offset":4137},"end":{"line":86,"column":15,"offset":4146},"indent":[]}}],"position":{"start":{"line":86,"column":5,"offset":4136},"end":{"line":86,"column":16,"offset":4147},"indent":[]}}],"position":{"start":{"line":86,"column":5,"offset":4136},"end":{"line":86,"column":16,"offset":4147},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Literal match replace:","position":{"start":{"line":88,"column":5,"offset":4153},"end":{"line":88,"column":27,"offset":4175},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":88,"column":27,"offset":4175},"end":{"line":88,"column":33,"offset":4181},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":88,"column":33,"offset":4181},"end":{"line":89,"column":5,"offset":4186},"indent":[5]}},{"type":"inlineCode","value":"regex_replace(\"/foo/bar\", \"/bar$\", \"/baz\") == \"/foo/baz\"","position":{"start":{"line":89,"column":5,"offset":4186},"end":{"line":89,"column":63,"offset":4244},"indent":[]}}],"position":{"start":{"line":88,"column":5,"offset":4153},"end":{"line":89,"column":63,"offset":4244},"indent":[5]}},{"type":"paragraph","children":[{"type":"text","value":"If there is no match, the input string does not change:","position":{"start":{"line":91,"column":5,"offset":4250},"end":{"line":91,"column":60,"offset":4305},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":91,"column":60,"offset":4305},"end":{"line":91,"column":66,"offset":4311},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":91,"column":66,"offset":4311},"end":{"line":92,"column":5,"offset":4316},"indent":[5]}},{"type":"inlineCode","value":"regex_replace(\"/x\", \"^/y$\", \"/mumble\") == \"/x\"","position":{"start":{"line":92,"column":5,"offset":4316},"end":{"line":92,"column":53,"offset":4364},"indent":[]}}],"position":{"start":{"line":91,"column":5,"offset":4250},"end":{"line":92,"column":53,"offset":4364},"indent":[5]}},{"type":"paragraph","children":[{"type":"text","value":"Match is case sensitive by default:","position":{"start":{"line":94,"column":5,"offset":4370},"end":{"line":94,"column":40,"offset":4405},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":94,"column":40,"offset":4405},"end":{"line":94,"column":46,"offset":4411},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":94,"column":46,"offset":4411},"end":{"line":95,"column":5,"offset":4416},"indent":[5]}},{"type":"inlineCode","value":"regex_replace(\"/foo\", \"^/FOO$\", \"/x\") == \"/foo\"","position":{"start":{"line":95,"column":5,"offset":4416},"end":{"line":95,"column":54,"offset":4465},"indent":[]}}],"position":{"start":{"line":94,"column":5,"offset":4370},"end":{"line":95,"column":54,"offset":4465},"indent":[5]}},{"type":"paragraph","children":[{"type":"text","value":"When there are multiple matches, only one replacement occurs (the first one):","position":{"start":{"line":97,"column":5,"offset":4471},"end":{"line":97,"column":82,"offset":4548},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":97,"column":82,"offset":4548},"end":{"line":97,"column":88,"offset":4554},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":97,"column":88,"offset":4554},"end":{"line":98,"column":5,"offset":4559},"indent":[5]}},{"type":"inlineCode","value":"regex_replace(\"/a/a\", \"/a\", \"/b\") == \"/b/a\"","position":{"start":{"line":98,"column":5,"offset":4559},"end":{"line":98,"column":50,"offset":4604},"indent":[]}}],"position":{"start":{"line":97,"column":5,"offset":4471},"end":{"line":98,"column":50,"offset":4604},"indent":[5]}},{"type":"paragraph","children":[{"type":"text","value":"Escape a ","position":{"start":{"line":100,"column":5,"offset":4610},"end":{"line":100,"column":14,"offset":4619},"indent":[]}},{"type":"inlineCode","value":"$","position":{"start":{"line":100,"column":14,"offset":4619},"end":{"line":100,"column":17,"offset":4622},"indent":[]}},{"type":"text","value":" in the replacement string by prefixing it with another ","position":{"start":{"line":100,"column":17,"offset":4622},"end":{"line":100,"column":73,"offset":4678},"indent":[]}},{"type":"inlineCode","value":"$","position":{"start":{"line":100,"column":73,"offset":4678},"end":{"line":100,"column":76,"offset":4681},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":100,"column":76,"offset":4681},"end":{"line":100,"column":77,"offset":4682},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":100,"column":77,"offset":4682},"end":{"line":100,"column":83,"offset":4688},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":100,"column":83,"offset":4688},"end":{"line":101,"column":5,"offset":4693},"indent":[5]}},{"type":"inlineCode","value":"regex_replace(\"/b\", \"^/b$\", \"/b$$\") == \"/b$\"","position":{"start":{"line":101,"column":5,"offset":4693},"end":{"line":101,"column":51,"offset":4739},"indent":[]}}],"position":{"start":{"line":100,"column":5,"offset":4610},"end":{"line":101,"column":51,"offset":4739},"indent":[5]}},{"type":"paragraph","children":[{"type":"text","value":"Replace with capture groups:","position":{"start":{"line":103,"column":5,"offset":4745},"end":{"line":103,"column":33,"offset":4773},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":103,"column":33,"offset":4773},"end":{"line":103,"column":39,"offset":4779},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":103,"column":39,"offset":4779},"end":{"line":104,"column":5,"offset":4784},"indent":[5]}},{"type":"inlineCode","value":"regex_replace(\"/foo/a/path\", \"^/foo/([^/]*)/(.*)$\", \"/bar/${2}/${1}\") == \"/bar/path/a/\"","position":{"start":{"line":104,"column":5,"offset":4784},"end":{"line":104,"column":94,"offset":4873},"indent":[]}}],"position":{"start":{"line":103,"column":5,"offset":4745},"end":{"line":104,"column":94,"offset":4873},"indent":[5]}},{"type":"jsx","value":"<Aside type='warning'>","position":{"start":{"line":106,"column":5,"offset":4879},"end":{"line":106,"column":27,"offset":4901},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Warning:","position":{"start":{"line":108,"column":7,"offset":4909},"end":{"line":108,"column":15,"offset":4917},"indent":[]}}],"position":{"start":{"line":108,"column":5,"offset":4907},"end":{"line":108,"column":17,"offset":4919},"indent":[]}},{"type":"text","value":" You can only use the ","position":{"start":{"line":108,"column":17,"offset":4919},"end":{"line":108,"column":39,"offset":4941},"indent":[]}},{"type":"inlineCode","value":"regex_replace()","position":{"start":{"line":108,"column":39,"offset":4941},"end":{"line":108,"column":56,"offset":4958},"indent":[]}},{"type":"text","value":" function in ","position":{"start":{"line":108,"column":56,"offset":4958},"end":{"line":108,"column":69,"offset":4971},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/rules/transform","children":[{"type":"text","value":"rewrite expressions of Transform Rules","position":{"start":{"line":108,"column":70,"offset":4972},"end":{"line":108,"column":108,"offset":5010},"indent":[]}}],"position":{"start":{"line":108,"column":69,"offset":4971},"end":{"line":108,"column":160,"offset":5062},"indent":[]}},{"type":"text","value":". Additionally, the first argument must be a field under ","position":{"start":{"line":108,"column":160,"offset":5062},"end":{"line":108,"column":217,"offset":5119},"indent":[]}},{"type":"inlineCode","value":"http.request.headers","position":{"start":{"line":108,"column":217,"offset":5119},"end":{"line":108,"column":239,"offset":5141},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":108,"column":239,"offset":5141},"end":{"line":108,"column":243,"offset":5145},"indent":[]}},{"type":"inlineCode","value":"http.request.uri","position":{"start":{"line":108,"column":243,"offset":5145},"end":{"line":108,"column":261,"offset":5163},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":108,"column":261,"offset":5163},"end":{"line":108,"column":262,"offset":5164},"indent":[]}}],"position":{"start":{"line":108,"column":5,"offset":4907},"end":{"line":108,"column":262,"offset":5164},"indent":[]}},{"type":"jsx","value":"</Aside>","position":{"start":{"line":110,"column":5,"offset":5170},"end":{"line":110,"column":13,"offset":5178},"indent":[]}}],"position":{"start":{"line":86,"column":3,"offset":4134},"end":{"line":110,"column":13,"offset":5178},"indent":[1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,1,3,1,3]}}],"position":{"start":{"line":84,"column":3,"offset":3929},"end":{"line":110,"column":13,"offset":5178},"indent":[1,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,1,3,1,3]}}],"position":{"start":{"line":82,"column":1,"offset":3749},"end":{"line":111,"column":1,"offset":5179},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<code>remove_bytes(<Type>bytes</Type>)</code> <Type>bytes</Type>","position":{"start":{"line":112,"column":3,"offset":5182},"end":{"line":112,"column":67,"offset":5246},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Returns a new byte array with all the occurrences of the given bytes removed.","position":{"start":{"line":114,"column":5,"offset":5252},"end":{"line":114,"column":82,"offset":5329},"indent":[]}}],"position":{"start":{"line":114,"column":5,"offset":5252},"end":{"line":114,"column":82,"offset":5329},"indent":[]}}],"position":{"start":{"line":114,"column":3,"offset":5250},"end":{"line":115,"column":1,"offset":5330},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<em>Example:</em><br />","position":{"start":{"line":116,"column":5,"offset":5335},"end":{"line":116,"column":28,"offset":5358},"indent":[]}},{"type":"jsx","value":"<code class=\"InlineCode\">remove_bytes(http.host, \"\\x2e\\x77\") == \"cloudflarecom\"</code>","position":{"start":{"line":118,"column":5,"offset":5364},"end":{"line":118,"column":91,"offset":5450},"indent":[]}}],"position":{"start":{"line":116,"column":3,"offset":5333},"end":{"line":118,"column":91,"offset":5450},"indent":[1,3]}}],"position":{"start":{"line":114,"column":3,"offset":5250},"end":{"line":118,"column":91,"offset":5450},"indent":[1,3,1,3]}}],"position":{"start":{"line":112,"column":1,"offset":5180},"end":{"line":119,"column":1,"offset":5451},"indent":[1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<code>starts_with(source<ParamType>String</ParamType>, substring<ParamType>String</ParamType>)</code> <Type>Boolean</Type>","position":{"start":{"line":120,"column":3,"offset":5454},"end":{"line":120,"column":125,"offset":5576},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Returns ","position":{"start":{"line":122,"column":5,"offset":5582},"end":{"line":122,"column":13,"offset":5590},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":122,"column":13,"offset":5590},"end":{"line":122,"column":19,"offset":5596},"indent":[]}},{"type":"text","value":" when the source starts with a given substring. Returns ","position":{"start":{"line":122,"column":19,"offset":5596},"end":{"line":122,"column":75,"offset":5652},"indent":[]}},{"type":"inlineCode","value":"false","position":{"start":{"line":122,"column":75,"offset":5652},"end":{"line":122,"column":82,"offset":5659},"indent":[]}},{"type":"text","value":" otherwise. The source cannot be a literal value (for example, ","position":{"start":{"line":122,"column":82,"offset":5659},"end":{"line":122,"column":145,"offset":5722},"indent":[]}},{"type":"inlineCode","value":"\"foo\"","position":{"start":{"line":122,"column":145,"offset":5722},"end":{"line":122,"column":152,"offset":5729},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":122,"column":152,"offset":5729},"end":{"line":122,"column":154,"offset":5731},"indent":[]}}],"position":{"start":{"line":122,"column":5,"offset":5582},"end":{"line":122,"column":154,"offset":5731},"indent":[]}}],"position":{"start":{"line":122,"column":3,"offset":5580},"end":{"line":123,"column":1,"offset":5732},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Example:","position":{"start":{"line":124,"column":6,"offset":5738},"end":{"line":124,"column":14,"offset":5746},"indent":[]}}],"position":{"start":{"line":124,"column":5,"offset":5737},"end":{"line":124,"column":15,"offset":5747},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":124,"column":15,"offset":5747},"end":{"line":124,"column":21,"offset":5753},"indent":[]}},{"type":"text","value":"\nIf ","position":{"start":{"line":124,"column":21,"offset":5753},"end":{"line":125,"column":8,"offset":5761},"indent":[5]}},{"type":"inlineCode","value":"http.request.uri.path","position":{"start":{"line":125,"column":8,"offset":5761},"end":{"line":125,"column":31,"offset":5784},"indent":[]}},{"type":"text","value":" is ","position":{"start":{"line":125,"column":31,"offset":5784},"end":{"line":125,"column":35,"offset":5788},"indent":[]}},{"type":"inlineCode","value":"\"/blog/first-post\"","position":{"start":{"line":125,"column":35,"offset":5788},"end":{"line":125,"column":55,"offset":5808},"indent":[]}},{"type":"text","value":", then ","position":{"start":{"line":125,"column":55,"offset":5808},"end":{"line":125,"column":62,"offset":5815},"indent":[]}},{"type":"inlineCode","value":"starts_with(http.request.uri.path, \"/blog\")","position":{"start":{"line":125,"column":62,"offset":5815},"end":{"line":125,"column":107,"offset":5860},"indent":[]}},{"type":"text","value":" will return ","position":{"start":{"line":125,"column":107,"offset":5860},"end":{"line":125,"column":120,"offset":5873},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":125,"column":120,"offset":5873},"end":{"line":125,"column":126,"offset":5879},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":125,"column":126,"offset":5879},"end":{"line":125,"column":127,"offset":5880},"indent":[]}}],"position":{"start":{"line":124,"column":5,"offset":5737},"end":{"line":125,"column":127,"offset":5880},"indent":[5]}},{"type":"jsx","value":"<Aside type='warning'>","position":{"start":{"line":127,"column":5,"offset":5886},"end":{"line":127,"column":27,"offset":5908},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Warning:","position":{"start":{"line":129,"column":7,"offset":5916},"end":{"line":129,"column":15,"offset":5924},"indent":[]}}],"position":{"start":{"line":129,"column":5,"offset":5914},"end":{"line":129,"column":17,"offset":5926},"indent":[]}},{"type":"text","value":" You can only use the ","position":{"start":{"line":129,"column":17,"offset":5926},"end":{"line":129,"column":39,"offset":5948},"indent":[]}},{"type":"inlineCode","value":"starts_with()","position":{"start":{"line":129,"column":39,"offset":5948},"end":{"line":129,"column":54,"offset":5963},"indent":[]}},{"type":"text","value":" function in ","position":{"start":{"line":129,"column":54,"offset":5963},"end":{"line":129,"column":67,"offset":5976},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/ruleset-engine/","children":[{"type":"text","value":"rulesets","position":{"start":{"line":129,"column":68,"offset":5977},"end":{"line":129,"column":76,"offset":5985},"indent":[]}}],"position":{"start":{"line":129,"column":67,"offset":5976},"end":{"line":129,"column":128,"offset":6037},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":129,"column":128,"offset":6037},"end":{"line":129,"column":133,"offset":6042},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/rules/transform","children":[{"type":"text","value":"Transform Rules","position":{"start":{"line":129,"column":134,"offset":6043},"end":{"line":129,"column":149,"offset":6058},"indent":[]}}],"position":{"start":{"line":129,"column":133,"offset":6042},"end":{"line":129,"column":201,"offset":6110},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":129,"column":201,"offset":6110},"end":{"line":129,"column":202,"offset":6111},"indent":[]}}],"position":{"start":{"line":129,"column":5,"offset":5914},"end":{"line":129,"column":202,"offset":6111},"indent":[]}},{"type":"jsx","value":"</Aside>","position":{"start":{"line":131,"column":5,"offset":6117},"end":{"line":131,"column":13,"offset":6125},"indent":[]}}],"position":{"start":{"line":124,"column":3,"offset":5735},"end":{"line":131,"column":13,"offset":6125},"indent":[3,1,3,1,3,1,3]}}],"position":{"start":{"line":122,"column":3,"offset":5580},"end":{"line":131,"column":13,"offset":6125},"indent":[1,3,3,1,3,1,3,1,3]}}],"position":{"start":{"line":120,"column":1,"offset":5452},"end":{"line":132,"column":1,"offset":6126},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<code>to_string(<Type>Integer | Boolean | IP address</Type>)</code> <Type>String</Type>","position":{"start":{"line":133,"column":3,"offset":6129},"end":{"line":133,"column":90,"offset":6216},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Returns the string representation of an Integer, Boolean, or IP address value.","position":{"start":{"line":135,"column":5,"offset":6222},"end":{"line":135,"column":83,"offset":6300},"indent":[]}}],"position":{"start":{"line":135,"column":5,"offset":6222},"end":{"line":135,"column":83,"offset":6300},"indent":[]}}],"position":{"start":{"line":135,"column":3,"offset":6220},"end":{"line":136,"column":1,"offset":6301},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Examples:","position":{"start":{"line":137,"column":6,"offset":6307},"end":{"line":137,"column":15,"offset":6316},"indent":[]}}],"position":{"start":{"line":137,"column":5,"offset":6306},"end":{"line":137,"column":16,"offset":6317},"indent":[]}}],"position":{"start":{"line":137,"column":5,"offset":6306},"end":{"line":137,"column":16,"offset":6317},"indent":[]}},{"type":"code","lang":"txt","meta":null,"value":"to_string(cf.bot_management.score) == '5'\nto_string(ssl) == 'true'","position":{"start":{"line":139,"column":5,"offset":6323},"end":{"line":142,"column":8,"offset":6412},"indent":[5,5,5]}},{"type":"jsx","value":"<Aside type='warning'>","position":{"start":{"line":144,"column":5,"offset":6418},"end":{"line":144,"column":27,"offset":6440},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Warning:","position":{"start":{"line":146,"column":7,"offset":6448},"end":{"line":146,"column":15,"offset":6456},"indent":[]}}],"position":{"start":{"line":146,"column":5,"offset":6446},"end":{"line":146,"column":17,"offset":6458},"indent":[]}},{"type":"text","value":" You can only use the ","position":{"start":{"line":146,"column":17,"offset":6458},"end":{"line":146,"column":39,"offset":6480},"indent":[]}},{"type":"inlineCode","value":"to_string()","position":{"start":{"line":146,"column":39,"offset":6480},"end":{"line":146,"column":52,"offset":6493},"indent":[]}},{"type":"text","value":" function in ","position":{"start":{"line":146,"column":52,"offset":6493},"end":{"line":146,"column":65,"offset":6506},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/rules/transform","children":[{"type":"text","value":"rewrite expressions of Transform Rules","position":{"start":{"line":146,"column":66,"offset":6507},"end":{"line":146,"column":104,"offset":6545},"indent":[]}}],"position":{"start":{"line":146,"column":65,"offset":6506},"end":{"line":146,"column":156,"offset":6597},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":146,"column":156,"offset":6597},"end":{"line":146,"column":157,"offset":6598},"indent":[]}}],"position":{"start":{"line":146,"column":5,"offset":6446},"end":{"line":146,"column":157,"offset":6598},"indent":[]}},{"type":"jsx","value":"</Aside>","position":{"start":{"line":148,"column":5,"offset":6604},"end":{"line":148,"column":13,"offset":6612},"indent":[]}}],"position":{"start":{"line":137,"column":3,"offset":6304},"end":{"line":148,"column":13,"offset":6612},"indent":[1,3,3,3,3,1,3,1,3,1,3]}}],"position":{"start":{"line":135,"column":3,"offset":6220},"end":{"line":148,"column":13,"offset":6612},"indent":[1,3,1,3,3,3,3,1,3,1,3,1,3]}}],"position":{"start":{"line":133,"column":1,"offset":6127},"end":{"line":149,"column":1,"offset":6613},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<code>upper(<Type>String</Type>)</code> <Type>String</Type>","position":{"start":{"line":150,"column":3,"offset":6616},"end":{"line":150,"column":62,"offset":6675},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Converts a string field to uppercase. Only lowercase ASCII bytes are converted. All other bytes are unaffected.","position":{"start":{"line":152,"column":5,"offset":6681},"end":{"line":152,"column":116,"offset":6792},"indent":[]}}],"position":{"start":{"line":152,"column":5,"offset":6681},"end":{"line":152,"column":116,"offset":6792},"indent":[]}}],"position":{"start":{"line":152,"column":3,"offset":6679},"end":{"line":153,"column":1,"offset":6793},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<em>Example:</em><br />","position":{"start":{"line":154,"column":5,"offset":6798},"end":{"line":154,"column":28,"offset":6821},"indent":[]}},{"type":"jsx","value":"<code class=\"InlineCode\">upper(http.host) == \"WWW.CLOUDFLARE.COM\"</code>","position":{"start":{"line":156,"column":5,"offset":6827},"end":{"line":156,"column":77,"offset":6899},"indent":[]}}],"position":{"start":{"line":154,"column":3,"offset":6796},"end":{"line":156,"column":77,"offset":6899},"indent":[1,3]}}],"position":{"start":{"line":152,"column":3,"offset":6679},"end":{"line":156,"column":77,"offset":6899},"indent":[1,3,1,3]}}],"position":{"start":{"line":150,"column":1,"offset":6614},"end":{"line":157,"column":1,"offset":6900},"indent":[1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<code>url_decode(<Type>String</Type>)</code> <Type>String</Type>","position":{"start":{"line":158,"column":3,"offset":6903},"end":{"line":158,"column":67,"offset":6967},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Decodes a URL formatted string, as in the following:","position":{"start":{"line":160,"column":5,"offset":6973},"end":{"line":160,"column":57,"offset":7025},"indent":[]}}],"position":{"start":{"line":160,"column":5,"offset":6973},"end":{"line":160,"column":57,"offset":7025},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"jsx","value":"<code class=\"InlineCode\">%20</code> and <code class=\"InlineCode\">+</code> decode to space characters <code class=\"InlineCode\"> </code>","position":{"start":{"line":162,"column":7,"offset":7033},"end":{"line":162,"column":141,"offset":7167},"indent":[]}}],"position":{"start":{"line":162,"column":5,"offset":7031},"end":{"line":163,"column":1,"offset":7168},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"jsx","value":"<code class=\"InlineCode\">%E4%BD</code> decodes to <code class=\"InlineCode\">ä½ </code>","position":{"start":{"line":164,"column":7,"offset":7175},"end":{"line":164,"column":92,"offset":7260},"indent":[]}}],"position":{"start":{"line":164,"column":5,"offset":7173},"end":{"line":164,"column":92,"offset":7260},"indent":[]}}],"position":{"start":{"line":162,"column":5,"offset":7031},"end":{"line":164,"column":92,"offset":7260},"indent":[1,5]}}],"position":{"start":{"line":160,"column":3,"offset":6971},"end":{"line":165,"column":1,"offset":7261},"indent":[1,3,1,3,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<em>Example:</em><br />","position":{"start":{"line":166,"column":5,"offset":7266},"end":{"line":166,"column":28,"offset":7289},"indent":[]}},{"type":"jsx","value":"<code class=\"InlineCode\">any(url_decode(http.request.body.form.values[*])[*] contains \"an xss attack\")</code>","position":{"start":{"line":168,"column":5,"offset":7295},"end":{"line":168,"column":114,"offset":7404},"indent":[]}}],"position":{"start":{"line":166,"column":3,"offset":7264},"end":{"line":168,"column":114,"offset":7404},"indent":[1,3]}}],"position":{"start":{"line":160,"column":3,"offset":6971},"end":{"line":168,"column":114,"offset":7404},"indent":[1,3,1,3,1,3,1,3]}}],"position":{"start":{"line":158,"column":1,"offset":6901},"end":{"line":168,"column":114,"offset":7404},"indent":[1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":27,"column":1,"offset":1326},"end":{"line":168,"column":114,"offset":7404},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</Definitions>","position":{"start":{"line":170,"column":1,"offset":7406},"end":{"line":170,"column":15,"offset":7420},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Magic Firewall Functions","position":{"start":{"line":172,"column":4,"offset":7425},"end":{"line":172,"column":28,"offset":7449},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":7422},"end":{"line":172,"column":28,"offset":7449},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"jsx","value":"<code>bit_slice(<Type>String</Type>, <Type>Number</Type>, <Type>Number</Type>)</code> <Type>Number</Type>","position":{"start":{"line":174,"column":3,"offset":7453},"end":{"line":174,"column":108,"offset":7558},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Select a slice of contiguous bits from a string field. This is primarily intended for use with ","position":{"start":{"line":176,"column":5,"offset":7564},"end":{"line":176,"column":100,"offset":7659},"indent":[]}},{"type":"jsx","value":"<code class=\"InlineCode\">","position":{"start":{"line":176,"column":100,"offset":7659},"end":{"line":176,"column":125,"offset":7684},"indent":[]}},{"type":"text","value":"ip","position":{"start":{"line":176,"column":125,"offset":7684},"end":{"line":176,"column":127,"offset":7686},"indent":[]}},{"type":"jsx","value":"</code>","position":{"start":{"line":176,"column":127,"offset":7686},"end":{"line":176,"column":134,"offset":7693},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":176,"column":134,"offset":7693},"end":{"line":176,"column":139,"offset":7698},"indent":[]}},{"type":"jsx","value":"<code class=\"InlineCode\">","position":{"start":{"line":176,"column":139,"offset":7698},"end":{"line":176,"column":164,"offset":7723},"indent":[]}},{"type":"text","value":"tcp","position":{"start":{"line":176,"column":164,"offset":7723},"end":{"line":176,"column":167,"offset":7726},"indent":[]}},{"type":"jsx","value":"</code>","position":{"start":{"line":176,"column":167,"offset":7726},"end":{"line":176,"column":174,"offset":7733},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":176,"column":174,"offset":7733},"end":{"line":176,"column":175,"offset":7734},"indent":[]}}],"position":{"start":{"line":176,"column":5,"offset":7564},"end":{"line":176,"column":175,"offset":7734},"indent":[]}}],"position":{"start":{"line":176,"column":3,"offset":7562},"end":{"line":176,"column":175,"offset":7734},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The slice can be no longer than 31 bits, but multiple calls can be joined together via a logical expression.","position":{"start":{"line":177,"column":5,"offset":7739},"end":{"line":177,"column":113,"offset":7847},"indent":[]}}],"position":{"start":{"line":177,"column":5,"offset":7739},"end":{"line":177,"column":113,"offset":7847},"indent":[]}}],"position":{"start":{"line":177,"column":3,"offset":7737},"end":{"line":177,"column":113,"offset":7847},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use of structure fields is preferred over this mechanism.","position":{"start":{"line":178,"column":5,"offset":7852},"end":{"line":178,"column":62,"offset":7909},"indent":[]}}],"position":{"start":{"line":178,"column":5,"offset":7852},"end":{"line":178,"column":62,"offset":7909},"indent":[]}}],"position":{"start":{"line":178,"column":3,"offset":7850},"end":{"line":178,"column":62,"offset":7909},"indent":[]}}],"position":{"start":{"line":176,"column":3,"offset":7562},"end":{"line":178,"column":62,"offset":7909},"indent":[3,3]}}],"position":{"start":{"line":174,"column":1,"offset":7451},"end":{"line":178,"column":62,"offset":7909},"indent":[1,1,1,1]}}],"position":{"start":{"line":174,"column":1,"offset":7451},"end":{"line":178,"column":62,"offset":7909},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"HMAC validation","position":{"start":{"line":180,"column":4,"offset":7914},"end":{"line":180,"column":19,"offset":7929},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":7911},"end":{"line":180,"column":19,"offset":7929},"indent":[]}},{"type":"jsx","value":"<Aside type='warning' header='Important'>","position":{"start":{"line":182,"column":1,"offset":7931},"end":{"line":182,"column":42,"offset":7972},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Access to the HMAC validation function requires a Cloudflare Pro, Business, or Enterprise plan.","position":{"start":{"line":184,"column":1,"offset":7974},"end":{"line":184,"column":96,"offset":8069},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":7974},"end":{"line":184,"column":96,"offset":8069},"indent":[]}},{"type":"jsx","value":"</Aside>","position":{"start":{"line":186,"column":1,"offset":8071},"end":{"line":186,"column":9,"offset":8079},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Overview","position":{"start":{"line":188,"column":5,"offset":8085},"end":{"line":188,"column":13,"offset":8093},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":8081},"end":{"line":188,"column":13,"offset":8093},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can validate hash-based message authentication code (HMAC) tokens in a Firewall Rules expression by using the ","position":{"start":{"line":190,"column":1,"offset":8095},"end":{"line":190,"column":115,"offset":8209},"indent":[]}},{"type":"inlineCode","value":"is_timed_hmac_valid_v0()","position":{"start":{"line":190,"column":115,"offset":8209},"end":{"line":190,"column":141,"offset":8235},"indent":[]}},{"type":"text","value":" function, which has this signature:","position":{"start":{"line":190,"column":141,"offset":8235},"end":{"line":190,"column":177,"offset":8271},"indent":[]}}],"position":{"start":{"line":190,"column":1,"offset":8095},"end":{"line":190,"column":177,"offset":8271},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"is_timed_hmac_valid_v0(\n  <String literal as Key>,\n  <String field as MessageMAC>,\n  <Integer literal as ttl>,\n  <Integer as currentTimeStamp>,\n  <Optional Integer literal as lengthOfSeparator, default: 0>,\n  <Optional String literal as flags>\n) -> <Bool as result>","position":{"start":{"line":192,"column":1,"offset":8273},"end":{"line":201,"column":4,"offset":8550},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":203,"column":1,"offset":8552},"end":{"line":203,"column":5,"offset":8556},"indent":[]}},{"type":"inlineCode","value":"is_timed_hmac_valid_v0()","position":{"start":{"line":203,"column":5,"offset":8556},"end":{"line":203,"column":31,"offset":8582},"indent":[]}},{"type":"text","value":" function has these parameter definitions:","position":{"start":{"line":203,"column":31,"offset":8582},"end":{"line":203,"column":73,"offset":8624},"indent":[]}}],"position":{"start":{"line":203,"column":1,"offset":8552},"end":{"line":203,"column":73,"offset":8624},"indent":[]}},{"type":"jsx","value":"<Definitions>","position":{"start":{"line":205,"column":1,"offset":8626},"end":{"line":205,"column":14,"offset":8639},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Key","position":{"start":{"line":207,"column":4,"offset":8644},"end":{"line":207,"column":7,"offset":8647},"indent":[]}}],"position":{"start":{"line":207,"column":3,"offset":8643},"end":{"line":207,"column":8,"offset":8648},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":207,"column":8,"offset":8648},"end":{"line":207,"column":9,"offset":8649},"indent":[]}},{"type":"jsx","value":"<Type>","position":{"start":{"line":207,"column":9,"offset":8649},"end":{"line":207,"column":15,"offset":8655},"indent":[]}},{"type":"text","value":"String literal","position":{"start":{"line":207,"column":15,"offset":8655},"end":{"line":207,"column":29,"offset":8669},"indent":[]}},{"type":"jsx","value":"</Type>","position":{"start":{"line":207,"column":29,"offset":8669},"end":{"line":207,"column":36,"offset":8676},"indent":[]}}],"position":{"start":{"line":207,"column":3,"offset":8643},"end":{"line":207,"column":36,"offset":8676},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Specifies the secret cryptographic key for validating the HMAC.","position":{"start":{"line":209,"column":5,"offset":8682},"end":{"line":209,"column":68,"offset":8745},"indent":[]}}],"position":{"start":{"line":209,"column":5,"offset":8682},"end":{"line":209,"column":68,"offset":8745},"indent":[]}}],"position":{"start":{"line":209,"column":3,"offset":8680},"end":{"line":209,"column":68,"offset":8745},"indent":[]}}],"position":{"start":{"line":209,"column":3,"offset":8680},"end":{"line":209,"column":68,"offset":8745},"indent":[]}}],"position":{"start":{"line":207,"column":1,"offset":8641},"end":{"line":210,"column":1,"offset":8746},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"MessageMAC","position":{"start":{"line":211,"column":4,"offset":8750},"end":{"line":211,"column":14,"offset":8760},"indent":[]}}],"position":{"start":{"line":211,"column":3,"offset":8749},"end":{"line":211,"column":15,"offset":8761},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":211,"column":15,"offset":8761},"end":{"line":211,"column":16,"offset":8762},"indent":[]}},{"type":"jsx","value":"<Type>","position":{"start":{"line":211,"column":16,"offset":8762},"end":{"line":211,"column":22,"offset":8768},"indent":[]}},{"type":"text","value":"String","position":{"start":{"line":211,"column":22,"offset":8768},"end":{"line":211,"column":28,"offset":8774},"indent":[]}},{"type":"jsx","value":"</Type>","position":{"start":{"line":211,"column":28,"offset":8774},"end":{"line":211,"column":35,"offset":8781},"indent":[]}}],"position":{"start":{"line":211,"column":3,"offset":8749},"end":{"line":211,"column":35,"offset":8781},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Contains a concatenation of these HMAC elements: ","position":{"start":{"line":213,"column":5,"offset":8787},"end":{"line":213,"column":54,"offset":8836},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"message","position":{"start":{"line":213,"column":55,"offset":8837},"end":{"line":213,"column":62,"offset":8844},"indent":[]}}],"position":{"start":{"line":213,"column":54,"offset":8836},"end":{"line":213,"column":63,"offset":8845},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":213,"column":63,"offset":8845},"end":{"line":213,"column":65,"offset":8847},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"separator","position":{"start":{"line":213,"column":66,"offset":8848},"end":{"line":213,"column":75,"offset":8857},"indent":[]}}],"position":{"start":{"line":213,"column":65,"offset":8847},"end":{"line":213,"column":76,"offset":8858},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":213,"column":76,"offset":8858},"end":{"line":213,"column":78,"offset":8860},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timestamp","position":{"start":{"line":213,"column":79,"offset":8861},"end":{"line":213,"column":88,"offset":8870},"indent":[]}}],"position":{"start":{"line":213,"column":78,"offset":8860},"end":{"line":213,"column":89,"offset":8871},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":213,"column":89,"offset":8871},"end":{"line":213,"column":91,"offset":8873},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"mac","position":{"start":{"line":213,"column":92,"offset":8874},"end":{"line":213,"column":95,"offset":8877},"indent":[]}}],"position":{"start":{"line":213,"column":91,"offset":8873},"end":{"line":213,"column":96,"offset":8878},"indent":[]}},{"type":"text","value":". For a definition and an example, see ","position":{"start":{"line":213,"column":96,"offset":8878},"end":{"line":213,"column":135,"offset":8917},"indent":[]}},{"type":"link","title":null,"url":"#messagemac","children":[{"type":"emphasis","children":[{"type":"text","value":"MessageMAC","position":{"start":{"line":213,"column":137,"offset":8919},"end":{"line":213,"column":147,"offset":8929},"indent":[]}}],"position":{"start":{"line":213,"column":136,"offset":8918},"end":{"line":213,"column":148,"offset":8930},"indent":[]}}],"position":{"start":{"line":213,"column":135,"offset":8917},"end":{"line":213,"column":162,"offset":8944},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":213,"column":162,"offset":8944},"end":{"line":213,"column":163,"offset":8945},"indent":[]}}],"position":{"start":{"line":213,"column":5,"offset":8787},"end":{"line":213,"column":163,"offset":8945},"indent":[]}}],"position":{"start":{"line":213,"column":3,"offset":8785},"end":{"line":213,"column":163,"offset":8945},"indent":[]}}],"position":{"start":{"line":213,"column":3,"offset":8785},"end":{"line":213,"column":163,"offset":8945},"indent":[]}}],"position":{"start":{"line":211,"column":1,"offset":8747},"end":{"line":214,"column":1,"offset":8946},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"ttl","position":{"start":{"line":215,"column":4,"offset":8950},"end":{"line":215,"column":7,"offset":8953},"indent":[]}}],"position":{"start":{"line":215,"column":3,"offset":8949},"end":{"line":215,"column":8,"offset":8954},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":215,"column":8,"offset":8954},"end":{"line":215,"column":9,"offset":8955},"indent":[]}},{"type":"jsx","value":"<Type>","position":{"start":{"line":215,"column":9,"offset":8955},"end":{"line":215,"column":15,"offset":8961},"indent":[]}},{"type":"text","value":"Integer literal","position":{"start":{"line":215,"column":15,"offset":8961},"end":{"line":215,"column":30,"offset":8976},"indent":[]}},{"type":"jsx","value":"</Type>","position":{"start":{"line":215,"column":30,"offset":8976},"end":{"line":215,"column":37,"offset":8983},"indent":[]}}],"position":{"start":{"line":215,"column":3,"offset":8949},"end":{"line":215,"column":37,"offset":8983},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Defines the time-to-live for the HMAC token, expressed in seconds. Determines how long the token is valid, relative to the time it was issued.","position":{"start":{"line":217,"column":5,"offset":8989},"end":{"line":217,"column":147,"offset":9131},"indent":[]}}],"position":{"start":{"line":217,"column":5,"offset":8989},"end":{"line":217,"column":147,"offset":9131},"indent":[]}}],"position":{"start":{"line":217,"column":3,"offset":8987},"end":{"line":217,"column":147,"offset":9131},"indent":[]}}],"position":{"start":{"line":217,"column":3,"offset":8987},"end":{"line":217,"column":147,"offset":9131},"indent":[]}}],"position":{"start":{"line":215,"column":1,"offset":8947},"end":{"line":218,"column":1,"offset":9132},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"currentTimeStamp","position":{"start":{"line":219,"column":4,"offset":9136},"end":{"line":219,"column":20,"offset":9152},"indent":[]}}],"position":{"start":{"line":219,"column":3,"offset":9135},"end":{"line":219,"column":21,"offset":9153},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":219,"column":21,"offset":9153},"end":{"line":219,"column":22,"offset":9154},"indent":[]}},{"type":"jsx","value":"<Type>","position":{"start":{"line":219,"column":22,"offset":9154},"end":{"line":219,"column":28,"offset":9160},"indent":[]}},{"type":"text","value":"Integer","position":{"start":{"line":219,"column":28,"offset":9160},"end":{"line":219,"column":35,"offset":9167},"indent":[]}},{"type":"jsx","value":"</Type>","position":{"start":{"line":219,"column":35,"offset":9167},"end":{"line":219,"column":42,"offset":9174},"indent":[]}}],"position":{"start":{"line":219,"column":3,"offset":9135},"end":{"line":219,"column":42,"offset":9174},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Represents the Unix timestamp when Cloudflare received the request, expressed in seconds. Pass the ","position":{"start":{"line":221,"column":5,"offset":9180},"end":{"line":221,"column":104,"offset":9279},"indent":[]}},{"type":"inlineCode","value":"http.request.timestamp.sec","position":{"start":{"line":221,"column":104,"offset":9279},"end":{"line":221,"column":132,"offset":9307},"indent":[]}},{"type":"text","value":" field as an approximate value to this argument.","position":{"start":{"line":221,"column":132,"offset":9307},"end":{"line":221,"column":180,"offset":9355},"indent":[]}}],"position":{"start":{"line":221,"column":5,"offset":9180},"end":{"line":221,"column":180,"offset":9355},"indent":[]}}],"position":{"start":{"line":221,"column":3,"offset":9178},"end":{"line":221,"column":180,"offset":9355},"indent":[]}}],"position":{"start":{"line":221,"column":3,"offset":9178},"end":{"line":221,"column":180,"offset":9355},"indent":[]}}],"position":{"start":{"line":219,"column":1,"offset":9133},"end":{"line":222,"column":1,"offset":9356},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"lengthOfSeparator","position":{"start":{"line":223,"column":4,"offset":9360},"end":{"line":223,"column":21,"offset":9377},"indent":[]}}],"position":{"start":{"line":223,"column":3,"offset":9359},"end":{"line":223,"column":22,"offset":9378},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":223,"column":22,"offset":9378},"end":{"line":223,"column":23,"offset":9379},"indent":[]}},{"type":"jsx","value":"<Type>","position":{"start":{"line":223,"column":23,"offset":9379},"end":{"line":223,"column":29,"offset":9385},"indent":[]}},{"type":"text","value":"Integer literal","position":{"start":{"line":223,"column":29,"offset":9385},"end":{"line":223,"column":44,"offset":9400},"indent":[]}},{"type":"jsx","value":"</Type>","position":{"start":{"line":223,"column":44,"offset":9400},"end":{"line":223,"column":51,"offset":9407},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":223,"column":51,"offset":9407},"end":{"line":223,"column":52,"offset":9408},"indent":[]}},{"type":"jsx","value":"<PropMeta>","position":{"start":{"line":223,"column":52,"offset":9408},"end":{"line":223,"column":62,"offset":9418},"indent":[]}},{"type":"text","value":"optional","position":{"start":{"line":223,"column":62,"offset":9418},"end":{"line":223,"column":70,"offset":9426},"indent":[]}},{"type":"jsx","value":"</PropMeta>","position":{"start":{"line":223,"column":70,"offset":9426},"end":{"line":223,"column":81,"offset":9437},"indent":[]}}],"position":{"start":{"line":223,"column":3,"offset":9359},"end":{"line":223,"column":81,"offset":9437},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Specifies the length of the ","position":{"start":{"line":225,"column":5,"offset":9443},"end":{"line":225,"column":33,"offset":9471},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"separator","position":{"start":{"line":225,"column":34,"offset":9472},"end":{"line":225,"column":43,"offset":9481},"indent":[]}}],"position":{"start":{"line":225,"column":33,"offset":9471},"end":{"line":225,"column":44,"offset":9482},"indent":[]}},{"type":"text","value":" between the ","position":{"start":{"line":225,"column":44,"offset":9482},"end":{"line":225,"column":57,"offset":9495},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timestamp","position":{"start":{"line":225,"column":58,"offset":9496},"end":{"line":225,"column":67,"offset":9505},"indent":[]}}],"position":{"start":{"line":225,"column":57,"offset":9495},"end":{"line":225,"column":68,"offset":9506},"indent":[]}},{"type":"text","value":" and the ","position":{"start":{"line":225,"column":68,"offset":9506},"end":{"line":225,"column":77,"offset":9515},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"message","position":{"start":{"line":225,"column":78,"offset":9516},"end":{"line":225,"column":85,"offset":9523},"indent":[]}}],"position":{"start":{"line":225,"column":77,"offset":9515},"end":{"line":225,"column":86,"offset":9524},"indent":[]}},{"type":"text","value":" in the ","position":{"start":{"line":225,"column":86,"offset":9524},"end":{"line":225,"column":94,"offset":9532},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MessageMAC","position":{"start":{"line":225,"column":95,"offset":9533},"end":{"line":225,"column":105,"offset":9543},"indent":[]}}],"position":{"start":{"line":225,"column":94,"offset":9532},"end":{"line":225,"column":106,"offset":9544},"indent":[]}},{"type":"text","value":". Expressed in bytes, with a default value of 0.","position":{"start":{"line":225,"column":106,"offset":9544},"end":{"line":225,"column":154,"offset":9592},"indent":[]}}],"position":{"start":{"line":225,"column":5,"offset":9443},"end":{"line":225,"column":154,"offset":9592},"indent":[]}}],"position":{"start":{"line":225,"column":3,"offset":9441},"end":{"line":225,"column":154,"offset":9592},"indent":[]}}],"position":{"start":{"line":225,"column":3,"offset":9441},"end":{"line":225,"column":154,"offset":9592},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":9357},"end":{"line":226,"column":1,"offset":9593},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"flags","position":{"start":{"line":227,"column":4,"offset":9597},"end":{"line":227,"column":9,"offset":9602},"indent":[]}}],"position":{"start":{"line":227,"column":3,"offset":9596},"end":{"line":227,"column":10,"offset":9603},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":227,"column":10,"offset":9603},"end":{"line":227,"column":11,"offset":9604},"indent":[]}},{"type":"jsx","value":"<Type>","position":{"start":{"line":227,"column":11,"offset":9604},"end":{"line":227,"column":17,"offset":9610},"indent":[]}},{"type":"text","value":"String literal","position":{"start":{"line":227,"column":17,"offset":9610},"end":{"line":227,"column":31,"offset":9624},"indent":[]}},{"type":"jsx","value":"</Type>","position":{"start":{"line":227,"column":31,"offset":9624},"end":{"line":227,"column":38,"offset":9631},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":227,"column":38,"offset":9631},"end":{"line":227,"column":39,"offset":9632},"indent":[]}},{"type":"jsx","value":"<PropMeta>","position":{"start":{"line":227,"column":39,"offset":9632},"end":{"line":227,"column":49,"offset":9642},"indent":[]}},{"type":"text","value":"optional","position":{"start":{"line":227,"column":49,"offset":9642},"end":{"line":227,"column":57,"offset":9650},"indent":[]}},{"type":"jsx","value":"</PropMeta>","position":{"start":{"line":227,"column":57,"offset":9650},"end":{"line":227,"column":68,"offset":9661},"indent":[]}}],"position":{"start":{"line":227,"column":3,"offset":9596},"end":{"line":227,"column":68,"offset":9661},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When you set this optional argument to ","position":{"start":{"line":229,"column":5,"offset":9667},"end":{"line":229,"column":44,"offset":9706},"indent":[]}},{"type":"inlineCode","value":"'s'","position":{"start":{"line":229,"column":44,"offset":9706},"end":{"line":229,"column":49,"offset":9711},"indent":[]}},{"type":"text","value":", the function expects the value of the base64-encoded ","position":{"start":{"line":229,"column":49,"offset":9711},"end":{"line":229,"column":104,"offset":9766},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"mac","position":{"start":{"line":229,"column":105,"offset":9767},"end":{"line":229,"column":108,"offset":9770},"indent":[]}}],"position":{"start":{"line":229,"column":104,"offset":9766},"end":{"line":229,"column":109,"offset":9771},"indent":[]}},{"type":"text","value":" in the ","position":{"start":{"line":229,"column":109,"offset":9771},"end":{"line":229,"column":117,"offset":9779},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MessageMAC","position":{"start":{"line":229,"column":118,"offset":9780},"end":{"line":229,"column":128,"offset":9790},"indent":[]}}],"position":{"start":{"line":229,"column":117,"offset":9779},"end":{"line":229,"column":129,"offset":9791},"indent":[]}},{"type":"text","value":" argument to use the URL-safe character set with no padding.","position":{"start":{"line":229,"column":129,"offset":9791},"end":{"line":229,"column":189,"offset":9851},"indent":[]}}],"position":{"start":{"line":229,"column":5,"offset":9667},"end":{"line":229,"column":189,"offset":9851},"indent":[]}}],"position":{"start":{"line":229,"column":3,"offset":9665},"end":{"line":230,"column":1,"offset":9852},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When you do ","position":{"start":{"line":231,"column":5,"offset":9857},"end":{"line":231,"column":17,"offset":9869},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"not","position":{"start":{"line":231,"column":19,"offset":9871},"end":{"line":231,"column":22,"offset":9874},"indent":[]}}],"position":{"start":{"line":231,"column":17,"offset":9869},"end":{"line":231,"column":24,"offset":9876},"indent":[]}},{"type":"text","value":" set the value of ","position":{"start":{"line":231,"column":24,"offset":9876},"end":{"line":231,"column":42,"offset":9894},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"flags","position":{"start":{"line":231,"column":43,"offset":9895},"end":{"line":231,"column":48,"offset":9900},"indent":[]}}],"position":{"start":{"line":231,"column":42,"offset":9894},"end":{"line":231,"column":49,"offset":9901},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":231,"column":49,"offset":9901},"end":{"line":231,"column":53,"offset":9905},"indent":[]}},{"type":"inlineCode","value":"'s'","position":{"start":{"line":231,"column":53,"offset":9905},"end":{"line":231,"column":58,"offset":9910},"indent":[]}},{"type":"text","value":", you must URL encode the base64 value for ","position":{"start":{"line":231,"column":58,"offset":9910},"end":{"line":231,"column":101,"offset":9953},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"mac","position":{"start":{"line":231,"column":102,"offset":9954},"end":{"line":231,"column":105,"offset":9957},"indent":[]}}],"position":{"start":{"line":231,"column":101,"offset":9953},"end":{"line":231,"column":106,"offset":9958},"indent":[]}},{"type":"text","value":" in the ","position":{"start":{"line":231,"column":106,"offset":9958},"end":{"line":231,"column":114,"offset":9966},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MessageMAC","position":{"start":{"line":231,"column":115,"offset":9967},"end":{"line":231,"column":125,"offset":9977},"indent":[]}}],"position":{"start":{"line":231,"column":114,"offset":9966},"end":{"line":231,"column":126,"offset":9978},"indent":[]}},{"type":"text","value":" argument.","position":{"start":{"line":231,"column":126,"offset":9978},"end":{"line":231,"column":136,"offset":9988},"indent":[]}}],"position":{"start":{"line":231,"column":5,"offset":9857},"end":{"line":231,"column":136,"offset":9988},"indent":[]}}],"position":{"start":{"line":231,"column":3,"offset":9855},"end":{"line":231,"column":136,"offset":9988},"indent":[]}}],"position":{"start":{"line":229,"column":3,"offset":9665},"end":{"line":231,"column":136,"offset":9988},"indent":[1,3]}}],"position":{"start":{"line":227,"column":1,"offset":9594},"end":{"line":231,"column":136,"offset":9988},"indent":[1,1,1,1]}}],"position":{"start":{"line":207,"column":1,"offset":8641},"end":{"line":231,"column":136,"offset":9988},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</Definitions>","position":{"start":{"line":233,"column":1,"offset":9990},"end":{"line":233,"column":15,"offset":10004},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Usage","position":{"start":{"line":235,"column":5,"offset":10010},"end":{"line":235,"column":10,"offset":10015},"indent":[]}}],"position":{"start":{"line":235,"column":1,"offset":10006},"end":{"line":235,"column":10,"offset":10015},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":237,"column":1,"offset":10017},"end":{"line":237,"column":5,"offset":10021},"indent":[]}},{"type":"inlineCode","value":"is_timed_hmac_valid_v0()","position":{"start":{"line":237,"column":5,"offset":10021},"end":{"line":237,"column":31,"offset":10047},"indent":[]}},{"type":"text","value":" function uses the supplied ","position":{"start":{"line":237,"column":31,"offset":10047},"end":{"line":237,"column":59,"offset":10075},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Key","position":{"start":{"line":237,"column":60,"offset":10076},"end":{"line":237,"column":63,"offset":10079},"indent":[]}}],"position":{"start":{"line":237,"column":59,"offset":10075},"end":{"line":237,"column":64,"offset":10080},"indent":[]}},{"type":"text","value":" to generate a message authentication code (MAC) from the ","position":{"start":{"line":237,"column":64,"offset":10080},"end":{"line":237,"column":122,"offset":10138},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"message","position":{"start":{"line":237,"column":123,"offset":10139},"end":{"line":237,"column":130,"offset":10146},"indent":[]}}],"position":{"start":{"line":237,"column":122,"offset":10138},"end":{"line":237,"column":131,"offset":10147},"indent":[]}},{"type":"text","value":" and the ","position":{"start":{"line":237,"column":131,"offset":10147},"end":{"line":237,"column":140,"offset":10156},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timestamp","position":{"start":{"line":237,"column":141,"offset":10157},"end":{"line":237,"column":150,"offset":10166},"indent":[]}}],"position":{"start":{"line":237,"column":140,"offset":10156},"end":{"line":237,"column":151,"offset":10167},"indent":[]}},{"type":"text","value":" regions of the MessageMAC. When the generated MAC matches the ","position":{"start":{"line":237,"column":151,"offset":10167},"end":{"line":237,"column":214,"offset":10230},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"mac","position":{"start":{"line":237,"column":215,"offset":10231},"end":{"line":237,"column":218,"offset":10234},"indent":[]}}],"position":{"start":{"line":237,"column":214,"offset":10230},"end":{"line":237,"column":219,"offset":10235},"indent":[]}},{"type":"text","value":" region of the MessageMAC and the token has not expired, the HMAC is valid and the function returns ","position":{"start":{"line":237,"column":219,"offset":10235},"end":{"line":237,"column":319,"offset":10335},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":237,"column":319,"offset":10335},"end":{"line":237,"column":325,"offset":10341},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":237,"column":325,"offset":10341},"end":{"line":237,"column":326,"offset":10342},"indent":[]}}],"position":{"start":{"line":237,"column":1,"offset":10017},"end":{"line":237,"column":326,"offset":10342},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, the following expression matches requests to ","position":{"start":{"line":239,"column":1,"offset":10344},"end":{"line":239,"column":59,"offset":10402},"indent":[]}},{"type":"inlineCode","value":"download.example.com","position":{"start":{"line":239,"column":59,"offset":10402},"end":{"line":239,"column":81,"offset":10424},"indent":[]}},{"type":"text","value":" that do not include valid HMAC tokens:","position":{"start":{"line":239,"column":81,"offset":10424},"end":{"line":239,"column":120,"offset":10463},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":10344},"end":{"line":239,"column":120,"offset":10463},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"http.host == \"download.example.com\"\nand not is_timed_hmac_valid_v0(\"mysecretkey\", http.request.uri, 100000, http.request.timestamp.sec, 8)","position":{"start":{"line":241,"column":1,"offset":10465},"end":{"line":244,"column":4,"offset":10615},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To review examples of firewall rules that use HMAC validation, see ","position":{"start":{"line":246,"column":1,"offset":10617},"end":{"line":246,"column":68,"offset":10684},"indent":[]}},{"type":"link","title":null,"url":"/recipes/","children":[{"type":"emphasis","children":[{"type":"text","value":"Common use cases","position":{"start":{"line":246,"column":70,"offset":10686},"end":{"line":246,"column":86,"offset":10702},"indent":[]}}],"position":{"start":{"line":246,"column":69,"offset":10685},"end":{"line":246,"column":87,"offset":10703},"indent":[]}}],"position":{"start":{"line":246,"column":68,"offset":10684},"end":{"line":246,"column":99,"offset":10715},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":246,"column":99,"offset":10715},"end":{"line":246,"column":100,"offset":10716},"indent":[]}}],"position":{"start":{"line":246,"column":1,"offset":10617},"end":{"line":246,"column":100,"offset":10716},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"MessageMAC","position":{"start":{"line":248,"column":5,"offset":10722},"end":{"line":248,"column":15,"offset":10732},"indent":[]}}],"position":{"start":{"line":248,"column":1,"offset":10718},"end":{"line":248,"column":15,"offset":10732},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A valid MessageMAC satisfies the regular expression","position":{"start":{"line":250,"column":1,"offset":10734},"end":{"line":250,"column":52,"offset":10785},"indent":[]}}],"position":{"start":{"line":250,"column":1,"offset":10734},"end":{"line":250,"column":52,"offset":10785},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"(.+)(.*)(\\d{10})-(.{43,})","position":{"start":{"line":252,"column":1,"offset":10787},"end":{"line":254,"column":4,"offset":10824},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and is composed of these parentheses-delimited expressions:","position":{"start":{"line":256,"column":1,"offset":10826},"end":{"line":256,"column":60,"offset":10885},"indent":[]}}],"position":{"start":{"line":256,"column":1,"offset":10826},"end":{"line":256,"column":60,"offset":10885},"indent":[]}},{"type":"jsx","value":"<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th style=\"width:50%\">Description</th>\n      <th>Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td valign=\"top\"><code>(.+)</code></td>\n      <td>The <em>message</em> to validate</td>\n      <td valign=\"top\"><code class=\"InlineCode\">/download/cat.jpg</code></td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><code>(.*)</code></td>\n      <td>The <em>separator</em> between message and timestamp, commonly a parameter name</td>\n      <td valign=\"top\"><code class=\"InlineCode\">&verify=</code></td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><code>(\\d{'{10}'})</code></td>\n      <td>The 10-digit Unix <em>timestamp</em> when the MAC was issued, expressed in seconds</td>\n      <td valign=\"top\"><code class=\"InlineCode\">1484063137</code></td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><code>(.{'{43,}'})</code></td>\n      <td><p>A base64-encoded version of the <em>MAC</em>. When you do not set the value of the <em>urlSafe</em> argument in the HMAC validation function to <code class=\"InlineCode\">'s'</code>, you must URL encode the base64 value for <em>mac</em>.</p>\n      <p>When the base64 MAC encoding is URL-safe, the value for <em>mac</em> contains 43 bytes. Otherwise, the value will be 44 bytes or more, because of URL encoding.</p></td>\n      <td valign=\"top\"><code class=\"InlineCode\">IaLGSmELTvlhfd0ItdN6PhhHTFhzx<br />73EX8uy%2FcSDiIU%3D</code></td>\n    </tr>\n  </tbody>\n</table>","position":{"start":{"line":258,"column":1,"offset":10887},"end":{"line":289,"column":9,"offset":12339},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For details on generating a MessageMAC, see ","position":{"start":{"line":291,"column":1,"offset":12341},"end":{"line":291,"column":45,"offset":12385},"indent":[]}},{"type":"link","title":null,"url":"https://support.cloudflare.com/hc/articles/115001376488#6P9Gz7kmyxQrpL6r6iPKQR","children":[{"type":"emphasis","children":[{"type":"text","value":"Implement token creation","position":{"start":{"line":291,"column":47,"offset":12387},"end":{"line":291,"column":71,"offset":12411},"indent":[]}}],"position":{"start":{"line":291,"column":46,"offset":12386},"end":{"line":291,"column":72,"offset":12412},"indent":[]}}],"position":{"start":{"line":291,"column":45,"offset":12385},"end":{"line":291,"column":153,"offset":12493},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":291,"column":153,"offset":12493},"end":{"line":291,"column":154,"offset":12494},"indent":[]}}],"position":{"start":{"line":291,"column":1,"offset":12341},"end":{"line":291,"column":154,"offset":12494},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"HMAC validation examples","position":{"start":{"line":293,"column":4,"offset":12499},"end":{"line":293,"column":28,"offset":12523},"indent":[]}}],"position":{"start":{"line":293,"column":1,"offset":12496},"end":{"line":293,"column":28,"offset":12523},"indent":[]}},{"type":"jsx","value":"<Aside type='warning' header='Important'>","position":{"start":{"line":295,"column":1,"offset":12525},"end":{"line":295,"column":42,"offset":12566},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When you do not use the optional ","position":{"start":{"line":297,"column":1,"offset":12568},"end":{"line":297,"column":34,"offset":12601},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"flags","position":{"start":{"line":297,"column":35,"offset":12602},"end":{"line":297,"column":40,"offset":12607},"indent":[]}}],"position":{"start":{"line":297,"column":34,"offset":12601},"end":{"line":297,"column":41,"offset":12608},"indent":[]}},{"type":"text","value":" argument for ","position":{"start":{"line":297,"column":41,"offset":12608},"end":{"line":297,"column":55,"offset":12622},"indent":[]}},{"type":"inlineCode","value":"is_timed_hmac_valid_v0()","position":{"start":{"line":297,"column":55,"offset":12622},"end":{"line":297,"column":81,"offset":12648},"indent":[]}},{"type":"text","value":", you must URL encode the base64 value for ","position":{"start":{"line":297,"column":81,"offset":12648},"end":{"line":297,"column":124,"offset":12691},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"mac","position":{"start":{"line":297,"column":125,"offset":12692},"end":{"line":297,"column":128,"offset":12695},"indent":[]}}],"position":{"start":{"line":297,"column":124,"offset":12691},"end":{"line":297,"column":129,"offset":12696},"indent":[]}},{"type":"text","value":" in the ","position":{"start":{"line":297,"column":129,"offset":12696},"end":{"line":297,"column":137,"offset":12704},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MessageMAC","position":{"start":{"line":297,"column":138,"offset":12705},"end":{"line":297,"column":148,"offset":12715},"indent":[]}}],"position":{"start":{"line":297,"column":137,"offset":12704},"end":{"line":297,"column":149,"offset":12716},"indent":[]}},{"type":"text","value":" argument.","position":{"start":{"line":297,"column":149,"offset":12716},"end":{"line":297,"column":159,"offset":12726},"indent":[]}}],"position":{"start":{"line":297,"column":1,"offset":12568},"end":{"line":297,"column":159,"offset":12726},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For more information, see ","position":{"start":{"line":299,"column":1,"offset":12728},"end":{"line":299,"column":27,"offset":12754},"indent":[]}},{"type":"link","title":null,"url":"#overview","children":[{"type":"text","value":"HMAC Validation: Overview","position":{"start":{"line":299,"column":28,"offset":12755},"end":{"line":299,"column":53,"offset":12780},"indent":[]}}],"position":{"start":{"line":299,"column":27,"offset":12754},"end":{"line":299,"column":65,"offset":12792},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":299,"column":65,"offset":12792},"end":{"line":299,"column":66,"offset":12793},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":12728},"end":{"line":299,"column":66,"offset":12793},"indent":[]}},{"type":"jsx","value":"</Aside>","position":{"start":{"line":301,"column":1,"offset":12795},"end":{"line":301,"column":9,"offset":12803},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Simple case","position":{"start":{"line":303,"column":5,"offset":12809},"end":{"line":303,"column":16,"offset":12820},"indent":[]}}],"position":{"start":{"line":303,"column":1,"offset":12805},"end":{"line":303,"column":16,"offset":12820},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Consider the case where the MessageMAC is contained entirely within a single field, as in this example URI path:","position":{"start":{"line":305,"column":1,"offset":12822},"end":{"line":305,"column":113,"offset":12934},"indent":[]}}],"position":{"start":{"line":305,"column":1,"offset":12822},"end":{"line":305,"column":113,"offset":12934},"indent":[]}},{"type":"code","lang":"http","meta":null,"value":"/download/cat.jpg?verify=1484063787-IaLGSmELTvlhfd0ItdN6PhhHTFhzx73EX8uy%2FcSDiIU%3D","position":{"start":{"line":307,"column":1,"offset":12936},"end":{"line":309,"column":4,"offset":13032},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note how the URI maps to the elements of the MessageMAC:","position":{"start":{"line":311,"column":1,"offset":13034},"end":{"line":311,"column":57,"offset":13090},"indent":[]}}],"position":{"start":{"line":311,"column":1,"offset":13034},"end":{"line":311,"column":57,"offset":13090},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"message","position":{"start":{"line":313,"column":4,"offset":13095},"end":{"line":313,"column":11,"offset":13102},"indent":[]}}],"position":{"start":{"line":313,"column":3,"offset":13094},"end":{"line":313,"column":12,"offset":13103},"indent":[]}},{"type":"text","value":": ","position":{"start":{"line":313,"column":12,"offset":13103},"end":{"line":313,"column":14,"offset":13105},"indent":[]}},{"type":"inlineCode","value":"/download/cat.jpg","position":{"start":{"line":313,"column":14,"offset":13105},"end":{"line":313,"column":33,"offset":13124},"indent":[]}}],"position":{"start":{"line":313,"column":3,"offset":13094},"end":{"line":313,"column":33,"offset":13124},"indent":[]}}],"position":{"start":{"line":313,"column":1,"offset":13092},"end":{"line":313,"column":33,"offset":13124},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"separator","position":{"start":{"line":314,"column":4,"offset":13128},"end":{"line":314,"column":13,"offset":13137},"indent":[]}}],"position":{"start":{"line":314,"column":3,"offset":13127},"end":{"line":314,"column":14,"offset":13138},"indent":[]}},{"type":"text","value":": ","position":{"start":{"line":314,"column":14,"offset":13138},"end":{"line":314,"column":16,"offset":13140},"indent":[]}},{"type":"inlineCode","value":"?verify=","position":{"start":{"line":314,"column":16,"offset":13140},"end":{"line":314,"column":26,"offset":13150},"indent":[]}}],"position":{"start":{"line":314,"column":3,"offset":13127},"end":{"line":314,"column":26,"offset":13150},"indent":[]}}],"position":{"start":{"line":314,"column":1,"offset":13125},"end":{"line":314,"column":26,"offset":13150},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"timestamp","position":{"start":{"line":315,"column":4,"offset":13154},"end":{"line":315,"column":13,"offset":13163},"indent":[]}}],"position":{"start":{"line":315,"column":3,"offset":13153},"end":{"line":315,"column":14,"offset":13164},"indent":[]}},{"type":"text","value":": ","position":{"start":{"line":315,"column":14,"offset":13164},"end":{"line":315,"column":16,"offset":13166},"indent":[]}},{"type":"inlineCode","value":"1484063787","position":{"start":{"line":315,"column":16,"offset":13166},"end":{"line":315,"column":28,"offset":13178},"indent":[]}}],"position":{"start":{"line":315,"column":3,"offset":13153},"end":{"line":315,"column":28,"offset":13178},"indent":[]}}],"position":{"start":{"line":315,"column":1,"offset":13151},"end":{"line":315,"column":28,"offset":13178},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"mac","position":{"start":{"line":316,"column":4,"offset":13182},"end":{"line":316,"column":7,"offset":13185},"indent":[]}}],"position":{"start":{"line":316,"column":3,"offset":13181},"end":{"line":316,"column":8,"offset":13186},"indent":[]}},{"type":"text","value":": ","position":{"start":{"line":316,"column":8,"offset":13186},"end":{"line":316,"column":10,"offset":13188},"indent":[]}},{"type":"inlineCode","value":"IaLGSmELTvlhfd0ItdN6PhhHTFhzx73EX8uy%2FcSDiIU%3D","position":{"start":{"line":316,"column":10,"offset":13188},"end":{"line":316,"column":60,"offset":13238},"indent":[]}}],"position":{"start":{"line":316,"column":3,"offset":13181},"end":{"line":316,"column":60,"offset":13238},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":13179},"end":{"line":316,"column":60,"offset":13238},"indent":[]}}],"position":{"start":{"line":313,"column":1,"offset":13092},"end":{"line":316,"column":60,"offset":13238},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"When the MessageMAC is contained entirely within a single field such as ","position":{"start":{"line":318,"column":1,"offset":13240},"end":{"line":318,"column":73,"offset":13312},"indent":[]}},{"type":"inlineCode","value":"http.request.uri","position":{"start":{"line":318,"column":73,"offset":13312},"end":{"line":318,"column":91,"offset":13330},"indent":[]}},{"type":"text","value":", using the validation function is straightforward. Pass the name of the field to the ","position":{"start":{"line":318,"column":91,"offset":13330},"end":{"line":318,"column":177,"offset":13416},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MessageMAC","position":{"start":{"line":318,"column":178,"offset":13417},"end":{"line":318,"column":188,"offset":13427},"indent":[]}}],"position":{"start":{"line":318,"column":177,"offset":13416},"end":{"line":318,"column":189,"offset":13428},"indent":[]}},{"type":"text","value":" argument:","position":{"start":{"line":318,"column":189,"offset":13428},"end":{"line":318,"column":199,"offset":13438},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":13240},"end":{"line":318,"column":199,"offset":13438},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"is_timed_hmac_valid_v0(\n  \"mysecretkey\",\n  http.request.uri,\n  100000,\n  http.request.timestamp.sec,\n  8\n)","position":{"start":{"line":320,"column":1,"offset":13440},"end":{"line":328,"column":4,"offset":13558},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Concatenated MessageMAC argument","position":{"start":{"line":330,"column":5,"offset":13564},"end":{"line":330,"column":37,"offset":13596},"indent":[]}}],"position":{"start":{"line":330,"column":1,"offset":13560},"end":{"line":330,"column":37,"offset":13596},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To compose a MessageMAC from more than one field, use the ","position":{"start":{"line":332,"column":1,"offset":13598},"end":{"line":332,"column":59,"offset":13656},"indent":[]}},{"type":"inlineCode","value":"concat()","position":{"start":{"line":332,"column":59,"offset":13656},"end":{"line":332,"column":69,"offset":13666},"indent":[]}},{"type":"text","value":" function.","position":{"start":{"line":332,"column":69,"offset":13666},"end":{"line":332,"column":79,"offset":13676},"indent":[]}}],"position":{"start":{"line":332,"column":1,"offset":13598},"end":{"line":332,"column":79,"offset":13676},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This example constructs the MessageMAC by concatenating the request URI and two header fields:","position":{"start":{"line":334,"column":1,"offset":13678},"end":{"line":334,"column":95,"offset":13772},"indent":[]}}],"position":{"start":{"line":334,"column":1,"offset":13678},"end":{"line":334,"column":95,"offset":13772},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"is_timed_hmac_valid_v0(\n  \"mysecretkey\",\n  concat(\n    http.request.uri,\n    http.request.headers[\"timestamp\"][0],\n    \"-\",\n    http.request.headers[\"mac\"][0]),\n  100000,\n  http.request.timestamp.sec,\n  0\n)","position":{"start":{"line":336,"column":1,"offset":13774},"end":{"line":348,"column":4,"offset":13992},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For more on ","position":{"start":{"line":350,"column":1,"offset":13994},"end":{"line":350,"column":13,"offset":14006},"indent":[]}},{"type":"inlineCode","value":"concat()","position":{"start":{"line":350,"column":13,"offset":14006},"end":{"line":350,"column":23,"offset":14016},"indent":[]}},{"type":"text","value":" usage, see ","position":{"start":{"line":350,"column":23,"offset":14016},"end":{"line":350,"column":35,"offset":14028},"indent":[]}},{"type":"link","title":null,"url":"#transformation-functions","children":[{"type":"emphasis","children":[{"type":"text","value":"Transformation functions","position":{"start":{"line":350,"column":37,"offset":14030},"end":{"line":350,"column":61,"offset":14054},"indent":[]}}],"position":{"start":{"line":350,"column":36,"offset":14029},"end":{"line":350,"column":62,"offset":14055},"indent":[]}}],"position":{"start":{"line":350,"column":35,"offset":14028},"end":{"line":350,"column":90,"offset":14083},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":350,"column":90,"offset":14083},"end":{"line":350,"column":91,"offset":14084},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":13994},"end":{"line":350,"column":91,"offset":14084},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"pcx-content-type\":\"reference\",\"order\":640}","position":{"start":{"line":353,"column":1,"offset":14087},"end":{"line":353,"column":73,"offset":14159},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":353,"column":73,"offset":14159}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"pcx-content-type\": \"reference\",\n  \"order\": 640\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Definitions = makeShortcode(\"Definitions\");\nvar Type = makeShortcode(\"Type\");\nvar ParamType = makeShortcode(\"ParamType\");\nvar Aside = makeShortcode(\"Aside\");\nvar PropMeta = makeShortcode(\"PropMeta\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"functions\"\n  }, \"Functions\"), mdx(\"p\", null, \"The Cloudflare Firewall Rules language provides functions for manipulating and validating values in an expression:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#transformation-functions\"\n  }, \"Transformation functions\"), \" manipulate values extracted from an HTTP request.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#hmac-validation\"\n  }, \"HMAC Validation function\"), \" tests the validity of an HMAC token. Use it to write expressions that target requests based on the presence of a valid HMAC token.\")), mdx(\"h2\", {\n    \"id\": \"transformation-functions\"\n  }, \"Transformation functions\"), mdx(\"p\", null, \"The Cloudflare Firewall Rules language supports several functions that transform values extracted from HTTP requests. A common use case for transformation functions is the conversion of a string of characters to uppercase or lowercase, since by default, string evaluation is case sensitive.\"), mdx(\"p\", null, \"For example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lower()\"), \" function converts all uppercase characters in a string to lowercase.\"), mdx(\"p\", null, \"In the expression below, the\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lower()\"), \" function transforms \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.host\"), \" values to lowercase so that they match the target value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"www.cloudflare.com\\\"\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"lower(http.host) == \\\"www.cloudflare.com\\\"\\n\")), mdx(\"p\", null, \"Transformation functions that do not take arrays as an argument type require the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[*]\"), \" special index notation. Refer to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/cf-firewall-language/values#arrays\"\n  }, \"Arrays\"), \" for more information.\"), mdx(\"p\", null, \"The Cloudflare Firewall Rules language supports these transformation functions:\"), mdx(Definitions, {\n    mdxType: \"Definitions\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"any(\", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Array\"), '<', mdx(ParamType, {\n    mdxType: \"ParamType\"\n  }, \"Boolean\"), '>', \")\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Boolean\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Returns \", mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"true\"), \" when the comparison operator in the argument returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" for \", mdx(\"em\", null, \"any\"), \" of the values in the argument array. Returns \", mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"false\"), \" otherwise.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", null, \"Example:\"), mdx(\"br\", null), mdx(\"code\", {\n    className: \"InlineCode\",\n    style: {\n      \"width\": \"100%\"\n    }\n  }, \"any(url_decode(http.request.body.form.values[*])[*] contains \\\"an xss attack\\\")\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"all(\", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Array\"), '<', mdx(ParamType, {\n    mdxType: \"ParamType\"\n  }, \"Boolean\"), '>', \")\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Boolean\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Returns \", mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"true\"), \" when the comparison operator in the argument returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" for \", mdx(\"em\", null, \"all\"), \" values in the argument array. Returns \", mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"false\"), \" otherwise.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", null, \"Example:\"), mdx(\"br\", null), mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"all(http.request.headers['content-type'][*] == \\\"application/json\\\")\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"concat(\", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String | Integer | bytes | Array elements\"), \")\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Takes a comma-separated list of values. Concatenates the argument values into a single String.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", null, \"Example:\"), mdx(\"br\", null), mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"concat(\\\"String1\\\",\\\" \\\",\\\"String\\\",2) == \\\"String1 String2\\\"\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"ends_with(source\", mdx(ParamType, {\n    mdxType: \"ParamType\"\n  }, \"String\"), \", substring\", mdx(ParamType, {\n    mdxType: \"ParamType\"\n  }, \"String\"), \")\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Boolean\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" when the source ends with a given substring. Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" otherwise. The source cannot be a literal value (for example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"foo\\\"\"), \").\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Example:\"), mdx(\"br\", null), \"\\nIf \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.request.uri.path\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"/welcome.html\\\"\"), \", then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ends_with(http.request.uri.path, \\\".html\\\")\"), \" will return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \".\"), mdx(Aside, {\n    type: \"warning\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Warning:\"), \" You can only use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ends_with()\"), \" function in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/ruleset-engine/\"\n  }, \"rulesets\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/rules/transform\"\n  }, \"Transform Rules\"), \".\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"len(\", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String | bytes\"), \")\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Integer\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Returns the byte length of a String or Bytes field.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", null, \"Example:\"), mdx(\"br\", null), mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"len(http.host)\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"lower(\", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\"), \")\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Converts a string field to lowercase. Only uppercase ASCII bytes are converted. All other bytes are unaffected.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", null, \"Example:\"), mdx(\"br\", null), mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"lower(http.host) == \\\"www.cloudflare.com\\\"\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"regex_replace(source\", mdx(ParamType, {\n    mdxType: \"ParamType\"\n  }, \"String\"), \", regular_expression\", mdx(ParamType, {\n    mdxType: \"ParamType\"\n  }, \"String\"), \", replacement\", mdx(ParamType, {\n    mdxType: \"ParamType\"\n  }, \"String\"), \")\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Replaces a part of a source string matched by a regular expression with a replacement string, returning the result. The replacement string can contain references to regular expression capture groups.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Examples:\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Literal match replace:\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"regex_replace(\\\"/foo/bar\\\", \\\"/bar$\\\", \\\"/baz\\\") == \\\"/foo/baz\\\"\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If there is no match, the input string does not change:\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"regex_replace(\\\"/x\\\", \\\"^/y$\\\", \\\"/mumble\\\") == \\\"/x\\\"\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Match is case sensitive by default:\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"regex_replace(\\\"/foo\\\", \\\"^/FOO$\\\", \\\"/x\\\") == \\\"/foo\\\"\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When there are multiple matches, only one replacement occurs (the first one):\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"regex_replace(\\\"/a/a\\\", \\\"/a\\\", \\\"/b\\\") == \\\"/b/a\\\"\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Escape a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$\"), \" in the replacement string by prefixing it with another \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$\"), \":\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"regex_replace(\\\"/b\\\", \\\"^/b$\\\", \\\"/b$$\\\") == \\\"/b$\\\"\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Replace with capture groups:\", mdx(\"br\", null), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"regex_replace(\\\"/foo/a/path\\\", \\\"^/foo/([^/]*)/(.*)$\\\", \\\"/bar/${2}/${1}\\\") == \\\"/bar/path/a/\\\"\")), mdx(Aside, {\n    type: \"warning\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Warning:\"), \" You can only use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"regex_replace()\"), \" function in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/rules/transform\"\n  }, \"rewrite expressions of Transform Rules\"), \". Additionally, the first argument must be a field under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.request.headers\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.request.uri\"), \".\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"remove_bytes(\", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"bytes\"), \")\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"bytes\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Returns a new byte array with all the occurrences of the given bytes removed.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", null, \"Example:\"), mdx(\"br\", null), mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"remove_bytes(http.host, \\\"\\\\x2e\\\\x77\\\") == \\\"cloudflarecom\\\"\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"starts_with(source\", mdx(ParamType, {\n    mdxType: \"ParamType\"\n  }, \"String\"), \", substring\", mdx(ParamType, {\n    mdxType: \"ParamType\"\n  }, \"String\"), \")\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Boolean\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" when the source starts with a given substring. Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" otherwise. The source cannot be a literal value (for example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"foo\\\"\"), \").\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Example:\"), mdx(\"br\", null), \"\\nIf \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.request.uri.path\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"/blog/first-post\\\"\"), \", then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"starts_with(http.request.uri.path, \\\"/blog\\\")\"), \" will return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \".\"), mdx(Aside, {\n    type: \"warning\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Warning:\"), \" You can only use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"starts_with()\"), \" function in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/ruleset-engine/\"\n  }, \"rulesets\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/rules/transform\"\n  }, \"Transform Rules\"), \".\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"to_string(\", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Integer | Boolean | IP address\"), \")\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Returns the string representation of an Integer, Boolean, or IP address value.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Examples:\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"to_string(cf.bot_management.score) == '5'\\nto_string(ssl) == 'true'\\n\")), mdx(Aside, {\n    type: \"warning\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Warning:\"), \" You can only use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"to_string()\"), \" function in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/rules/transform\"\n  }, \"rewrite expressions of Transform Rules\"), \".\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"upper(\", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\"), \")\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Converts a string field to uppercase. Only lowercase ASCII bytes are converted. All other bytes are unaffected.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", null, \"Example:\"), mdx(\"br\", null), mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"upper(http.host) == \\\"WWW.CLOUDFLARE.COM\\\"\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"url_decode(\", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\"), \")\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Decodes a URL formatted string, as in the following:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"%20\"), \" and \", mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"+\"), \" decode to space characters \", mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \" \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"%E4%BD\"), \" decodes to \", mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"\\xE4\\xBD \")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", null, \"Example:\"), mdx(\"br\", null), mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"any(url_decode(http.request.body.form.values[*])[*] contains \\\"an xss attack\\\")\")))))), mdx(\"h2\", {\n    \"id\": \"magic-firewall-functions\"\n  }, \"Magic Firewall Functions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"bit_slice(\", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\"), \", \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Number\"), \", \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Number\"), \")\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Number\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Select a slice of contiguous bits from a string field. This is primarily intended for use with \", mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"ip\"), \" and \", mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"tcp\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The slice can be no longer than 31 bits, but multiple calls can be joined together via a logical expression.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use of structure fields is preferred over this mechanism.\")))), mdx(\"h2\", {\n    \"id\": \"hmac-validation\"\n  }, \"HMAC validation\"), mdx(Aside, {\n    type: \"warning\",\n    header: \"Important\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", null, \"Access to the HMAC validation function requires a Cloudflare Pro, Business, or Enterprise plan.\")), mdx(\"h3\", {\n    \"id\": \"overview\"\n  }, \"Overview\"), mdx(\"p\", null, \"You can validate hash-based message authentication code (HMAC) tokens in a Firewall Rules expression by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"is_timed_hmac_valid_v0()\"), \" function, which has this signature:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"is_timed_hmac_valid_v0(\\n  <String literal as Key>,\\n  <String field as MessageMAC>,\\n  <Integer literal as ttl>,\\n  <Integer as currentTimeStamp>,\\n  <Optional Integer literal as lengthOfSeparator, default: 0>,\\n  <Optional String literal as flags>\\n) -> <Bool as result>\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"is_timed_hmac_valid_v0()\"), \" function has these parameter definitions:\"), mdx(Definitions, {\n    mdxType: \"Definitions\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Key\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String literal\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Specifies the secret cryptographic key for validating the HMAC.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"MessageMAC\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Contains a concatenation of these HMAC elements: \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"message\"), \", \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"separator\"), \", \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"timestamp\"), \", \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"mac\"), \". For a definition and an example, see \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#messagemac\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"MessageMAC\")), \".\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ttl\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Integer literal\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Defines the time-to-live for the HMAC token, expressed in seconds. Determines how long the token is valid, relative to the time it was issued.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"currentTimeStamp\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Integer\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Represents the Unix timestamp when Cloudflare received the request, expressed in seconds. Pass the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http.request.timestamp.sec\"), \" field as an approximate value to this argument.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"lengthOfSeparator\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Integer literal\"), \" \", mdx(PropMeta, {\n    mdxType: \"PropMeta\"\n  }, \"optional\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Specifies the length of the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"separator\"), \" between the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"timestamp\"), \" and the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"message\"), \" in the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"MessageMAC\"), \". Expressed in bytes, with a default value of 0.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"flags\"), \" \", mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String literal\"), \" \", mdx(PropMeta, {\n    mdxType: \"PropMeta\"\n  }, \"optional\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When you set this optional argument to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'s'\"), \", the function expects the value of the base64-encoded \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mac\"), \" in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"MessageMAC\"), \" argument to use the URL-safe character set with no padding.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When you do \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" set the value of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"flags\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'s'\"), \", you must URL encode the base64 value for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mac\"), \" in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"MessageMAC\"), \" argument.\")))))), mdx(\"h3\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"is_timed_hmac_valid_v0()\"), \" function uses the supplied \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Key\"), \" to generate a message authentication code (MAC) from the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"message\"), \" and the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"timestamp\"), \" regions of the MessageMAC. When the generated MAC matches the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mac\"), \" region of the MessageMAC and the token has not expired, the HMAC is valid and the function returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \".\"), mdx(\"p\", null, \"For example, the following expression matches requests to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"download.example.com\"), \" that do not include valid HMAC tokens:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"http.host == \\\"download.example.com\\\"\\nand not is_timed_hmac_valid_v0(\\\"mysecretkey\\\", http.request.uri, 100000, http.request.timestamp.sec, 8)\\n\")), mdx(\"p\", null, \"To review examples of firewall rules that use HMAC validation, see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/recipes/\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Common use cases\")), \".\"), mdx(\"h3\", {\n    \"id\": \"messagemac\"\n  }, \"MessageMAC\"), mdx(\"p\", null, \"A valid MessageMAC satisfies the regular expression\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"(.+)(.*)(\\\\d{10})-(.{43,})\\n\")), mdx(\"p\", null, \"and is composed of these parentheses-delimited expressions:\"), mdx(\"table\", null, mdx(\"thead\", null, mdx(\"tr\", null, mdx(\"th\", null, \"Expression\"), mdx(\"th\", {\n    style: {\n      \"width\": \"50%\"\n    }\n  }, \"Description\"), mdx(\"th\", null, \"Example\"))), mdx(\"tbody\", null, mdx(\"tr\", null, mdx(\"td\", {\n    valign: \"top\"\n  }, mdx(\"code\", null, \"(.+)\")), mdx(\"td\", null, \"The \", mdx(\"em\", null, \"message\"), \" to validate\"), mdx(\"td\", {\n    valign: \"top\"\n  }, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"/download/cat.jpg\"))), mdx(\"tr\", null, mdx(\"td\", {\n    valign: \"top\"\n  }, mdx(\"code\", null, \"(.*)\")), mdx(\"td\", null, \"The \", mdx(\"em\", null, \"separator\"), \" between message and timestamp, commonly a parameter name\"), mdx(\"td\", {\n    valign: \"top\"\n  }, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"&verify=\"))), mdx(\"tr\", null, mdx(\"td\", {\n    valign: \"top\"\n  }, mdx(\"code\", null, \"(\\\\d\", '{10}', \")\")), mdx(\"td\", null, \"The 10-digit Unix \", mdx(\"em\", null, \"timestamp\"), \" when the MAC was issued, expressed in seconds\"), mdx(\"td\", {\n    valign: \"top\"\n  }, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"1484063137\"))), mdx(\"tr\", null, mdx(\"td\", {\n    valign: \"top\"\n  }, mdx(\"code\", null, \"(.\", '{43,}', \")\")), mdx(\"td\", null, mdx(\"p\", null, \"A base64-encoded version of the \", mdx(\"em\", null, \"MAC\"), \". When you do not set the value of the \", mdx(\"em\", null, \"urlSafe\"), \" argument in the HMAC validation function to \", mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"'s'\"), \", you must URL encode the base64 value for \", mdx(\"em\", null, \"mac\"), \".\"), mdx(\"p\", null, \"When the base64 MAC encoding is URL-safe, the value for \", mdx(\"em\", null, \"mac\"), \" contains 43 bytes. Otherwise, the value will be 44 bytes or more, because of URL encoding.\")), mdx(\"td\", {\n    valign: \"top\"\n  }, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"IaLGSmELTvlhfd0ItdN6PhhHTFhzx\", mdx(\"br\", null), \"73EX8uy%2FcSDiIU%3D\"))))), mdx(\"p\", null, \"For details on generating a MessageMAC, see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://support.cloudflare.com/hc/articles/115001376488#6P9Gz7kmyxQrpL6r6iPKQR\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Implement token creation\")), \".\"), mdx(\"h2\", {\n    \"id\": \"hmac-validation-examples\"\n  }, \"HMAC validation examples\"), mdx(Aside, {\n    type: \"warning\",\n    header: \"Important\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", null, \"When you do not use the optional \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"flags\"), \" argument for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"is_timed_hmac_valid_v0()\"), \", you must URL encode the base64 value for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mac\"), \" in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"MessageMAC\"), \" argument.\"), mdx(\"p\", null, \"For more information, see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#overview\"\n  }, \"HMAC Validation: Overview\"), \".\")), mdx(\"h3\", {\n    \"id\": \"simple-case\"\n  }, \"Simple case\"), mdx(\"p\", null, \"Consider the case where the MessageMAC is contained entirely within a single field, as in this example URI path:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-http\"\n  }, \"/download/cat.jpg?verify=1484063787-IaLGSmELTvlhfd0ItdN6PhhHTFhzx73EX8uy%2FcSDiIU%3D\\n\")), mdx(\"p\", null, \"Note how the URI maps to the elements of the MessageMAC:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"message\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/download/cat.jpg\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"separator\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"?verify=\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"timestamp\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1484063787\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"mac\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IaLGSmELTvlhfd0ItdN6PhhHTFhzx73EX8uy%2FcSDiIU%3D\"))), mdx(\"p\", null, \"When the MessageMAC is contained entirely within a single field such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.request.uri\"), \", using the validation function is straightforward. Pass the name of the field to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"MessageMAC\"), \" argument:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"is_timed_hmac_valid_v0(\\n  \\\"mysecretkey\\\",\\n  http.request.uri,\\n  100000,\\n  http.request.timestamp.sec,\\n  8\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"concatenated-messagemac-argument\"\n  }, \"Concatenated MessageMAC argument\"), mdx(\"p\", null, \"To compose a MessageMAC from more than one field, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"concat()\"), \" function.\"), mdx(\"p\", null, \"This example constructs the MessageMAC by concatenating the request URI and two header fields:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"is_timed_hmac_valid_v0(\\n  \\\"mysecretkey\\\",\\n  concat(\\n    http.request.uri,\\n    http.request.headers[\\\"timestamp\\\"][0],\\n    \\\"-\\\",\\n    http.request.headers[\\\"mac\\\"][0]),\\n  100000,\\n  http.request.timestamp.sec,\\n  0\\n)\\n\")), mdx(\"p\", null, \"For more on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"concat()\"), \" usage, see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#transformation-functions\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Transformation functions\")), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"pcx-content-type\": \"reference\",\n  \"order\": 640\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Definitions = makeShortcode(\"Definitions\");\nconst Type = makeShortcode(\"Type\");\nconst ParamType = makeShortcode(\"ParamType\");\nconst Aside = makeShortcode(\"Aside\");\nconst PropMeta = makeShortcode(\"PropMeta\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h1>\n    <p>{`The Cloudflare Firewall Rules language provides functions for manipulating and validating values in an expression:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#transformation-functions\"\n        }}>{`Transformation functions`}</a>{` manipulate values extracted from an HTTP request.`}</li>\n      <li parentName=\"ul\">{`The `}<a parentName=\"li\" {...{\n          \"href\": \"#hmac-validation\"\n        }}>{`HMAC Validation function`}</a>{` tests the validity of an HMAC token. Use it to write expressions that target requests based on the presence of a valid HMAC token.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"transformation-functions\"\n    }}>{`Transformation functions`}</h2>\n    <p>{`The Cloudflare Firewall Rules language supports several functions that transform values extracted from HTTP requests. A common use case for transformation functions is the conversion of a string of characters to uppercase or lowercase, since by default, string evaluation is case sensitive.`}</p>\n    <p>{`For example, the `}<inlineCode parentName=\"p\">{`lower()`}</inlineCode>{` function converts all uppercase characters in a string to lowercase.`}</p>\n    <p>{`In the expression below, the`}<inlineCode parentName=\"p\">{`lower()`}</inlineCode>{` function transforms `}<inlineCode parentName=\"p\">{`http.host`}</inlineCode>{` values to lowercase so that they match the target value `}<inlineCode parentName=\"p\">{`\"www.cloudflare.com\"`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`lower(http.host) == \"www.cloudflare.com\"\n`}</code></pre>\n    <p>{`Transformation functions that do not take arrays as an argument type require the `}<inlineCode parentName=\"p\">{`[*]`}</inlineCode>{` special index notation. Refer to `}<a parentName=\"p\" {...{\n        \"href\": \"/cf-firewall-language/values#arrays\"\n      }}>{`Arrays`}</a>{` for more information.`}</p>\n    <p>{`The Cloudflare Firewall Rules language supports these transformation functions:`}</p>\n    <Definitions mdxType=\"Definitions\">\n      <ul>\n        <li parentName=\"ul\">\n          <code>any(<Type mdxType=\"Type\">Array</Type>{'<'}<ParamType mdxType=\"ParamType\">Boolean</ParamType>{'>'})</code> <Type mdxType=\"Type\">Boolean</Type>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`Returns `}<code class=\"InlineCode\">{`true`}</code>{` when the comparison operator in the argument returns `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` for `}<em>{`any`}</em>{` of the values in the argument array. Returns `}<code class=\"InlineCode\">{`false`}</code>{` otherwise.`}</p>\n            </li>\n            <li parentName=\"ul\">\n              <em>Example:</em><br />\n              <code class='InlineCode' style='width:100%'>\nany(url_decode(http.request.body.form.values[*])[*] contains \"an xss attack\")\n              </code>\n            </li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <code>all(<Type mdxType=\"Type\">Array</Type>{'<'}<ParamType mdxType=\"ParamType\">Boolean</ParamType>{'>'})</code> <Type mdxType=\"Type\">Boolean</Type>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`Returns `}<code class=\"InlineCode\">{`true`}</code>{` when the comparison operator in the argument returns `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` for `}<em>{`all`}</em>{` values in the argument array. Returns `}<code class=\"InlineCode\">{`false`}</code>{` otherwise.`}</p>\n            </li>\n            <li parentName=\"ul\">\n              <em>Example:</em><br />\n              <code class=\"InlineCode\">all(http.request.headers['content-type'][*] == \"application/json\")</code>\n            </li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <code>concat(<Type mdxType=\"Type\">String | Integer | bytes | Array elements</Type>)</code> <Type mdxType=\"Type\">String</Type>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`Takes a comma-separated list of values. Concatenates the argument values into a single String.`}</p>\n            </li>\n            <li parentName=\"ul\">\n              <em>Example:</em><br />\n              <code class=\"InlineCode\">concat(\"String1\",\" \",\"String\",2) == \"String1 String2\"</code>\n            </li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <code>ends_with(source<ParamType mdxType=\"ParamType\">String</ParamType>, substring<ParamType mdxType=\"ParamType\">String</ParamType>)</code> <Type mdxType=\"Type\">Boolean</Type>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`Returns `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` when the source ends with a given substring. Returns `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` otherwise. The source cannot be a literal value (for example, `}<inlineCode parentName=\"p\">{`\"foo\"`}</inlineCode>{`).`}</p>\n            </li>\n            <li parentName=\"ul\">\n              <p parentName=\"li\"><em parentName=\"p\">{`Example:`}</em><br />{`\nIf `}<inlineCode parentName=\"p\">{`http.request.uri.path`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`\"/welcome.html\"`}</inlineCode>{`, then `}<inlineCode parentName=\"p\">{`ends_with(http.request.uri.path, \".html\")`}</inlineCode>{` will return `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n              <Aside type='warning' mdxType=\"Aside\">\n                <p parentName=\"li\"><strong parentName=\"p\">{`Warning:`}</strong>{` You can only use the `}<inlineCode parentName=\"p\">{`ends_with()`}</inlineCode>{` function in `}<a parentName=\"p\" {...{\n                    \"href\": \"https://developers.cloudflare.com/ruleset-engine/\"\n                  }}>{`rulesets`}</a>{` and `}<a parentName=\"p\" {...{\n                    \"href\": \"https://developers.cloudflare.com/rules/transform\"\n                  }}>{`Transform Rules`}</a>{`.`}</p>\n              </Aside>\n            </li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <code>len(<Type mdxType=\"Type\">String | bytes</Type>)</code> <Type mdxType=\"Type\">Integer</Type>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`Returns the byte length of a String or Bytes field.`}</p>\n            </li>\n            <li parentName=\"ul\">\n              <em>Example:</em><br />\n              <code class=\"InlineCode\">len(http.host)</code>\n            </li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <code>lower(<Type mdxType=\"Type\">String</Type>)</code> <Type mdxType=\"Type\">String</Type>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`Converts a string field to lowercase. Only uppercase ASCII bytes are converted. All other bytes are unaffected.`}</p>\n            </li>\n            <li parentName=\"ul\">\n              <em>Example:</em><br />\n              <code class=\"InlineCode\">lower(http.host) == \"www.cloudflare.com\"</code>\n            </li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <code>regex_replace(source<ParamType mdxType=\"ParamType\">String</ParamType>, regular_expression<ParamType mdxType=\"ParamType\">String</ParamType>, replacement<ParamType mdxType=\"ParamType\">String</ParamType>)</code> <Type mdxType=\"Type\">String</Type>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`Replaces a part of a source string matched by a regular expression with a replacement string, returning the result. The replacement string can contain references to regular expression capture groups.`}</p>\n            </li>\n            <li parentName=\"ul\">\n              <p parentName=\"li\"><em parentName=\"p\">{`Examples:`}</em></p>\n              <p parentName=\"li\">{`Literal match replace:`}<br />{`\n`}<inlineCode parentName=\"p\">{`regex_replace(\"/foo/bar\", \"/bar$\", \"/baz\") == \"/foo/baz\"`}</inlineCode></p>\n              <p parentName=\"li\">{`If there is no match, the input string does not change:`}<br />{`\n`}<inlineCode parentName=\"p\">{`regex_replace(\"/x\", \"^/y$\", \"/mumble\") == \"/x\"`}</inlineCode></p>\n              <p parentName=\"li\">{`Match is case sensitive by default:`}<br />{`\n`}<inlineCode parentName=\"p\">{`regex_replace(\"/foo\", \"^/FOO$\", \"/x\") == \"/foo\"`}</inlineCode></p>\n              <p parentName=\"li\">{`When there are multiple matches, only one replacement occurs (the first one):`}<br />{`\n`}<inlineCode parentName=\"p\">{`regex_replace(\"/a/a\", \"/a\", \"/b\") == \"/b/a\"`}</inlineCode></p>\n              <p parentName=\"li\">{`Escape a `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{` in the replacement string by prefixing it with another `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{`:`}<br />{`\n`}<inlineCode parentName=\"p\">{`regex_replace(\"/b\", \"^/b$\", \"/b$$\") == \"/b$\"`}</inlineCode></p>\n              <p parentName=\"li\">{`Replace with capture groups:`}<br />{`\n`}<inlineCode parentName=\"p\">{`regex_replace(\"/foo/a/path\", \"^/foo/([^/]*)/(.*)$\", \"/bar/\\${2}/\\${1}\") == \"/bar/path/a/\"`}</inlineCode></p>\n              <Aside type='warning' mdxType=\"Aside\">\n                <p parentName=\"li\"><strong parentName=\"p\">{`Warning:`}</strong>{` You can only use the `}<inlineCode parentName=\"p\">{`regex_replace()`}</inlineCode>{` function in `}<a parentName=\"p\" {...{\n                    \"href\": \"https://developers.cloudflare.com/rules/transform\"\n                  }}>{`rewrite expressions of Transform Rules`}</a>{`. Additionally, the first argument must be a field under `}<inlineCode parentName=\"p\">{`http.request.headers`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`http.request.uri`}</inlineCode>{`.`}</p>\n              </Aside>\n            </li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <code>remove_bytes(<Type mdxType=\"Type\">bytes</Type>)</code> <Type mdxType=\"Type\">bytes</Type>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`Returns a new byte array with all the occurrences of the given bytes removed.`}</p>\n            </li>\n            <li parentName=\"ul\">\n              <em>Example:</em><br />\n              <code class=\"InlineCode\">remove_bytes(http.host, \"\\x2e\\x77\") == \"cloudflarecom\"</code>\n            </li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <code>starts_with(source<ParamType mdxType=\"ParamType\">String</ParamType>, substring<ParamType mdxType=\"ParamType\">String</ParamType>)</code> <Type mdxType=\"Type\">Boolean</Type>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`Returns `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` when the source starts with a given substring. Returns `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` otherwise. The source cannot be a literal value (for example, `}<inlineCode parentName=\"p\">{`\"foo\"`}</inlineCode>{`).`}</p>\n            </li>\n            <li parentName=\"ul\">\n              <p parentName=\"li\"><em parentName=\"p\">{`Example:`}</em><br />{`\nIf `}<inlineCode parentName=\"p\">{`http.request.uri.path`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`\"/blog/first-post\"`}</inlineCode>{`, then `}<inlineCode parentName=\"p\">{`starts_with(http.request.uri.path, \"/blog\")`}</inlineCode>{` will return `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n              <Aside type='warning' mdxType=\"Aside\">\n                <p parentName=\"li\"><strong parentName=\"p\">{`Warning:`}</strong>{` You can only use the `}<inlineCode parentName=\"p\">{`starts_with()`}</inlineCode>{` function in `}<a parentName=\"p\" {...{\n                    \"href\": \"https://developers.cloudflare.com/ruleset-engine/\"\n                  }}>{`rulesets`}</a>{` and `}<a parentName=\"p\" {...{\n                    \"href\": \"https://developers.cloudflare.com/rules/transform\"\n                  }}>{`Transform Rules`}</a>{`.`}</p>\n              </Aside>\n            </li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <code>to_string(<Type mdxType=\"Type\">Integer | Boolean | IP address</Type>)</code> <Type mdxType=\"Type\">String</Type>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`Returns the string representation of an Integer, Boolean, or IP address value.`}</p>\n            </li>\n            <li parentName=\"ul\">\n              <p parentName=\"li\"><em parentName=\"p\">{`Examples:`}</em></p>\n              <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                  \"className\": \"language-txt\"\n                }}>{`to_string(cf.bot_management.score) == '5'\nto_string(ssl) == 'true'\n`}</code></pre>\n              <Aside type='warning' mdxType=\"Aside\">\n                <p parentName=\"li\"><strong parentName=\"p\">{`Warning:`}</strong>{` You can only use the `}<inlineCode parentName=\"p\">{`to_string()`}</inlineCode>{` function in `}<a parentName=\"p\" {...{\n                    \"href\": \"https://developers.cloudflare.com/rules/transform\"\n                  }}>{`rewrite expressions of Transform Rules`}</a>{`.`}</p>\n              </Aside>\n            </li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <code>upper(<Type mdxType=\"Type\">String</Type>)</code> <Type mdxType=\"Type\">String</Type>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`Converts a string field to uppercase. Only lowercase ASCII bytes are converted. All other bytes are unaffected.`}</p>\n            </li>\n            <li parentName=\"ul\">\n              <em>Example:</em><br />\n              <code class=\"InlineCode\">upper(http.host) == \"WWW.CLOUDFLARE.COM\"</code>\n            </li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <code>url_decode(<Type mdxType=\"Type\">String</Type>)</code> <Type mdxType=\"Type\">String</Type>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`Decodes a URL formatted string, as in the following:`}</p>\n              <ul parentName=\"li\">\n                <li parentName=\"ul\">\n                  <code class=\"InlineCode\">%20</code> and <code class=\"InlineCode\">+</code> decode to space characters <code class=\"InlineCode\"> </code>\n                </li>\n                <li parentName=\"ul\">\n                  <code class=\"InlineCode\">%E4%BD</code> decodes to <code class=\"InlineCode\">ä½ </code>\n                </li>\n              </ul>\n            </li>\n            <li parentName=\"ul\">\n              <em>Example:</em><br />\n              <code class=\"InlineCode\">any(url_decode(http.request.body.form.values[*])[*] contains \"an xss attack\")</code>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </Definitions>\n    <h2 {...{\n      \"id\": \"magic-firewall-functions\"\n    }}>{`Magic Firewall Functions`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <code>bit_slice(<Type mdxType=\"Type\">String</Type>, <Type mdxType=\"Type\">Number</Type>, <Type mdxType=\"Type\">Number</Type>)</code> <Type mdxType=\"Type\">Number</Type>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Select a slice of contiguous bits from a string field. This is primarily intended for use with `}<code class=\"InlineCode\">{`ip`}</code>{` and `}<code class=\"InlineCode\">{`tcp`}</code>{`.`}</li>\n          <li parentName=\"ul\">{`The slice can be no longer than 31 bits, but multiple calls can be joined together via a logical expression.`}</li>\n          <li parentName=\"ul\">{`Use of structure fields is preferred over this mechanism.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"hmac-validation\"\n    }}>{`HMAC validation`}</h2>\n    <Aside type='warning' header='Important' mdxType=\"Aside\">\n      <p>{`Access to the HMAC validation function requires a Cloudflare Pro, Business, or Enterprise plan.`}</p>\n    </Aside>\n    <h3 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h3>\n    <p>{`You can validate hash-based message authentication code (HMAC) tokens in a Firewall Rules expression by using the `}<inlineCode parentName=\"p\">{`is_timed_hmac_valid_v0()`}</inlineCode>{` function, which has this signature:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`is_timed_hmac_valid_v0(\n  <String literal as Key>,\n  <String field as MessageMAC>,\n  <Integer literal as ttl>,\n  <Integer as currentTimeStamp>,\n  <Optional Integer literal as lengthOfSeparator, default: 0>,\n  <Optional String literal as flags>\n) -> <Bool as result>\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`is_timed_hmac_valid_v0()`}</inlineCode>{` function has these parameter definitions:`}</p>\n    <Definitions mdxType=\"Definitions\">\n      <ul>\n        <li parentName=\"ul\">\n          <p parentName=\"li\"><em parentName=\"p\">{`Key`}</em>{` `}<Type mdxType=\"Type\">{`String literal`}</Type></p>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">{`Specifies the secret cryptographic key for validating the HMAC.`}</li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <p parentName=\"li\"><em parentName=\"p\">{`MessageMAC`}</em>{` `}<Type mdxType=\"Type\">{`String`}</Type></p>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">{`Contains a concatenation of these HMAC elements: `}<em parentName=\"li\">{`message`}</em>{`, `}<em parentName=\"li\">{`separator`}</em>{`, `}<em parentName=\"li\">{`timestamp`}</em>{`, `}<em parentName=\"li\">{`mac`}</em>{`. For a definition and an example, see `}<a parentName=\"li\" {...{\n                \"href\": \"#messagemac\"\n              }}><em parentName=\"a\">{`MessageMAC`}</em></a>{`.`}</li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <p parentName=\"li\"><em parentName=\"p\">{`ttl`}</em>{` `}<Type mdxType=\"Type\">{`Integer literal`}</Type></p>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">{`Defines the time-to-live for the HMAC token, expressed in seconds. Determines how long the token is valid, relative to the time it was issued.`}</li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <p parentName=\"li\"><em parentName=\"p\">{`currentTimeStamp`}</em>{` `}<Type mdxType=\"Type\">{`Integer`}</Type></p>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">{`Represents the Unix timestamp when Cloudflare received the request, expressed in seconds. Pass the `}<inlineCode parentName=\"li\">{`http.request.timestamp.sec`}</inlineCode>{` field as an approximate value to this argument.`}</li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <p parentName=\"li\"><em parentName=\"p\">{`lengthOfSeparator`}</em>{` `}<Type mdxType=\"Type\">{`Integer literal`}</Type>{` `}<PropMeta mdxType=\"PropMeta\">{`optional`}</PropMeta></p>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">{`Specifies the length of the `}<em parentName=\"li\">{`separator`}</em>{` between the `}<em parentName=\"li\">{`timestamp`}</em>{` and the `}<em parentName=\"li\">{`message`}</em>{` in the `}<em parentName=\"li\">{`MessageMAC`}</em>{`. Expressed in bytes, with a default value of 0.`}</li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">\n          <p parentName=\"li\"><em parentName=\"p\">{`flags`}</em>{` `}<Type mdxType=\"Type\">{`String literal`}</Type>{` `}<PropMeta mdxType=\"PropMeta\">{`optional`}</PropMeta></p>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`When you set this optional argument to `}<inlineCode parentName=\"p\">{`'s'`}</inlineCode>{`, the function expects the value of the base64-encoded `}<em parentName=\"p\">{`mac`}</em>{` in the `}<em parentName=\"p\">{`MessageMAC`}</em>{` argument to use the URL-safe character set with no padding.`}</p>\n            </li>\n            <li parentName=\"ul\">\n              <p parentName=\"li\">{`When you do `}<strong parentName=\"p\">{`not`}</strong>{` set the value of `}<em parentName=\"p\">{`flags`}</em>{` to `}<inlineCode parentName=\"p\">{`'s'`}</inlineCode>{`, you must URL encode the base64 value for `}<em parentName=\"p\">{`mac`}</em>{` in the `}<em parentName=\"p\">{`MessageMAC`}</em>{` argument.`}</p>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </Definitions>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`is_timed_hmac_valid_v0()`}</inlineCode>{` function uses the supplied `}<em parentName=\"p\">{`Key`}</em>{` to generate a message authentication code (MAC) from the `}<em parentName=\"p\">{`message`}</em>{` and the `}<em parentName=\"p\">{`timestamp`}</em>{` regions of the MessageMAC. When the generated MAC matches the `}<em parentName=\"p\">{`mac`}</em>{` region of the MessageMAC and the token has not expired, the HMAC is valid and the function returns `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <p>{`For example, the following expression matches requests to `}<inlineCode parentName=\"p\">{`download.example.com`}</inlineCode>{` that do not include valid HMAC tokens:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`http.host == \"download.example.com\"\nand not is_timed_hmac_valid_v0(\"mysecretkey\", http.request.uri, 100000, http.request.timestamp.sec, 8)\n`}</code></pre>\n    <p>{`To review examples of firewall rules that use HMAC validation, see `}<a parentName=\"p\" {...{\n        \"href\": \"/recipes/\"\n      }}><em parentName=\"a\">{`Common use cases`}</em></a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"messagemac\"\n    }}>{`MessageMAC`}</h3>\n    <p>{`A valid MessageMAC satisfies the regular expression`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`(.+)(.*)(\\\\d{10})-(.{43,})\n`}</code></pre>\n    <p>{`and is composed of these parentheses-delimited expressions:`}</p>\n    <table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th style=\"width:50%\">Description</th>\n      <th>Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td valign=\"top\"><code>(.+)</code></td>\n      <td>The <em>message</em> to validate</td>\n      <td valign=\"top\"><code class=\"InlineCode\">/download/cat.jpg</code></td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><code>(.*)</code></td>\n      <td>The <em>separator</em> between message and timestamp, commonly a parameter name</td>\n      <td valign=\"top\"><code class=\"InlineCode\">&verify=</code></td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><code>(\\d{'{10}'})</code></td>\n      <td>The 10-digit Unix <em>timestamp</em> when the MAC was issued, expressed in seconds</td>\n      <td valign=\"top\"><code class=\"InlineCode\">1484063137</code></td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><code>(.{'{43,}'})</code></td>\n      <td><p>A base64-encoded version of the <em>MAC</em>. When you do not set the value of the <em>urlSafe</em> argument in the HMAC validation function to <code class=\"InlineCode\">'s'</code>, you must URL encode the base64 value for <em>mac</em>.</p>\n      <p>When the base64 MAC encoding is URL-safe, the value for <em>mac</em> contains 43 bytes. Otherwise, the value will be 44 bytes or more, because of URL encoding.</p></td>\n      <td valign=\"top\"><code class=\"InlineCode\">IaLGSmELTvlhfd0ItdN6PhhHTFhzx<br />73EX8uy%2FcSDiIU%3D</code></td>\n    </tr>\n  </tbody>\n    </table>\n    <p>{`For details on generating a MessageMAC, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://support.cloudflare.com/hc/articles/115001376488#6P9Gz7kmyxQrpL6r6iPKQR\"\n      }}><em parentName=\"a\">{`Implement token creation`}</em></a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"hmac-validation-examples\"\n    }}>{`HMAC validation examples`}</h2>\n    <Aside type='warning' header='Important' mdxType=\"Aside\">\n      <p>{`When you do not use the optional `}<em parentName=\"p\">{`flags`}</em>{` argument for `}<inlineCode parentName=\"p\">{`is_timed_hmac_valid_v0()`}</inlineCode>{`, you must URL encode the base64 value for `}<em parentName=\"p\">{`mac`}</em>{` in the `}<em parentName=\"p\">{`MessageMAC`}</em>{` argument.`}</p>\n      <p>{`For more information, see `}<a parentName=\"p\" {...{\n          \"href\": \"#overview\"\n        }}>{`HMAC Validation: Overview`}</a>{`.`}</p>\n    </Aside>\n    <h3 {...{\n      \"id\": \"simple-case\"\n    }}>{`Simple case`}</h3>\n    <p>{`Consider the case where the MessageMAC is contained entirely within a single field, as in this example URI path:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-http\"\n      }}>{`/download/cat.jpg?verify=1484063787-IaLGSmELTvlhfd0ItdN6PhhHTFhzx73EX8uy%2FcSDiIU%3D\n`}</code></pre>\n    <p>{`Note how the URI maps to the elements of the MessageMAC:`}</p>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`message`}</em>{`: `}<inlineCode parentName=\"li\">{`/download/cat.jpg`}</inlineCode></li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`separator`}</em>{`: `}<inlineCode parentName=\"li\">{`?verify=`}</inlineCode></li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`timestamp`}</em>{`: `}<inlineCode parentName=\"li\">{`1484063787`}</inlineCode></li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`mac`}</em>{`: `}<inlineCode parentName=\"li\">{`IaLGSmELTvlhfd0ItdN6PhhHTFhzx73EX8uy%2FcSDiIU%3D`}</inlineCode></li>\n    </ul>\n    <p>{`When the MessageMAC is contained entirely within a single field such as `}<inlineCode parentName=\"p\">{`http.request.uri`}</inlineCode>{`, using the validation function is straightforward. Pass the name of the field to the `}<em parentName=\"p\">{`MessageMAC`}</em>{` argument:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`is_timed_hmac_valid_v0(\n  \"mysecretkey\",\n  http.request.uri,\n  100000,\n  http.request.timestamp.sec,\n  8\n)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"concatenated-messagemac-argument\"\n    }}>{`Concatenated MessageMAC argument`}</h3>\n    <p>{`To compose a MessageMAC from more than one field, use the `}<inlineCode parentName=\"p\">{`concat()`}</inlineCode>{` function.`}</p>\n    <p>{`This example constructs the MessageMAC by concatenating the request URI and two header fields:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`is_timed_hmac_valid_v0(\n  \"mysecretkey\",\n  concat(\n    http.request.uri,\n    http.request.headers[\"timestamp\"][0],\n    \"-\",\n    http.request.headers[\"mac\"][0]),\n  100000,\n  http.request.timestamp.sec,\n  0\n)\n`}</code></pre>\n    <p>{`For more on `}<inlineCode parentName=\"p\">{`concat()`}</inlineCode>{` usage, see `}<a parentName=\"p\" {...{\n        \"href\": \"#transformation-functions\"\n      }}><em parentName=\"a\">{`Transformation functions`}</em></a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}