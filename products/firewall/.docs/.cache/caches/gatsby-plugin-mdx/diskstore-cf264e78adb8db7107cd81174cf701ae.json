{"expireTime":9007200899183226000,"key":"gatsby-plugin-mdx-entire-payload-d9b163fe4c8d435b7e7bfddda78d60e3-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Require specific HTTP ports","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":30,"offset":30},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":30,"offset":30},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By default, Cloudflare allows requests on a number of different HTTP ports (refer to ","position":{"start":{"line":4,"column":1,"offset":32},"end":{"line":4,"column":86,"offset":117},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/fundamentals/get-started/network-ports","children":[{"type":"text","value":"Network ports","position":{"start":{"line":4,"column":87,"offset":118},"end":{"line":4,"column":100,"offset":131},"indent":[]}}],"position":{"start":{"line":4,"column":86,"offset":117},"end":{"line":4,"column":175,"offset":206},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":4,"column":175,"offset":206},"end":{"line":4,"column":176,"offset":207},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":32},"end":{"line":4,"column":176,"offset":207},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can target requests based on their HTTP port with the ","position":{"start":{"line":6,"column":1,"offset":209},"end":{"line":6,"column":59,"offset":267},"indent":[]}},{"type":"inlineCode","value":"cf.edge.server_port","position":{"start":{"line":6,"column":59,"offset":267},"end":{"line":6,"column":80,"offset":288},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":6,"column":80,"offset":288},"end":{"line":6,"column":81,"offset":289},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/ruleset-engine/rules-language/fields/#dynamic-fields","children":[{"type":"text","value":"dynamic field","position":{"start":{"line":6,"column":82,"offset":290},"end":{"line":6,"column":95,"offset":303},"indent":[]}}],"position":{"start":{"line":6,"column":81,"offset":289},"end":{"line":6,"column":184,"offset":392},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":6,"column":184,"offset":392},"end":{"line":6,"column":185,"offset":393},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":209},"end":{"line":6,"column":185,"offset":393},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use the ","position":{"start":{"line":8,"column":1,"offset":395},"end":{"line":8,"column":9,"offset":403},"indent":[]}},{"type":"inlineCode","value":"in","position":{"start":{"line":8,"column":9,"offset":403},"end":{"line":8,"column":13,"offset":407},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":8,"column":13,"offset":407},"end":{"line":8,"column":14,"offset":408},"indent":[]}},{"type":"link","title":null,"url":"https://developers.cloudflare.com/ruleset-engine/rules-language/operators/#comparison-operators","children":[{"type":"text","value":"comparison operator","position":{"start":{"line":8,"column":15,"offset":409},"end":{"line":8,"column":34,"offset":428},"indent":[]}}],"position":{"start":{"line":8,"column":14,"offset":408},"end":{"line":8,"column":132,"offset":526},"indent":[]}},{"type":"text","value":" to target a set of ports.","position":{"start":{"line":8,"column":132,"offset":526},"end":{"line":8,"column":158,"offset":552},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":395},"end":{"line":8,"column":158,"offset":552},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This example blocks requests to ","position":{"start":{"line":10,"column":1,"offset":554},"end":{"line":10,"column":33,"offset":586},"indent":[]}},{"type":"inlineCode","value":"www.example.com","position":{"start":{"line":10,"column":33,"offset":586},"end":{"line":10,"column":50,"offset":603},"indent":[]}},{"type":"text","value":" that are not on ports 80 or 443:","position":{"start":{"line":10,"column":50,"offset":603},"end":{"line":10,"column":83,"offset":636},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":554},"end":{"line":10,"column":83,"offset":636},"indent":[]}},{"type":"jsx","value":"<table>\n  <thead>\n  <tr>\n    <th>Expression</th>\n    <th>Action</th>\n  </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>http.host eq \"www.example.com\" and not cf.edge.server_port in {'{80 443}'}</code></td>\n      <td><em>Block</em></td>\n    </tr>\n  </tbody>\n</table>","position":{"start":{"line":12,"column":1,"offset":638},"end":{"line":25,"column":9,"offset":907},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"pcx-content-type\":\"configuration\"}","position":{"start":{"line":28,"column":1,"offset":910},"end":{"line":28,"column":65,"offset":974},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":28,"column":65,"offset":974}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"pcx-content-type\": \"configuration\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"require-specific-http-ports\"\n  }, \"Require specific HTTP ports\"), mdx(\"p\", null, \"By default, Cloudflare allows requests on a number of different HTTP ports (refer to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/fundamentals/get-started/network-ports\"\n  }, \"Network ports\"), \".\"), mdx(\"p\", null, \"You can target requests based on their HTTP port with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cf.edge.server_port\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/ruleset-engine/rules-language/fields/#dynamic-fields\"\n  }, \"dynamic field\"), \".\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"in\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/ruleset-engine/rules-language/operators/#comparison-operators\"\n  }, \"comparison operator\"), \" to target a set of ports.\"), mdx(\"p\", null, \"This example blocks requests to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"www.example.com\"), \" that are not on ports 80 or 443:\"), mdx(\"table\", null, mdx(\"thead\", null, mdx(\"tr\", null, mdx(\"th\", null, \"Expression\"), mdx(\"th\", null, \"Action\"))), mdx(\"tbody\", null, mdx(\"tr\", null, mdx(\"td\", null, mdx(\"code\", null, \"http.host eq \\\"www.example.com\\\" and not cf.edge.server_port in \", '{80 443}')), mdx(\"td\", null, mdx(\"em\", null, \"Block\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"pcx-content-type\": \"configuration\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"require-specific-http-ports\"\n    }}>{`Require specific HTTP ports`}</h1>\n    <p>{`By default, Cloudflare allows requests on a number of different HTTP ports (refer to `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.cloudflare.com/fundamentals/get-started/network-ports\"\n      }}>{`Network ports`}</a>{`.`}</p>\n    <p>{`You can target requests based on their HTTP port with the `}<inlineCode parentName=\"p\">{`cf.edge.server_port`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.cloudflare.com/ruleset-engine/rules-language/fields/#dynamic-fields\"\n      }}>{`dynamic field`}</a>{`.`}</p>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`in`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.cloudflare.com/ruleset-engine/rules-language/operators/#comparison-operators\"\n      }}>{`comparison operator`}</a>{` to target a set of ports.`}</p>\n    <p>{`This example blocks requests to `}<inlineCode parentName=\"p\">{`www.example.com`}</inlineCode>{` that are not on ports 80 or 443:`}</p>\n    <table>\n  <thead>\n  <tr>\n    <th>Expression</th>\n    <th>Action</th>\n  </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>http.host eq \"www.example.com\" and not cf.edge.server_port in {'{80 443}'}</code></td>\n      <td><em>Block</em></td>\n    </tr>\n  </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}