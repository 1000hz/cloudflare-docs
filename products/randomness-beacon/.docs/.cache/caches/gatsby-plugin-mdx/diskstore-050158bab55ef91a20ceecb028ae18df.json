{"expireTime":9007200890025497000,"key":"gatsby-plugin-mdx-entire-payload-40d56619b26f3d2baca436cc83845293-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Randomness Generation","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":24,"offset":24},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":24,"offset":24},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this section, we describe how to use this collective key pair to generate publicly-verifiable, unbiasable, and unpredictable randomness in a distributed manner.","position":{"start":{"line":4,"column":1,"offset":26},"end":{"line":4,"column":164,"offset":189},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":26},"end":{"line":4,"column":164,"offset":189},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First, we explain pairing-based cryptography (PBC), which has become quite popular, and is used in many modern consensus protocols or zero-knowledge proofs, such as zk-SNARKs. We'll then show how drand uses PBC for the randomness beacon generation phase for threshold Boneh-Lynn-Shacham (BLS) signatures. Finally, we'll discuss how drand links the generated threshold BLS signatures into a randomness chain.","position":{"start":{"line":6,"column":1,"offset":191},"end":{"line":6,"column":408,"offset":598},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":191},"end":{"line":6,"column":408,"offset":598},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pairing-based Cryptography","position":{"start":{"line":8,"column":4,"offset":603},"end":{"line":8,"column":30,"offset":629},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":600},"end":{"line":8,"column":30,"offset":629},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Pairing-based cryptography is based on bilinear groups ","position":{"start":{"line":10,"column":1,"offset":631},"end":{"line":10,"column":56,"offset":686},"indent":[]}},{"type":"inlineCode","value":"(𝔾1,𝔾2,𝔾𝑡)","position":{"start":{"line":10,"column":56,"offset":686},"end":{"line":10,"column":72,"offset":702},"indent":[]}},{"type":"text","value":", where ","position":{"start":{"line":10,"column":72,"offset":702},"end":{"line":10,"column":80,"offset":710},"indent":[]}},{"type":"inlineCode","value":"𝔾1","position":{"start":{"line":10,"column":80,"offset":710},"end":{"line":10,"column":85,"offset":715},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":10,"column":85,"offset":715},"end":{"line":10,"column":87,"offset":717},"indent":[]}},{"type":"inlineCode","value":"𝔾2","position":{"start":{"line":10,"column":87,"offset":717},"end":{"line":10,"column":92,"offset":722},"indent":[]}},{"type":"text","value":", and ","position":{"start":{"line":10,"column":92,"offset":722},"end":{"line":10,"column":98,"offset":728},"indent":[]}},{"type":"inlineCode","value":"𝔾𝑡","position":{"start":{"line":10,"column":98,"offset":728},"end":{"line":10,"column":104,"offset":734},"indent":[]}},{"type":"text","value":" are cyclic groups of prime order ","position":{"start":{"line":10,"column":104,"offset":734},"end":{"line":10,"column":138,"offset":768},"indent":[]}},{"type":"inlineCode","value":"𝑝","position":{"start":{"line":10,"column":138,"offset":768},"end":{"line":10,"column":142,"offset":772},"indent":[]}},{"type":"text","value":" with generators ","position":{"start":{"line":10,"column":142,"offset":772},"end":{"line":10,"column":159,"offset":789},"indent":[]}},{"type":"inlineCode","value":"𝑔1","position":{"start":{"line":10,"column":159,"offset":789},"end":{"line":10,"column":164,"offset":794},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":10,"column":164,"offset":794},"end":{"line":10,"column":166,"offset":796},"indent":[]}},{"type":"inlineCode","value":"𝑔2","position":{"start":{"line":10,"column":166,"offset":796},"end":{"line":10,"column":171,"offset":801},"indent":[]}},{"type":"text","value":", and ","position":{"start":{"line":10,"column":171,"offset":801},"end":{"line":10,"column":177,"offset":807},"indent":[]}},{"type":"inlineCode","value":"𝑔𝑡","position":{"start":{"line":10,"column":177,"offset":807},"end":{"line":10,"column":183,"offset":813},"indent":[]}},{"type":"text","value":", respectively, and a pairing operation ","position":{"start":{"line":10,"column":183,"offset":813},"end":{"line":10,"column":223,"offset":853},"indent":[]}},{"type":"inlineCode","value":"𝑒:𝔾1×𝔾2→𝔾𝑡","position":{"start":{"line":10,"column":223,"offset":853},"end":{"line":10,"column":240,"offset":870},"indent":[]}},{"type":"text","value":" with these properties:","position":{"start":{"line":10,"column":240,"offset":870},"end":{"line":10,"column":263,"offset":893},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":631},"end":{"line":10,"column":263,"offset":893},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Bilinearity:","position":{"start":{"line":12,"column":5,"offset":899},"end":{"line":12,"column":17,"offset":911},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":897},"end":{"line":12,"column":19,"offset":913},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":12,"column":19,"offset":913},"end":{"line":12,"column":20,"offset":914},"indent":[]}},{"type":"inlineCode","value":"∀𝑎,𝑏∈ℤ∗𝑝,∀𝑃∈𝔾1,∀𝑄∈𝔾2,","position":{"start":{"line":12,"column":20,"offset":914},"end":{"line":12,"column":50,"offset":944},"indent":[]}},{"type":"text","value":" we have ","position":{"start":{"line":12,"column":50,"offset":944},"end":{"line":12,"column":59,"offset":953},"indent":[]}},{"type":"inlineCode","value":"𝑒(𝑎𝑃,𝑏𝑄)=𝑒(𝑃,𝑄)𝑎𝑏","position":{"start":{"line":12,"column":59,"offset":953},"end":{"line":12,"column":88,"offset":982},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":897},"end":{"line":12,"column":88,"offset":982},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":895},"end":{"line":13,"column":1,"offset":983},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Non-degeneracy:","position":{"start":{"line":14,"column":5,"offset":988},"end":{"line":14,"column":20,"offset":1003},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":986},"end":{"line":14,"column":22,"offset":1005},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":14,"column":22,"offset":1005},"end":{"line":14,"column":23,"offset":1006},"indent":[]}},{"type":"inlineCode","value":"𝑒≠1","position":{"start":{"line":14,"column":23,"offset":1006},"end":{"line":14,"column":29,"offset":1012},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":986},"end":{"line":14,"column":29,"offset":1012},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":984},"end":{"line":14,"column":29,"offset":1012},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Computability:","position":{"start":{"line":15,"column":5,"offset":1017},"end":{"line":15,"column":19,"offset":1031},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":1015},"end":{"line":15,"column":21,"offset":1033},"indent":[]}},{"type":"text","value":" There exists an efficient algorithm to compute ","position":{"start":{"line":15,"column":21,"offset":1033},"end":{"line":15,"column":69,"offset":1081},"indent":[]}},{"type":"inlineCode","value":"𝑒","position":{"start":{"line":15,"column":69,"offset":1081},"end":{"line":15,"column":73,"offset":1085},"indent":[]}},{"type":"text","value":".\ndrand currently uses the Barreto-Naehrig curve BN256.","position":{"start":{"line":15,"column":73,"offset":1085},"end":{"line":16,"column":55,"offset":1141},"indent":[2]}}],"position":{"start":{"line":15,"column":3,"offset":1015},"end":{"line":16,"column":55,"offset":1141},"indent":[2]}}],"position":{"start":{"line":15,"column":1,"offset":1013},"end":{"line":16,"column":55,"offset":1141},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":895},"end":{"line":16,"column":55,"offset":1141},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"BLS Signatures","position":{"start":{"line":18,"column":4,"offset":1146},"end":{"line":18,"column":18,"offset":1160},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1143},"end":{"line":18,"column":18,"offset":1160},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To generate publicly-verifiable, unbiasable, distributed randomness, drand utilizes threshold Boneh-Lynn-Shacham (BLS) signatures. First we'll describe regular BLS signatures and then the threshold variant.","position":{"start":{"line":20,"column":1,"offset":1162},"end":{"line":20,"column":207,"offset":1368},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1162},"end":{"line":20,"column":207,"offset":1368},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BLS signatures are short signatures that rely on bilinear pairings and consist only of a single element in ","position":{"start":{"line":22,"column":1,"offset":1370},"end":{"line":22,"column":108,"offset":1477},"indent":[]}},{"type":"inlineCode","value":"𝔾1","position":{"start":{"line":22,"column":108,"offset":1477},"end":{"line":22,"column":113,"offset":1482},"indent":[]}},{"type":"text","value":". They are deterministic in the sense they depend only on the message and the signer’s key, unlike other signature schemes, such as ECDSA, that require a fresh random value for each signed message to be secure. Put differently, any two BLS signatures on a given message produced with the same key are identical. In drand, we utilize this property to achieve unbiasability for randomness generation.","position":{"start":{"line":22,"column":113,"offset":1482},"end":{"line":22,"column":511,"offset":1880},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1370},"end":{"line":22,"column":511,"offset":1880},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The BLS signature scheme consists of the these sub-procedures.","position":{"start":{"line":24,"column":1,"offset":1882},"end":{"line":24,"column":63,"offset":1944},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1882},"end":{"line":24,"column":63,"offset":1944},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Key Generation","position":{"start":{"line":26,"column":5,"offset":1950},"end":{"line":26,"column":19,"offset":1964},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1946},"end":{"line":26,"column":19,"offset":1964},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To generate a key pair, a signer first chooses a private key, ","position":{"start":{"line":28,"column":1,"offset":1966},"end":{"line":28,"column":63,"offset":2028},"indent":[]}},{"type":"inlineCode","value":"𝑥∈ℤ∗𝑝","position":{"start":{"line":28,"column":63,"offset":2028},"end":{"line":28,"column":72,"offset":2037},"indent":[]}},{"type":"text","value":", at random, and then computes the corresponding public key as ","position":{"start":{"line":28,"column":72,"offset":2037},"end":{"line":28,"column":135,"offset":2100},"indent":[]}},{"type":"inlineCode","value":"𝑋=𝑔𝑥2∈𝔾2","position":{"start":{"line":28,"column":135,"offset":2100},"end":{"line":28,"column":149,"offset":2114},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":28,"column":149,"offset":2114},"end":{"line":28,"column":150,"offset":2115},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1966},"end":{"line":28,"column":150,"offset":2115},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Signature Generation","position":{"start":{"line":30,"column":5,"offset":2121},"end":{"line":30,"column":25,"offset":2141},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":2117},"end":{"line":30,"column":25,"offset":2141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let ","position":{"start":{"line":32,"column":1,"offset":2143},"end":{"line":32,"column":5,"offset":2147},"indent":[]}},{"type":"inlineCode","value":"𝐻:{0,1}∗→𝔾1","position":{"start":{"line":32,"column":5,"offset":2147},"end":{"line":32,"column":20,"offset":2162},"indent":[]}},{"type":"text","value":" denote a cryptographic hash function that maps arbitrary bit strings to elements of ","position":{"start":{"line":32,"column":20,"offset":2162},"end":{"line":32,"column":105,"offset":2247},"indent":[]}},{"type":"inlineCode","value":"𝔾1","position":{"start":{"line":32,"column":105,"offset":2247},"end":{"line":32,"column":110,"offset":2252},"indent":[]}},{"type":"text","value":". To compute a BLS signature ","position":{"start":{"line":32,"column":110,"offset":2252},"end":{"line":32,"column":139,"offset":2281},"indent":[]}},{"type":"inlineCode","value":"𝜎","position":{"start":{"line":32,"column":139,"offset":2281},"end":{"line":32,"column":143,"offset":2285},"indent":[]}},{"type":"text","value":" on a message ","position":{"start":{"line":32,"column":143,"offset":2285},"end":{"line":32,"column":157,"offset":2299},"indent":[]}},{"type":"inlineCode","value":"𝑚","position":{"start":{"line":32,"column":157,"offset":2299},"end":{"line":32,"column":161,"offset":2303},"indent":[]}},{"type":"text","value":", the signer simply computes ","position":{"start":{"line":32,"column":161,"offset":2303},"end":{"line":32,"column":190,"offset":2332},"indent":[]}},{"type":"inlineCode","value":"𝜎=𝑥𝐻(𝑚)∈𝔾1","position":{"start":{"line":32,"column":190,"offset":2332},"end":{"line":32,"column":207,"offset":2349},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":32,"column":207,"offset":2349},"end":{"line":32,"column":208,"offset":2350},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2143},"end":{"line":32,"column":208,"offset":2350},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Signature Verification","position":{"start":{"line":34,"column":5,"offset":2356},"end":{"line":34,"column":27,"offset":2378},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2352},"end":{"line":34,"column":27,"offset":2378},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To verify that a BLS signature ","position":{"start":{"line":36,"column":1,"offset":2380},"end":{"line":36,"column":32,"offset":2411},"indent":[]}},{"type":"inlineCode","value":"𝜎","position":{"start":{"line":36,"column":32,"offset":2411},"end":{"line":36,"column":36,"offset":2415},"indent":[]}},{"type":"text","value":" on a message ","position":{"start":{"line":36,"column":36,"offset":2415},"end":{"line":36,"column":50,"offset":2429},"indent":[]}},{"type":"inlineCode","value":"𝑚","position":{"start":{"line":36,"column":50,"offset":2429},"end":{"line":36,"column":54,"offset":2433},"indent":[]}},{"type":"text","value":" is valid, the verifier checks if ","position":{"start":{"line":36,"column":54,"offset":2433},"end":{"line":36,"column":88,"offset":2467},"indent":[]}},{"type":"inlineCode","value":"𝑒(𝐻(𝑚),𝑋)=𝑒(𝜎,𝑔2)","position":{"start":{"line":36,"column":88,"offset":2467},"end":{"line":36,"column":114,"offset":2493},"indent":[]}},{"type":"text","value":" holds using the signer’s public key ","position":{"start":{"line":36,"column":114,"offset":2493},"end":{"line":36,"column":151,"offset":2530},"indent":[]}},{"type":"inlineCode","value":"𝑋","position":{"start":{"line":36,"column":151,"offset":2530},"end":{"line":36,"column":155,"offset":2534},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":36,"column":155,"offset":2534},"end":{"line":36,"column":156,"offset":2535},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2380},"end":{"line":36,"column":156,"offset":2535},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It's easy to see that this equation holds for valid signatures since ","position":{"start":{"line":38,"column":1,"offset":2537},"end":{"line":38,"column":70,"offset":2606},"indent":[]}},{"type":"inlineCode","value":"𝑒(𝐻(𝑚),𝑋)=𝑒(𝐻(𝑚),𝑔𝑥2)=𝑒(𝐻(𝑚),𝑔2)𝑥=𝑒(𝑥𝐻(𝑚),𝑔2)=𝑒(𝜎,𝑔2)","position":{"start":{"line":38,"column":70,"offset":2606},"end":{"line":38,"column":147,"offset":2683},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":38,"column":147,"offset":2683},"end":{"line":38,"column":148,"offset":2684},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2537},"end":{"line":38,"column":148,"offset":2684},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Threshold BLS Signature","position":{"start":{"line":40,"column":4,"offset":2689},"end":{"line":40,"column":27,"offset":2712},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":2686},"end":{"line":40,"column":27,"offset":2712},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The goal of a threshold signature scheme is to collectively compute a signature by combining individual partial signatures independently generated by the participants. A threshold BLS signature scheme has the following sub-procedures.","position":{"start":{"line":42,"column":1,"offset":2714},"end":{"line":42,"column":235,"offset":2948},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2714},"end":{"line":42,"column":235,"offset":2948},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Key Generation","position":{"start":{"line":44,"column":5,"offset":2954},"end":{"line":44,"column":19,"offset":2968},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2950},"end":{"line":44,"column":19,"offset":2968},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":46,"column":1,"offset":2970},"end":{"line":46,"column":5,"offset":2974},"indent":[]}},{"type":"inlineCode","value":"𝑛","position":{"start":{"line":46,"column":5,"offset":2974},"end":{"line":46,"column":9,"offset":2978},"indent":[]}},{"type":"text","value":" participants execute a ","position":{"start":{"line":46,"column":9,"offset":2978},"end":{"line":46,"column":33,"offset":3002},"indent":[]}},{"type":"inlineCode","value":"𝑡-of-𝑛","position":{"start":{"line":46,"column":33,"offset":3002},"end":{"line":46,"column":43,"offset":3012},"indent":[]}},{"type":"text","value":" DKG to setup a collective public key, ","position":{"start":{"line":46,"column":43,"offset":3012},"end":{"line":46,"column":82,"offset":3051},"indent":[]}},{"type":"inlineCode","value":"𝑆∈𝔾2","position":{"start":{"line":46,"column":82,"offset":3051},"end":{"line":46,"column":90,"offset":3059},"indent":[]}},{"type":"text","value":", and private key shares ","position":{"start":{"line":46,"column":90,"offset":3059},"end":{"line":46,"column":115,"offset":3084},"indent":[]}},{"type":"inlineCode","value":"𝑠𝑖∈ℤ∗𝑝","position":{"start":{"line":46,"column":115,"offset":3084},"end":{"line":46,"column":126,"offset":3095},"indent":[]}},{"type":"text","value":" of the unknown collective private key, ","position":{"start":{"line":46,"column":126,"offset":3095},"end":{"line":46,"column":166,"offset":3135},"indent":[]}},{"type":"inlineCode","value":"𝑠","position":{"start":{"line":46,"column":166,"offset":3135},"end":{"line":46,"column":170,"offset":3139},"indent":[]}},{"type":"text","value":", as described above.","position":{"start":{"line":46,"column":170,"offset":3139},"end":{"line":46,"column":191,"offset":3160},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2970},"end":{"line":46,"column":191,"offset":3160},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Partial Signature Generation","position":{"start":{"line":48,"column":5,"offset":3166},"end":{"line":48,"column":33,"offset":3194},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":3162},"end":{"line":48,"column":33,"offset":3194},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To sign a message, ","position":{"start":{"line":50,"column":1,"offset":3196},"end":{"line":50,"column":20,"offset":3215},"indent":[]}},{"type":"inlineCode","value":"𝑚","position":{"start":{"line":50,"column":20,"offset":3215},"end":{"line":50,"column":24,"offset":3219},"indent":[]}},{"type":"text","value":", each ","position":{"start":{"line":50,"column":24,"offset":3219},"end":{"line":50,"column":31,"offset":3226},"indent":[]}},{"type":"inlineCode","value":"𝑖","position":{"start":{"line":50,"column":31,"offset":3226},"end":{"line":50,"column":35,"offset":3230},"indent":[]}},{"type":"text","value":" uses their private key share, ","position":{"start":{"line":50,"column":35,"offset":3230},"end":{"line":50,"column":66,"offset":3261},"indent":[]}},{"type":"inlineCode","value":"𝑠𝑖","position":{"start":{"line":50,"column":66,"offset":3261},"end":{"line":50,"column":72,"offset":3267},"indent":[]}},{"type":"text","value":", to create a partial BLS signature, ","position":{"start":{"line":50,"column":72,"offset":3267},"end":{"line":50,"column":109,"offset":3304},"indent":[]}},{"type":"inlineCode","value":"𝜎𝑖=𝑠𝑖𝐻(𝑚)","position":{"start":{"line":50,"column":109,"offset":3304},"end":{"line":50,"column":126,"offset":3321},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":50,"column":126,"offset":3321},"end":{"line":50,"column":127,"offset":3322},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":3196},"end":{"line":50,"column":127,"offset":3322},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Partial Signature Verification","position":{"start":{"line":52,"column":5,"offset":3328},"end":{"line":52,"column":35,"offset":3358},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":3324},"end":{"line":52,"column":35,"offset":3358},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To verify the correctness of a partial signature, ","position":{"start":{"line":54,"column":1,"offset":3360},"end":{"line":54,"column":51,"offset":3410},"indent":[]}},{"type":"inlineCode","value":"𝜎𝑖","position":{"start":{"line":54,"column":51,"offset":3410},"end":{"line":54,"column":57,"offset":3416},"indent":[]}},{"type":"text","value":", on ","position":{"start":{"line":54,"column":57,"offset":3416},"end":{"line":54,"column":62,"offset":3421},"indent":[]}},{"type":"inlineCode","value":"𝑚","position":{"start":{"line":54,"column":62,"offset":3421},"end":{"line":54,"column":66,"offset":3425},"indent":[]}},{"type":"text","value":", a verifier uses the public key share, ","position":{"start":{"line":54,"column":66,"offset":3425},"end":{"line":54,"column":106,"offset":3465},"indent":[]}},{"type":"inlineCode","value":"𝑆𝑖","position":{"start":{"line":54,"column":106,"offset":3465},"end":{"line":54,"column":112,"offset":3471},"indent":[]}},{"type":"text","value":", generated during the DKG, and verifies that ","position":{"start":{"line":54,"column":112,"offset":3471},"end":{"line":54,"column":158,"offset":3517},"indent":[]}},{"type":"inlineCode","value":"𝑒(𝐻(𝑚),𝑆𝑖)=𝑒(𝜎𝑖,𝑔2)","position":{"start":{"line":54,"column":158,"offset":3517},"end":{"line":54,"column":188,"offset":3547},"indent":[]}},{"type":"text","value":" holds.","position":{"start":{"line":54,"column":188,"offset":3547},"end":{"line":54,"column":195,"offset":3554},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":3360},"end":{"line":54,"column":195,"offset":3554},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Signature Reconstruction","position":{"start":{"line":56,"column":5,"offset":3560},"end":{"line":56,"column":29,"offset":3584},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":3556},"end":{"line":56,"column":29,"offset":3584},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To reconstruct the collective BLS signature, ","position":{"start":{"line":58,"column":1,"offset":3586},"end":{"line":58,"column":46,"offset":3631},"indent":[]}},{"type":"inlineCode","value":"𝜎","position":{"start":{"line":58,"column":46,"offset":3631},"end":{"line":58,"column":50,"offset":3635},"indent":[]}},{"type":"text","value":" on ","position":{"start":{"line":58,"column":50,"offset":3635},"end":{"line":58,"column":54,"offset":3639},"indent":[]}},{"type":"inlineCode","value":"𝑚","position":{"start":{"line":58,"column":54,"offset":3639},"end":{"line":58,"column":58,"offset":3643},"indent":[]}},{"type":"text","value":", a verifier first gathers ","position":{"start":{"line":58,"column":58,"offset":3643},"end":{"line":58,"column":85,"offset":3670},"indent":[]}},{"type":"inlineCode","value":"𝑡","position":{"start":{"line":58,"column":85,"offset":3670},"end":{"line":58,"column":89,"offset":3674},"indent":[]}},{"type":"text","value":" different and valid partial BLS signatures, ","position":{"start":{"line":58,"column":89,"offset":3674},"end":{"line":58,"column":134,"offset":3719},"indent":[]}},{"type":"inlineCode","value":"𝜎𝑖","position":{"start":{"line":58,"column":134,"offset":3719},"end":{"line":58,"column":140,"offset":3725},"indent":[]}},{"type":"text","value":", on ","position":{"start":{"line":58,"column":140,"offset":3725},"end":{"line":58,"column":145,"offset":3730},"indent":[]}},{"type":"inlineCode","value":"𝑚","position":{"start":{"line":58,"column":145,"offset":3730},"end":{"line":58,"column":149,"offset":3734},"indent":[]}},{"type":"text","value":" followed by a Lagrange interpolation.","position":{"start":{"line":58,"column":149,"offset":3734},"end":{"line":58,"column":187,"offset":3772},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":3586},"end":{"line":58,"column":187,"offset":3772},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Signature Verification","position":{"start":{"line":60,"column":5,"offset":3778},"end":{"line":60,"column":27,"offset":3800},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":3774},"end":{"line":60,"column":27,"offset":3800},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To verify a collective BLS signature, ","position":{"start":{"line":62,"column":1,"offset":3802},"end":{"line":62,"column":39,"offset":3840},"indent":[]}},{"type":"inlineCode","value":"𝜎","position":{"start":{"line":62,"column":39,"offset":3840},"end":{"line":62,"column":43,"offset":3844},"indent":[]}},{"type":"text","value":", a verifier simply checks that ","position":{"start":{"line":62,"column":43,"offset":3844},"end":{"line":62,"column":75,"offset":3876},"indent":[]}},{"type":"inlineCode","value":"𝑒(𝐻(𝑚),𝑆)=𝑒(𝜎,𝑔2)","position":{"start":{"line":62,"column":75,"offset":3876},"end":{"line":62,"column":101,"offset":3902},"indent":[]}},{"type":"text","value":" holds, where ","position":{"start":{"line":62,"column":101,"offset":3902},"end":{"line":62,"column":115,"offset":3916},"indent":[]}},{"type":"inlineCode","value":"𝑆","position":{"start":{"line":62,"column":115,"offset":3916},"end":{"line":62,"column":119,"offset":3920},"indent":[]}},{"type":"text","value":" is the collective public key.","position":{"start":{"line":62,"column":119,"offset":3920},"end":{"line":62,"column":149,"offset":3950},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":3802},"end":{"line":62,"column":149,"offset":3950},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Thanks to the properties of Lagrange interpolation, the value of ","position":{"start":{"line":64,"column":1,"offset":3952},"end":{"line":64,"column":66,"offset":4017},"indent":[]}},{"type":"inlineCode","value":"𝜎","position":{"start":{"line":64,"column":66,"offset":4017},"end":{"line":64,"column":70,"offset":4021},"indent":[]}},{"type":"text","value":" is independent of the subset of ","position":{"start":{"line":64,"column":70,"offset":4021},"end":{"line":64,"column":103,"offset":4054},"indent":[]}},{"type":"inlineCode","value":"𝑡","position":{"start":{"line":64,"column":103,"offset":4054},"end":{"line":64,"column":107,"offset":4058},"indent":[]}},{"type":"text","value":" valid partial signatures, ","position":{"start":{"line":64,"column":107,"offset":4058},"end":{"line":64,"column":134,"offset":4085},"indent":[]}},{"type":"inlineCode","value":"𝜎𝑖","position":{"start":{"line":64,"column":134,"offset":4085},"end":{"line":64,"column":140,"offset":4091},"indent":[]}},{"type":"text","value":", chosen during signature reconstruction. Additionally, Lagrange interpolation also guarantees that no set of less than ","position":{"start":{"line":64,"column":140,"offset":4091},"end":{"line":64,"column":260,"offset":4211},"indent":[]}},{"type":"inlineCode","value":"𝑡","position":{"start":{"line":64,"column":260,"offset":4211},"end":{"line":64,"column":264,"offset":4215},"indent":[]}},{"type":"text","value":" signers can predict or bias ","position":{"start":{"line":64,"column":264,"offset":4215},"end":{"line":64,"column":293,"offset":4244},"indent":[]}},{"type":"inlineCode","value":"𝜎","position":{"start":{"line":64,"column":293,"offset":4244},"end":{"line":64,"column":297,"offset":4248},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":64,"column":297,"offset":4248},"end":{"line":64,"column":298,"offset":4249},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3952},"end":{"line":64,"column":298,"offset":4249},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In summary, a threshold BLS signature, ","position":{"start":{"line":66,"column":1,"offset":4251},"end":{"line":66,"column":40,"offset":4290},"indent":[]}},{"type":"inlineCode","value":"𝜎","position":{"start":{"line":66,"column":40,"offset":4290},"end":{"line":66,"column":44,"offset":4294},"indent":[]}},{"type":"text","value":", exhibits all properties required for publicly-verifiable, unbiasable, unpredictable, and distributed randomness.","position":{"start":{"line":66,"column":44,"offset":4294},"end":{"line":66,"column":158,"offset":4408},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":4251},"end":{"line":66,"column":158,"offset":4408},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Chained Randomness","position":{"start":{"line":68,"column":4,"offset":4413},"end":{"line":68,"column":22,"offset":4431},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":4410},"end":{"line":68,"column":22,"offset":4431},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The drand randomness beacon operates in discrete rounds, ","position":{"start":{"line":70,"column":1,"offset":4433},"end":{"line":70,"column":58,"offset":4490},"indent":[]}},{"type":"inlineCode","value":"𝑟","position":{"start":{"line":70,"column":58,"offset":4490},"end":{"line":70,"column":62,"offset":4494},"indent":[]}},{"type":"text","value":". In every round, drand produces a new random value using threshold BLS signatures linked together into a chain of randomness. To extend this chain of randomness, each drand participant, ","position":{"start":{"line":70,"column":62,"offset":4494},"end":{"line":70,"column":249,"offset":4681},"indent":[]}},{"type":"inlineCode","value":"𝑖","position":{"start":{"line":70,"column":249,"offset":4681},"end":{"line":70,"column":253,"offset":4685},"indent":[]}},{"type":"text","value":", creates in round ","position":{"start":{"line":70,"column":253,"offset":4685},"end":{"line":70,"column":272,"offset":4704},"indent":[]}},{"type":"inlineCode","value":"𝑟","position":{"start":{"line":70,"column":272,"offset":4704},"end":{"line":70,"column":276,"offset":4708},"indent":[]}},{"type":"text","value":" the partial BLS signature, ","position":{"start":{"line":70,"column":276,"offset":4708},"end":{"line":70,"column":304,"offset":4736},"indent":[]}},{"type":"inlineCode","value":"𝜎𝑟𝑖","position":{"start":{"line":70,"column":304,"offset":4736},"end":{"line":70,"column":312,"offset":4744},"indent":[]}},{"type":"text","value":" on the message ","position":{"start":{"line":70,"column":312,"offset":4744},"end":{"line":70,"column":328,"offset":4760},"indent":[]}},{"type":"inlineCode","value":"𝑚=𝐻(𝑟∥𝜎𝑟−1)","position":{"start":{"line":70,"column":328,"offset":4760},"end":{"line":70,"column":346,"offset":4778},"indent":[]}},{"type":"text","value":" where, ","position":{"start":{"line":70,"column":346,"offset":4778},"end":{"line":70,"column":354,"offset":4786},"indent":[]}},{"type":"inlineCode","value":"𝜎𝑟−1","position":{"start":{"line":70,"column":354,"offset":4786},"end":{"line":70,"column":362,"offset":4794},"indent":[]}},{"type":"text","value":" denotes the (full) BLS threshold signature from round ","position":{"start":{"line":70,"column":362,"offset":4794},"end":{"line":70,"column":417,"offset":4849},"indent":[]}},{"type":"inlineCode","value":"𝑟−1","position":{"start":{"line":70,"column":417,"offset":4849},"end":{"line":70,"column":423,"offset":4855},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":70,"column":423,"offset":4855},"end":{"line":70,"column":428,"offset":4860},"indent":[]}},{"type":"inlineCode","value":"𝐻","position":{"start":{"line":70,"column":428,"offset":4860},"end":{"line":70,"column":432,"offset":4864},"indent":[]}},{"type":"text","value":", a cryptographic hash function.","position":{"start":{"line":70,"column":432,"offset":4864},"end":{"line":70,"column":464,"offset":4896},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":4433},"end":{"line":70,"column":464,"offset":4896},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once at least ","position":{"start":{"line":72,"column":1,"offset":4898},"end":{"line":72,"column":15,"offset":4912},"indent":[]}},{"type":"inlineCode","value":"𝑡","position":{"start":{"line":72,"column":15,"offset":4912},"end":{"line":72,"column":19,"offset":4916},"indent":[]}},{"type":"text","value":" participants have broadcasted their partial signatures, ","position":{"start":{"line":72,"column":19,"offset":4916},"end":{"line":72,"column":76,"offset":4973},"indent":[]}},{"type":"inlineCode","value":"𝜎𝑟𝑖","position":{"start":{"line":72,"column":76,"offset":4973},"end":{"line":72,"column":84,"offset":4981},"indent":[]}},{"type":"text","value":", on ","position":{"start":{"line":72,"column":84,"offset":4981},"end":{"line":72,"column":89,"offset":4986},"indent":[]}},{"type":"inlineCode","value":"𝑚","position":{"start":{"line":72,"column":89,"offset":4986},"end":{"line":72,"column":93,"offset":4990},"indent":[]}},{"type":"text","value":", anyone can recover the full BLS threshold signature, ","position":{"start":{"line":72,"column":93,"offset":4990},"end":{"line":72,"column":148,"offset":5045},"indent":[]}},{"type":"inlineCode","value":"𝜎𝑟","position":{"start":{"line":72,"column":148,"offset":5045},"end":{"line":72,"column":154,"offset":5051},"indent":[]}},{"type":"text","value":" that corresponds to the random value of round ","position":{"start":{"line":72,"column":154,"offset":5051},"end":{"line":72,"column":201,"offset":5098},"indent":[]}},{"type":"inlineCode","value":"𝑟","position":{"start":{"line":72,"column":201,"offset":5098},"end":{"line":72,"column":205,"offset":5102},"indent":[]}},{"type":"text","value":". After this, drand nodes move to round ","position":{"start":{"line":72,"column":205,"offset":5102},"end":{"line":72,"column":245,"offset":5142},"indent":[]}},{"type":"inlineCode","value":"𝑟+1","position":{"start":{"line":72,"column":245,"offset":5142},"end":{"line":72,"column":251,"offset":5148},"indent":[]}},{"type":"text","value":" and reiterate the process.","position":{"start":{"line":72,"column":251,"offset":5148},"end":{"line":72,"column":278,"offset":5175},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":4898},"end":{"line":72,"column":278,"offset":5175},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For round ","position":{"start":{"line":74,"column":1,"offset":5177},"end":{"line":74,"column":11,"offset":5187},"indent":[]}},{"type":"inlineCode","value":"𝑟=0","position":{"start":{"line":74,"column":11,"offset":5187},"end":{"line":74,"column":17,"offset":5193},"indent":[]}},{"type":"text","value":", drand participants sign a seed fixed during drand setup. This process ensures that every new random value depends on all previously generated signatures. Since the signature is deterministic, there is also no possibility for an adversary forking the chain and presenting two distinct signatures ","position":{"start":{"line":74,"column":17,"offset":5193},"end":{"line":74,"column":314,"offset":5490},"indent":[]}},{"type":"inlineCode","value":"𝜎𝑟","position":{"start":{"line":74,"column":314,"offset":5490},"end":{"line":74,"column":320,"offset":5496},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":74,"column":320,"offset":5496},"end":{"line":74,"column":325,"offset":5501},"indent":[]}},{"type":"inlineCode","value":"𝜎′𝑟","position":{"start":{"line":74,"column":325,"offset":5501},"end":{"line":74,"column":332,"offset":5508},"indent":[]}},{"type":"text","value":" in a given round ","position":{"start":{"line":74,"column":332,"offset":5508},"end":{"line":74,"column":350,"offset":5526},"indent":[]}},{"type":"inlineCode","value":"𝑟","position":{"start":{"line":74,"column":350,"offset":5526},"end":{"line":74,"column":354,"offset":5530},"indent":[]}},{"type":"text","value":" to generate inconsistencies in the systems relying on public randomness.","position":{"start":{"line":74,"column":354,"offset":5530},"end":{"line":74,"column":427,"offset":5603},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":5177},"end":{"line":74,"column":427,"offset":5603},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"order\":1,\"pcx-content-type\":\"interim\"}","position":{"start":{"line":77,"column":1,"offset":5606},"end":{"line":77,"column":69,"offset":5674},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":77,"column":69,"offset":5674}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 1,\n  \"pcx-content-type\": \"interim\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"randomness-generation\"\n  }, \"Randomness Generation\"), mdx(\"p\", null, \"In this section, we describe how to use this collective key pair to generate publicly-verifiable, unbiasable, and unpredictable randomness in a distributed manner.\"), mdx(\"p\", null, \"First, we explain pairing-based cryptography (PBC), which has become quite popular, and is used in many modern consensus protocols or zero-knowledge proofs, such as zk-SNARKs. We'll then show how drand uses PBC for the randomness beacon generation phase for threshold Boneh-Lynn-Shacham (BLS) signatures. Finally, we'll discuss how drand links the generated threshold BLS signatures into a randomness chain.\"), mdx(\"h2\", {\n    \"id\": \"pairing-based-cryptography\"\n  }, \"Pairing-based Cryptography\"), mdx(\"p\", null, \"Pairing-based cryptography is based on bilinear groups \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(\\uD835\\uDD3E1,\\uD835\\uDD3E2,\\uD835\\uDD3E\\uD835\\uDC61)\"), \", where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDD3E1\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDD3E2\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDD3E\\uD835\\uDC61\"), \" are cyclic groups of prime order \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5D\"), \" with generators \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC541\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC542\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC54\\uD835\\uDC61\"), \", respectively, and a pairing operation \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC52:\\uD835\\uDD3E1\\xD7\\uD835\\uDD3E2\\u2192\\uD835\\uDD3E\\uD835\\uDC61\"), \" with these properties:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bilinearity:\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u2200\\uD835\\uDC4E,\\uD835\\uDC4F\\u2208\\u2124\\u2217\\uD835\\uDC5D,\\u2200\\uD835\\uDC43\\u2208\\uD835\\uDD3E1,\\u2200\\uD835\\uDC44\\u2208\\uD835\\uDD3E2,\"), \" we have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC52(\\uD835\\uDC4E\\uD835\\uDC43,\\uD835\\uDC4F\\uD835\\uDC44)=\\uD835\\uDC52(\\uD835\\uDC43,\\uD835\\uDC44)\\uD835\\uDC4E\\uD835\\uDC4F\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Non-degeneracy:\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC52\\u22601\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Computability:\"), \" There exists an efficient algorithm to compute \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC52\"), \".\\ndrand currently uses the Barreto-Naehrig curve BN256.\"))), mdx(\"h2\", {\n    \"id\": \"bls-signatures\"\n  }, \"BLS Signatures\"), mdx(\"p\", null, \"To generate publicly-verifiable, unbiasable, distributed randomness, drand utilizes threshold Boneh-Lynn-Shacham (BLS) signatures. First we'll describe regular BLS signatures and then the threshold variant.\"), mdx(\"p\", null, \"BLS signatures are short signatures that rely on bilinear pairings and consist only of a single element in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDD3E1\"), \". They are deterministic in the sense they depend only on the message and the signer\\u2019s key, unlike other signature schemes, such as ECDSA, that require a fresh random value for each signed message to be secure. Put differently, any two BLS signatures on a given message produced with the same key are identical. In drand, we utilize this property to achieve unbiasability for randomness generation.\"), mdx(\"p\", null, \"The BLS signature scheme consists of the these sub-procedures.\"), mdx(\"h3\", {\n    \"id\": \"key-generation\"\n  }, \"Key Generation\"), mdx(\"p\", null, \"To generate a key pair, a signer first chooses a private key, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC65\\u2208\\u2124\\u2217\\uD835\\uDC5D\"), \", at random, and then computes the corresponding public key as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC4B=\\uD835\\uDC54\\uD835\\uDC652\\u2208\\uD835\\uDD3E2\"), \".\"), mdx(\"h3\", {\n    \"id\": \"signature-generation\"\n  }, \"Signature Generation\"), mdx(\"p\", null, \"Let \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC3B:{0,1}\\u2217\\u2192\\uD835\\uDD3E1\"), \" denote a cryptographic hash function that maps arbitrary bit strings to elements of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDD3E1\"), \". To compute a BLS signature \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\"), \" on a message \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5A\"), \", the signer simply computes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E=\\uD835\\uDC65\\uD835\\uDC3B(\\uD835\\uDC5A)\\u2208\\uD835\\uDD3E1\"), \".\"), mdx(\"h3\", {\n    \"id\": \"signature-verification\"\n  }, \"Signature Verification\"), mdx(\"p\", null, \"To verify that a BLS signature \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\"), \" on a message \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5A\"), \" is valid, the verifier checks if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC52(\\uD835\\uDC3B(\\uD835\\uDC5A),\\uD835\\uDC4B)=\\uD835\\uDC52(\\uD835\\uDF0E,\\uD835\\uDC542)\"), \" holds using the signer\\u2019s public key \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC4B\"), \".\"), mdx(\"p\", null, \"It's easy to see that this equation holds for valid signatures since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC52(\\uD835\\uDC3B(\\uD835\\uDC5A),\\uD835\\uDC4B)=\\uD835\\uDC52(\\uD835\\uDC3B(\\uD835\\uDC5A),\\uD835\\uDC54\\uD835\\uDC652)=\\uD835\\uDC52(\\uD835\\uDC3B(\\uD835\\uDC5A),\\uD835\\uDC542)\\uD835\\uDC65=\\uD835\\uDC52(\\uD835\\uDC65\\uD835\\uDC3B(\\uD835\\uDC5A),\\uD835\\uDC542)=\\uD835\\uDC52(\\uD835\\uDF0E,\\uD835\\uDC542)\"), \".\"), mdx(\"h2\", {\n    \"id\": \"threshold-bls-signature\"\n  }, \"Threshold BLS Signature\"), mdx(\"p\", null, \"The goal of a threshold signature scheme is to collectively compute a signature by combining individual partial signatures independently generated by the participants. A threshold BLS signature scheme has the following sub-procedures.\"), mdx(\"h3\", {\n    \"id\": \"key-generation-1\"\n  }, \"Key Generation\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5B\"), \" participants execute a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC61-of-\\uD835\\uDC5B\"), \" DKG to setup a collective public key, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC46\\u2208\\uD835\\uDD3E2\"), \", and private key shares \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\\uD835\\uDC56\\u2208\\u2124\\u2217\\uD835\\uDC5D\"), \" of the unknown collective private key, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\"), \", as described above.\"), mdx(\"h3\", {\n    \"id\": \"partial-signature-generation\"\n  }, \"Partial Signature Generation\"), mdx(\"p\", null, \"To sign a message, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5A\"), \", each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC56\"), \" uses their private key share, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\\uD835\\uDC56\"), \", to create a partial BLS signature, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\\uD835\\uDC56=\\uD835\\uDC60\\uD835\\uDC56\\uD835\\uDC3B(\\uD835\\uDC5A)\"), \".\"), mdx(\"h3\", {\n    \"id\": \"partial-signature-verification\"\n  }, \"Partial Signature Verification\"), mdx(\"p\", null, \"To verify the correctness of a partial signature, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\\uD835\\uDC56\"), \", on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5A\"), \", a verifier uses the public key share, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC46\\uD835\\uDC56\"), \", generated during the DKG, and verifies that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC52(\\uD835\\uDC3B(\\uD835\\uDC5A),\\uD835\\uDC46\\uD835\\uDC56)=\\uD835\\uDC52(\\uD835\\uDF0E\\uD835\\uDC56,\\uD835\\uDC542)\"), \" holds.\"), mdx(\"h3\", {\n    \"id\": \"signature-reconstruction\"\n  }, \"Signature Reconstruction\"), mdx(\"p\", null, \"To reconstruct the collective BLS signature, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\"), \" on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5A\"), \", a verifier first gathers \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC61\"), \" different and valid partial BLS signatures, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\\uD835\\uDC56\"), \", on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5A\"), \" followed by a Lagrange interpolation.\"), mdx(\"h3\", {\n    \"id\": \"signature-verification-1\"\n  }, \"Signature Verification\"), mdx(\"p\", null, \"To verify a collective BLS signature, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\"), \", a verifier simply checks that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC52(\\uD835\\uDC3B(\\uD835\\uDC5A),\\uD835\\uDC46)=\\uD835\\uDC52(\\uD835\\uDF0E,\\uD835\\uDC542)\"), \" holds, where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC46\"), \" is the collective public key.\"), mdx(\"p\", null, \"Thanks to the properties of Lagrange interpolation, the value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\"), \" is independent of the subset of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC61\"), \" valid partial signatures, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\\uD835\\uDC56\"), \", chosen during signature reconstruction. Additionally, Lagrange interpolation also guarantees that no set of less than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC61\"), \" signers can predict or bias \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\"), \".\"), mdx(\"p\", null, \"In summary, a threshold BLS signature, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\"), \", exhibits all properties required for publicly-verifiable, unbiasable, unpredictable, and distributed randomness.\"), mdx(\"h2\", {\n    \"id\": \"chained-randomness\"\n  }, \"Chained Randomness\"), mdx(\"p\", null, \"The drand randomness beacon operates in discrete rounds, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5F\"), \". In every round, drand produces a new random value using threshold BLS signatures linked together into a chain of randomness. To extend this chain of randomness, each drand participant, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC56\"), \", creates in round \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5F\"), \" the partial BLS signature, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\\uD835\\uDC5F\\uD835\\uDC56\"), \" on the message \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5A=\\uD835\\uDC3B(\\uD835\\uDC5F\\u2225\\uD835\\uDF0E\\uD835\\uDC5F\\u22121)\"), \" where, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\\uD835\\uDC5F\\u22121\"), \" denotes the (full) BLS threshold signature from round \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5F\\u22121\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC3B\"), \", a cryptographic hash function.\"), mdx(\"p\", null, \"Once at least \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC61\"), \" participants have broadcasted their partial signatures, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\\uD835\\uDC5F\\uD835\\uDC56\"), \", on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5A\"), \", anyone can recover the full BLS threshold signature, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\\uD835\\uDC5F\"), \" that corresponds to the random value of round \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5F\"), \". After this, drand nodes move to round \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5F+1\"), \" and reiterate the process.\"), mdx(\"p\", null, \"For round \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5F=0\"), \", drand participants sign a seed fixed during drand setup. This process ensures that every new random value depends on all previously generated signatures. Since the signature is deterministic, there is also no possibility for an adversary forking the chain and presenting two distinct signatures \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\\uD835\\uDC5F\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDF0E\\u2032\\uD835\\uDC5F\"), \" in a given round \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5F\"), \" to generate inconsistencies in the systems relying on public randomness.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"order\": 1,\n  \"pcx-content-type\": \"interim\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"randomness-generation\"\n    }}>{`Randomness Generation`}</h1>\n    <p>{`In this section, we describe how to use this collective key pair to generate publicly-verifiable, unbiasable, and unpredictable randomness in a distributed manner.`}</p>\n    <p>{`First, we explain pairing-based cryptography (PBC), which has become quite popular, and is used in many modern consensus protocols or zero-knowledge proofs, such as zk-SNARKs. We'll then show how drand uses PBC for the randomness beacon generation phase for threshold Boneh-Lynn-Shacham (BLS) signatures. Finally, we'll discuss how drand links the generated threshold BLS signatures into a randomness chain.`}</p>\n    <h2 {...{\n      \"id\": \"pairing-based-cryptography\"\n    }}>{`Pairing-based Cryptography`}</h2>\n    <p>{`Pairing-based cryptography is based on bilinear groups `}<inlineCode parentName=\"p\">{`(𝔾1,𝔾2,𝔾𝑡)`}</inlineCode>{`, where `}<inlineCode parentName=\"p\">{`𝔾1`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`𝔾2`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`𝔾𝑡`}</inlineCode>{` are cyclic groups of prime order `}<inlineCode parentName=\"p\">{`𝑝`}</inlineCode>{` with generators `}<inlineCode parentName=\"p\">{`𝑔1`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`𝑔2`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`𝑔𝑡`}</inlineCode>{`, respectively, and a pairing operation `}<inlineCode parentName=\"p\">{`𝑒:𝔾1×𝔾2→𝔾𝑡`}</inlineCode>{` with these properties:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Bilinearity:`}</strong>{` `}<inlineCode parentName=\"p\">{`∀𝑎,𝑏∈ℤ∗𝑝,∀𝑃∈𝔾1,∀𝑄∈𝔾2,`}</inlineCode>{` we have `}<inlineCode parentName=\"p\">{`𝑒(𝑎𝑃,𝑏𝑄)=𝑒(𝑃,𝑄)𝑎𝑏`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Non-degeneracy:`}</strong>{` `}<inlineCode parentName=\"p\">{`𝑒≠1`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Computability:`}</strong>{` There exists an efficient algorithm to compute `}<inlineCode parentName=\"p\">{`𝑒`}</inlineCode>{`.\ndrand currently uses the Barreto-Naehrig curve BN256.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"bls-signatures\"\n    }}>{`BLS Signatures`}</h2>\n    <p>{`To generate publicly-verifiable, unbiasable, distributed randomness, drand utilizes threshold Boneh-Lynn-Shacham (BLS) signatures. First we'll describe regular BLS signatures and then the threshold variant.`}</p>\n    <p>{`BLS signatures are short signatures that rely on bilinear pairings and consist only of a single element in `}<inlineCode parentName=\"p\">{`𝔾1`}</inlineCode>{`. They are deterministic in the sense they depend only on the message and the signer’s key, unlike other signature schemes, such as ECDSA, that require a fresh random value for each signed message to be secure. Put differently, any two BLS signatures on a given message produced with the same key are identical. In drand, we utilize this property to achieve unbiasability for randomness generation.`}</p>\n    <p>{`The BLS signature scheme consists of the these sub-procedures.`}</p>\n    <h3 {...{\n      \"id\": \"key-generation\"\n    }}>{`Key Generation`}</h3>\n    <p>{`To generate a key pair, a signer first chooses a private key, `}<inlineCode parentName=\"p\">{`𝑥∈ℤ∗𝑝`}</inlineCode>{`, at random, and then computes the corresponding public key as `}<inlineCode parentName=\"p\">{`𝑋=𝑔𝑥2∈𝔾2`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"signature-generation\"\n    }}>{`Signature Generation`}</h3>\n    <p>{`Let `}<inlineCode parentName=\"p\">{`𝐻:{0,1}∗→𝔾1`}</inlineCode>{` denote a cryptographic hash function that maps arbitrary bit strings to elements of `}<inlineCode parentName=\"p\">{`𝔾1`}</inlineCode>{`. To compute a BLS signature `}<inlineCode parentName=\"p\">{`𝜎`}</inlineCode>{` on a message `}<inlineCode parentName=\"p\">{`𝑚`}</inlineCode>{`, the signer simply computes `}<inlineCode parentName=\"p\">{`𝜎=𝑥𝐻(𝑚)∈𝔾1`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"signature-verification\"\n    }}>{`Signature Verification`}</h3>\n    <p>{`To verify that a BLS signature `}<inlineCode parentName=\"p\">{`𝜎`}</inlineCode>{` on a message `}<inlineCode parentName=\"p\">{`𝑚`}</inlineCode>{` is valid, the verifier checks if `}<inlineCode parentName=\"p\">{`𝑒(𝐻(𝑚),𝑋)=𝑒(𝜎,𝑔2)`}</inlineCode>{` holds using the signer’s public key `}<inlineCode parentName=\"p\">{`𝑋`}</inlineCode>{`.`}</p>\n    <p>{`It's easy to see that this equation holds for valid signatures since `}<inlineCode parentName=\"p\">{`𝑒(𝐻(𝑚),𝑋)=𝑒(𝐻(𝑚),𝑔𝑥2)=𝑒(𝐻(𝑚),𝑔2)𝑥=𝑒(𝑥𝐻(𝑚),𝑔2)=𝑒(𝜎,𝑔2)`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"threshold-bls-signature\"\n    }}>{`Threshold BLS Signature`}</h2>\n    <p>{`The goal of a threshold signature scheme is to collectively compute a signature by combining individual partial signatures independently generated by the participants. A threshold BLS signature scheme has the following sub-procedures.`}</p>\n    <h3 {...{\n      \"id\": \"key-generation-1\"\n    }}>{`Key Generation`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`𝑛`}</inlineCode>{` participants execute a `}<inlineCode parentName=\"p\">{`𝑡-of-𝑛`}</inlineCode>{` DKG to setup a collective public key, `}<inlineCode parentName=\"p\">{`𝑆∈𝔾2`}</inlineCode>{`, and private key shares `}<inlineCode parentName=\"p\">{`𝑠𝑖∈ℤ∗𝑝`}</inlineCode>{` of the unknown collective private key, `}<inlineCode parentName=\"p\">{`𝑠`}</inlineCode>{`, as described above.`}</p>\n    <h3 {...{\n      \"id\": \"partial-signature-generation\"\n    }}>{`Partial Signature Generation`}</h3>\n    <p>{`To sign a message, `}<inlineCode parentName=\"p\">{`𝑚`}</inlineCode>{`, each `}<inlineCode parentName=\"p\">{`𝑖`}</inlineCode>{` uses their private key share, `}<inlineCode parentName=\"p\">{`𝑠𝑖`}</inlineCode>{`, to create a partial BLS signature, `}<inlineCode parentName=\"p\">{`𝜎𝑖=𝑠𝑖𝐻(𝑚)`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"partial-signature-verification\"\n    }}>{`Partial Signature Verification`}</h3>\n    <p>{`To verify the correctness of a partial signature, `}<inlineCode parentName=\"p\">{`𝜎𝑖`}</inlineCode>{`, on `}<inlineCode parentName=\"p\">{`𝑚`}</inlineCode>{`, a verifier uses the public key share, `}<inlineCode parentName=\"p\">{`𝑆𝑖`}</inlineCode>{`, generated during the DKG, and verifies that `}<inlineCode parentName=\"p\">{`𝑒(𝐻(𝑚),𝑆𝑖)=𝑒(𝜎𝑖,𝑔2)`}</inlineCode>{` holds.`}</p>\n    <h3 {...{\n      \"id\": \"signature-reconstruction\"\n    }}>{`Signature Reconstruction`}</h3>\n    <p>{`To reconstruct the collective BLS signature, `}<inlineCode parentName=\"p\">{`𝜎`}</inlineCode>{` on `}<inlineCode parentName=\"p\">{`𝑚`}</inlineCode>{`, a verifier first gathers `}<inlineCode parentName=\"p\">{`𝑡`}</inlineCode>{` different and valid partial BLS signatures, `}<inlineCode parentName=\"p\">{`𝜎𝑖`}</inlineCode>{`, on `}<inlineCode parentName=\"p\">{`𝑚`}</inlineCode>{` followed by a Lagrange interpolation.`}</p>\n    <h3 {...{\n      \"id\": \"signature-verification-1\"\n    }}>{`Signature Verification`}</h3>\n    <p>{`To verify a collective BLS signature, `}<inlineCode parentName=\"p\">{`𝜎`}</inlineCode>{`, a verifier simply checks that `}<inlineCode parentName=\"p\">{`𝑒(𝐻(𝑚),𝑆)=𝑒(𝜎,𝑔2)`}</inlineCode>{` holds, where `}<inlineCode parentName=\"p\">{`𝑆`}</inlineCode>{` is the collective public key.`}</p>\n    <p>{`Thanks to the properties of Lagrange interpolation, the value of `}<inlineCode parentName=\"p\">{`𝜎`}</inlineCode>{` is independent of the subset of `}<inlineCode parentName=\"p\">{`𝑡`}</inlineCode>{` valid partial signatures, `}<inlineCode parentName=\"p\">{`𝜎𝑖`}</inlineCode>{`, chosen during signature reconstruction. Additionally, Lagrange interpolation also guarantees that no set of less than `}<inlineCode parentName=\"p\">{`𝑡`}</inlineCode>{` signers can predict or bias `}<inlineCode parentName=\"p\">{`𝜎`}</inlineCode>{`.`}</p>\n    <p>{`In summary, a threshold BLS signature, `}<inlineCode parentName=\"p\">{`𝜎`}</inlineCode>{`, exhibits all properties required for publicly-verifiable, unbiasable, unpredictable, and distributed randomness.`}</p>\n    <h2 {...{\n      \"id\": \"chained-randomness\"\n    }}>{`Chained Randomness`}</h2>\n    <p>{`The drand randomness beacon operates in discrete rounds, `}<inlineCode parentName=\"p\">{`𝑟`}</inlineCode>{`. In every round, drand produces a new random value using threshold BLS signatures linked together into a chain of randomness. To extend this chain of randomness, each drand participant, `}<inlineCode parentName=\"p\">{`𝑖`}</inlineCode>{`, creates in round `}<inlineCode parentName=\"p\">{`𝑟`}</inlineCode>{` the partial BLS signature, `}<inlineCode parentName=\"p\">{`𝜎𝑟𝑖`}</inlineCode>{` on the message `}<inlineCode parentName=\"p\">{`𝑚=𝐻(𝑟∥𝜎𝑟−1)`}</inlineCode>{` where, `}<inlineCode parentName=\"p\">{`𝜎𝑟−1`}</inlineCode>{` denotes the (full) BLS threshold signature from round `}<inlineCode parentName=\"p\">{`𝑟−1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`𝐻`}</inlineCode>{`, a cryptographic hash function.`}</p>\n    <p>{`Once at least `}<inlineCode parentName=\"p\">{`𝑡`}</inlineCode>{` participants have broadcasted their partial signatures, `}<inlineCode parentName=\"p\">{`𝜎𝑟𝑖`}</inlineCode>{`, on `}<inlineCode parentName=\"p\">{`𝑚`}</inlineCode>{`, anyone can recover the full BLS threshold signature, `}<inlineCode parentName=\"p\">{`𝜎𝑟`}</inlineCode>{` that corresponds to the random value of round `}<inlineCode parentName=\"p\">{`𝑟`}</inlineCode>{`. After this, drand nodes move to round `}<inlineCode parentName=\"p\">{`𝑟+1`}</inlineCode>{` and reiterate the process.`}</p>\n    <p>{`For round `}<inlineCode parentName=\"p\">{`𝑟=0`}</inlineCode>{`, drand participants sign a seed fixed during drand setup. This process ensures that every new random value depends on all previously generated signatures. Since the signature is deterministic, there is also no possibility for an adversary forking the chain and presenting two distinct signatures `}<inlineCode parentName=\"p\">{`𝜎𝑟`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`𝜎′𝑟`}</inlineCode>{` in a given round `}<inlineCode parentName=\"p\">{`𝑟`}</inlineCode>{` to generate inconsistencies in the systems relying on public randomness.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}