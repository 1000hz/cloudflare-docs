{"expireTime":9007200890025497000,"key":"gatsby-plugin-mdx-entire-payload-83b855f9f0858623966d225c160cab07-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Cryptographic Background","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":27,"offset":27},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":27,"offset":27},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"drand is an efficient randomness beacon daemon that utilizes pairing-based cryptography, ","position":{"start":{"line":4,"column":1,"offset":29},"end":{"line":4,"column":90,"offset":118},"indent":[]}},{"type":"inlineCode","value":"ùë°-of-ùëõ","position":{"start":{"line":4,"column":90,"offset":118},"end":{"line":4,"column":100,"offset":128},"indent":[]}},{"type":"text","value":" distributed key generation, and threshold BLS signatures to generate publicly-verifiable, unbiasable, unpredictable, distributed randomness.","position":{"start":{"line":4,"column":100,"offset":128},"end":{"line":4,"column":241,"offset":269},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":29},"end":{"line":4,"column":241,"offset":269},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is an overview of the cryptographic building blocks drand uses to generate publicly-verifiable, unbiasable, and unpredictable randomness in a distributed manner.","position":{"start":{"line":6,"column":1,"offset":271},"end":{"line":6,"column":167,"offset":437},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":271},"end":{"line":6,"column":167,"offset":437},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The drand beacon has two phases: a setup phase and a beacon phase. Generally, we assume that there are ","position":{"start":{"line":8,"column":1,"offset":439},"end":{"line":8,"column":104,"offset":542},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"n","position":{"start":{"line":8,"column":105,"offset":543},"end":{"line":8,"column":106,"offset":544},"indent":[]}}],"position":{"start":{"line":8,"column":104,"offset":542},"end":{"line":8,"column":107,"offset":545},"indent":[]}},{"type":"text","value":" participants, out of which at most ","position":{"start":{"line":8,"column":107,"offset":545},"end":{"line":8,"column":143,"offset":581},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"f<n","position":{"start":{"line":8,"column":144,"offset":582},"end":{"line":8,"column":147,"offset":585},"indent":[]}}],"position":{"start":{"line":8,"column":143,"offset":581},"end":{"line":8,"column":148,"offset":586},"indent":[]}},{"type":"text","value":" are malicious. drand relies heavily on threshold cryptography primitives, where (at minimum) a threshold of ","position":{"start":{"line":8,"column":148,"offset":586},"end":{"line":8,"column":257,"offset":695},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"t-f+1","position":{"start":{"line":8,"column":258,"offset":696},"end":{"line":8,"column":263,"offset":701},"indent":[]}}],"position":{"start":{"line":8,"column":257,"offset":695},"end":{"line":8,"column":264,"offset":702},"indent":[]}},{"type":"text","value":" nodes work together to successfully execute cryptographic operations.","position":{"start":{"line":8,"column":264,"offset":702},"end":{"line":8,"column":334,"offset":772},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":439},"end":{"line":8,"column":334,"offset":772},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Threshold cryptography has many applications as it avoids single points of failure. One application is cryptocurrency multi-sig wallets, where ","position":{"start":{"line":10,"column":1,"offset":774},"end":{"line":10,"column":144,"offset":917},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"t-of-n","position":{"start":{"line":10,"column":145,"offset":918},"end":{"line":10,"column":151,"offset":924},"indent":[]}}],"position":{"start":{"line":10,"column":144,"offset":917},"end":{"line":10,"column":152,"offset":925},"indent":[]}},{"type":"text","value":" participants are required to sign a transaction using a threshold signature scheme.","position":{"start":{"line":10,"column":152,"offset":925},"end":{"line":10,"column":236,"offset":1009},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":774},"end":{"line":10,"column":236,"offset":1009},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":12,"column":3,"offset":1013},"end":{"line":12,"column":8,"offset":1018},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1011},"end":{"line":12,"column":10,"offset":1020},"indent":[]}},{"type":"text","value":"\nThis document is intended for a general audience. No cryptographic background knowledge is required to understand these concepts.","position":{"start":{"line":12,"column":10,"offset":1020},"end":{"line":13,"column":130,"offset":1150},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":1011},"end":{"line":13,"column":130,"offset":1150},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {\"order\":2,\"pcx-content-type\":\"concept\"}","position":{"start":{"line":16,"column":1,"offset":1153},"end":{"line":16,"column":69,"offset":1221},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":16,"column":69,"offset":1221}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 2,\n  \"pcx-content-type\": \"concept\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"cryptographic-background\"\n  }, \"Cryptographic Background\"), mdx(\"p\", null, \"drand is an efficient randomness beacon daemon that utilizes pairing-based cryptography, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC61-of-\\uD835\\uDC5B\"), \" distributed key generation, and threshold BLS signatures to generate publicly-verifiable, unbiasable, unpredictable, distributed randomness.\"), mdx(\"p\", null, \"This is an overview of the cryptographic building blocks drand uses to generate publicly-verifiable, unbiasable, and unpredictable randomness in a distributed manner.\"), mdx(\"p\", null, \"The drand beacon has two phases: a setup phase and a beacon phase. Generally, we assume that there are \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"n\"), \" participants, out of which at most \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"f<n\"), \" are malicious. drand relies heavily on threshold cryptography primitives, where (at minimum) a threshold of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"t-f+1\"), \" nodes work together to successfully execute cryptographic operations.\"), mdx(\"p\", null, \"Threshold cryptography has many applications as it avoids single points of failure. One application is cryptocurrency multi-sig wallets, where \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"t-of-n\"), \" participants are required to sign a transaction using a threshold signature scheme.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \"\\nThis document is intended for a general audience. No cryptographic background knowledge is required to understand these concepts.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"order\": 2,\n  \"pcx-content-type\": \"concept\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"cryptographic-background\"\n    }}>{`Cryptographic Background`}</h1>\n    <p>{`drand is an efficient randomness beacon daemon that utilizes pairing-based cryptography, `}<inlineCode parentName=\"p\">{`ùë°-of-ùëõ`}</inlineCode>{` distributed key generation, and threshold BLS signatures to generate publicly-verifiable, unbiasable, unpredictable, distributed randomness.`}</p>\n    <p>{`This is an overview of the cryptographic building blocks drand uses to generate publicly-verifiable, unbiasable, and unpredictable randomness in a distributed manner.`}</p>\n    <p>{`The drand beacon has two phases: a setup phase and a beacon phase. Generally, we assume that there are `}<em parentName=\"p\">{`n`}</em>{` participants, out of which at most `}<em parentName=\"p\">{`f<n`}</em>{` are malicious. drand relies heavily on threshold cryptography primitives, where (at minimum) a threshold of `}<em parentName=\"p\">{`t-f+1`}</em>{` nodes work together to successfully execute cryptographic operations.`}</p>\n    <p>{`Threshold cryptography has many applications as it avoids single points of failure. One application is cryptocurrency multi-sig wallets, where `}<em parentName=\"p\">{`t-of-n`}</em>{` participants are required to sign a transaction using a threshold signature scheme.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{`\nThis document is intended for a general audience. No cryptographic background knowledge is required to understand these concepts.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}