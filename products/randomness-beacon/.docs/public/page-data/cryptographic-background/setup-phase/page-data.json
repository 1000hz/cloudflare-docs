{"componentChunkName":"component---src-components-mdx-custom-renderer-js","path":"/cryptographic-background/setup-phase","result":{"data":{"mdx":{"id":"dc0dbcf3-408a-55d5-89af-dad2299e8baf","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 0,\n  \"pcx-content-type\": \"interim\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"setup-phase\"\n  }, \"Setup Phase\"), mdx(\"p\", null, \"In the drand setup phase, you create a collective private and public key pair shared among \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5B\"), \" participants. This is done through a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC61-of-\\uD835\\uDC5B\"), \" Distributed Key Generation (DKG) process and results in each participant receiving a copy of the collective public key plus a private key share of the collective private key \", \"\\u2014\", \" no individual node knows the collective \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"private\"), \" key. Each private key share can then be used to perform cryptographic threshold computations, such as generating threshold signatures, where at least \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC61\"), \" contributions produced using the individual private key shares are required to successfully finish the collective operation.\"), mdx(\"p\", null, \"A DKG is performed in a fully distributed manner, avoiding any single points of failure. This is an overview of the different sub-components of the drand DKG implementation.\"), mdx(\"h2\", {\n    \"id\": \"secret-sharing\"\n  }, \"Secret Sharing\"), mdx(\"p\", null, \"Secret sharing is an important technique many advanced threshold cryptography mechanisms rely on.\"), mdx(\"p\", null, \"Secret sharing allows you to split a secret value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\"), \" into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5B\"), \" shares \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC601,\\u2026,\\uD835\\uDC60\\uD835\\uDC5B\"), \" so that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\"), \" can only be reconstructed if a threshold of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC61\"), \" shares is available.\"), mdx(\"h2\", {\n    \"id\": \"shamirs-secret-sharing-sss\"\n  }, \"Shamir\\u2019s Secret Sharing (SSS)\"), mdx(\"p\", null, \"The SSS scheme is one of the most well-known and widely used secret sharing approaches, and a core component of drand. SSS works over an arbitrary finite field, but a simplistic approach uses the integers modulo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5D\"), \", denoted by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u2124\\uD835\\uDC5D\"), \". Let \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\\u2208\\u2124\\uD835\\uDC5D\"), \" denote the secret to share.\"), mdx(\"h3\", {\n    \"id\": \"share-distribution\"\n  }, \"Share Distribution\"), mdx(\"p\", null, \"To share \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\"), \", a dealer first creates a polynomial, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5E(\\uD835\\uDC65)=\\uD835\\uDC4E0+\\uD835\\uDC4E1\\uD835\\uDC65+\\u22EF+\\uD835\\uDC4E\\uD835\\uDC61\\u22121\\uD835\\uDC65\\uD835\\uDC61\\u22121\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC4E0=\\uD835\\uDC60\"), \" and (random) \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC4E\\uD835\\uDC56\\u2208\\u2124\\uD835\\uDC5D\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC56=1,\\u2026,\\uD835\\uDC61\\u22121\"), \" and then creates one share \\uD835\\uDC60\\uD835\\uDC56 for each participant \\uD835\\uDC56 by evaluating \\uD835\\uDC5E(\\uD835\\uDC65) at the integer \\uD835\\uDC56 and setting \\uD835\\uDC60\\uD835\\uDC56=(\\uD835\\uDC56,\\uD835\\uDC5E(\\uD835\\uDC56)).\"), mdx(\"h3\", {\n    \"id\": \"secret-reconstruction\"\n  }, \"Secret Reconstruction\"), mdx(\"p\", null, \"To recover the secret \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\"), \", collect at least \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC61\"), \" shares, then uniquely reconstruct \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5E(\\uD835\\uDC65)\"), \" using Lagrange interpolation and obtain \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\"), \" as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60=\\uD835\\uDC4E0=\\uD835\\uDC5E(0)\"), \".\"), mdx(\"p\", null, \"Note that you can use any subset of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC61-of-\\uD835\\uDC5B\"), \" shares to perform Lagrange interpolation and uniquely determine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\"), \"; however, having a subset of less than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC61\"), \" shares does not allow to learn anything about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\"), \".\"), mdx(\"h2\", {\n    \"id\": \"verifiable-secret-sharing\"\n  }, \"Verifiable Secret Sharing\"), mdx(\"p\", null, \"SSS scheme assumes that the dealer is honest, but this may not always hold in practice. A Verifiable Secret Sharing (VSS) scheme protects against malicious dealers by enabling participants to verify that their shares are consistent with those dealt to other nodes, ensuring that the shared secret can be correctly reconstructed later.\"), mdx(\"p\", null, \"drand uses Feldman\\u2019s VSS scheme, an extension of SSS. Let \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDD3E\"), \" denote a cyclic group of prime order \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5D\"), \" in which computing discrete logarithms is intractable. A \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cyclic group\"), \" means there exists a generator, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC54\"), \", so that any element \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC65\\u2208\\uD835\\uDD3E\"), \" can be written as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC65=\\uD835\\uDC54\\uD835\\uDC4E\"), \" for some \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC4E\\u2208{0,\\u2026,\\uD835\\uDC5D\\u22121}\"), \".\"), mdx(\"h3\", {\n    \"id\": \"share-distribution-1\"\n  }, \"Share Distribution\"), mdx(\"p\", null, \"In addition to distributing shares of the secret to participants, the dealer also broadcasts commitments to the coefficients of the polynomial \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5E(\\uD835\\uDC65)\"), \" of the form \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(\\uD835\\uDC340,\\uD835\\uDC341,\\u2026,\\uD835\\uDC34\\uD835\\uDC61\\u22121)=(\\uD835\\uDC54\\uD835\\uDC60,\\uD835\\uDC54\\uD835\\uDC4E1,\\u2026,\\uD835\\uDC54\\uD835\\uDC4E\\uD835\\uDC61\\u22121)\"), \". These commitments enable individual participants, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC56\"), \", to verify that their share \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\\uD835\\uDC56=(\\uD835\\uDC56,\\uD835\\uDC5E(\\uD835\\uDC56))\"), \" is consistent with respect to the polynomial \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5E(\\uD835\\uDC65)\"), \" by checking that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC54\\uD835\\uDC5E(\\uD835\\uDC56)=\\u220F\\uD835\\uDC61\\u22121\\uD835\\uDC57=0(\\uD835\\uDC34\\uD835\\uDC57)\\uD835\\uDC56\\uD835\\uDC57\"), \" holds.\"), mdx(\"h3\", {\n    \"id\": \"secret-reconstruction-1\"\n  }, \"Secret Reconstruction\"), mdx(\"p\", null, \"The recovery of secret \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\"), \" works the same as regular SSS, except that verified to be valid shares are used.\"), mdx(\"h2\", {\n    \"id\": \"distributed-key-generation-dkg\"\n  }, \"Distributed Key Generation (DKG)\"), mdx(\"p\", null, \"Although VSS schemes protect against a malicious dealer, the dealer still knows the secret. To create a collectively shared secret \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\"), \" so no individual node gets any information about it, participants can use a DKG protocol. drand uses Pedersen\\u2019s DKG scheme, which runs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC5B\"), \" instances of Feldman\\u2019s VSS in parallel and on top of additional verification steps.\"), mdx(\"h3\", {\n    \"id\": \"share-distribution-2\"\n  }, \"Share Distribution\"), mdx(\"p\", null, \"Individual participants, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC56\"), \", create a (random) secret, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\\uD835\\uDC56\\u2208\\u2124\\uD835\\uDC5D\"), \", and share it all participants using VSS, sending a share, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\\uD835\\uDC56,\\uD835\\uDC57\"), \" to each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC57\"), \" and broadcasts the list of commitments \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(\\uD835\\uDC34\\uD835\\uDC56,0,\\uD835\\uDC34\\uD835\\uDC56,1,\\u2026,\\uD835\\uDC34\\uD835\\uDC56,\\uD835\\uDC61\\u22121)\"), \" to everyone.\"), mdx(\"h3\", {\n    \"id\": \"share-verification\"\n  }, \"Share Verification\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC57\"), \" verifies the shares received as prescribed by Feldman\\u2019s VSS scheme. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC57\"), \" receives an invalid share, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\\uD835\\uDC56,\\uD835\\uDC57\"), \", from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC56\"), \", then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC57\"), \" broadcasts a complaint. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC56\"), \" must reveal the correct share \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\\uD835\\uDC56,\\uD835\\uDC57\"), \" or they are considered an invalid dealer.\"), mdx(\"h3\", {\n    \"id\": \"share-finalization\"\n  }, \"Share Finalization\"), mdx(\"p\", null, \"At the end of the protocol, the final share of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC56\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC60\\uD835\\uDC56=\\u2211\\uD835\\uDC57\\uD835\\uDC60\\uD835\\uDC57,\\uD835\\uDC56\"), \" for all valid participants \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC57\"), \" , that is, for all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC57\"), \"s not excluded during the verification phase.\"), mdx(\"p\", null, \"The collective public key associated with the valid shares can be computed as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC46=\\u2211\\uD835\\uDC57\\uD835\\uDC34\\uD835\\uDC57,0\"), \" for all valid \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uD835\\uDC57\"), \"s.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Even though the secret created using Pedersen\\u2019s DKG can be biased, it is safe to use for threshold signing as shown by Rabin et al.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"demo":null,"difficulty":null,"summary":null,"tags":null,"title":"","type":null,"updated":null}}},"pageContext":{"id":"dc0dbcf3-408a-55d5-89af-dad2299e8baf","fields":{"slug":"/cryptographic-background/setup-phase"},"frontmatter":{"title":"","type":null,"order":0,"hidden":null,"hideChildren":null,"breadcrumbs":null},"headings":[{"value":"Setup Phase","depth":1}],"tableOfContents":{"items":[{"url":"#setup-phase","title":"Setup Phase","items":[{"url":"#secret-sharing","title":"Secret Sharing"},{"url":"#shamirs-secret-sharing-sss","title":"Shamir’s Secret Sharing (SSS)","items":[{"url":"#share-distribution","title":"Share Distribution"},{"url":"#secret-reconstruction","title":"Secret Reconstruction"}]},{"url":"#verifiable-secret-sharing","title":"Verifiable Secret Sharing","items":[{"url":"#share-distribution-1","title":"Share Distribution"},{"url":"#secret-reconstruction-1","title":"Secret Reconstruction"}]},{"url":"#distributed-key-generation-dkg","title":"Distributed Key Generation (DKG)","items":[{"url":"#share-distribution-2","title":"Share Distribution"},{"url":"#share-verification","title":"Share Verification"},{"url":"#share-finalization","title":"Share Finalization"}]}]}]},"parent":{"modifiedTime":"2021-10-26","relativePath":"cryptographic-background/setup-phase.md"}}},"staticQueryHashes":["1052658729","2814688963","32046230","338033027","811020565"]}